diff --git a/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/Checkbox.web.js b/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/Checkbox.web.js
index ecc1b20..8dca310 100644
--- a/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/Checkbox.web.js
+++ b/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/Checkbox.web.js
@@ -80,12 +80,12 @@ const Checkbox = ({
     inputProps: groupItemInputProps
   } = checkboxGroupContext ? // eslint-disable-next-line react-hooks/rules-of-hooks
   (0, _checkbox.useCheckboxGroupItem)({ ...combinedProps,
-    'aria-label': combinedProps.accessibilityLabel,
+    'aria-label': combinedProps.accessibilityLabel || 'Checkbox',
     'value': combinedProps.value
   }, checkboxGroupContext.state, //@ts-ignore
   mergedRef) : // eslint-disable-next-line react-hooks/rules-of-hooks
   (0, _checkbox.useCheckbox)({ ...combinedProps,
-    'aria-label': combinedProps.accessibilityLabel
+    'aria-label': combinedProps.accessibilityLabel || 'Checkbox'
   }, state, //@ts-ignore
   mergedRef); // eslint-disable-next-line react-hooks/exhaustive-deps
 
diff --git a/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/Checkbox.web.js.map b/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/Checkbox.web.js.map
index 98f6b1e..0baf75b 100644
--- a/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/Checkbox.web.js.map
+++ b/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/Checkbox.web.js.map
@@ -1 +1,65 @@
-{"version":3,"sources":["Checkbox.web.tsx"],"names":["Checkbox","wrapperRef","isHovered","isHoveredProp","isFocusVisible","isFocusVisibleProp","props","ref","formControlContext","isInvalid","isReadOnly","isIndeterminate","combinedProps","checkboxGroupContext","React","useContext","CheckboxGroupContext","state","defaultSelected","defaultIsChecked","isSelected","isChecked","_ref","useRef","mergedRef","inputProps","groupItemInputProps","accessibilityLabel","value","useMemo","checked","disabled","contextCombinedProps","CheckboxComponent","memo","isDisabled","focusProps","icon","_interactionBox","_icon","_stack","_text","resolvedProps","layoutProps","nonLayoutProps","stylingProps","margin","layout","flexbox","position","component","children","mergedWrapperRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport { mergeRefs } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\nimport { Stack } from '../Stack';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\n\nconst Checkbox = (\n  {\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n          'value': combinedProps.value,\n        },\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n    groupItemInputProps,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...checkboxGroupContext, ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  return (\n    <CheckboxComponent\n      wrapperRef={wrapperRef}\n      mergedRef={mergedRef}\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isHovered={isHoveredProp}\n      isIndeterminate={isIndeterminate}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    mergedRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n  }: any) => {\n    const _ref = React.useRef();\n    const { isHovered } = useHover({}, _ref);\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      _stack,\n      _text,\n      ...resolvedProps\n    } = usePropsResolution('Checkbox', combinedProps, {\n      isInvalid,\n      isReadOnly,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered: isHovered || isHoveredProp,\n    });\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n    const component = React.useMemo(() => {\n      return (\n        <Stack {..._stack} {...layoutProps}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Checkbox */}\n            <Center {...nonLayoutProps}>\n              {/* {iconResolver()} */}\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {/* {resolvedProps?.children} */}\n          {wrapStringChild(resolvedProps?.children, _text)}\n        </Stack>\n      );\n    }, [\n      _icon,\n      _stack,\n      _text,\n      _interactionBox,\n      icon,\n      isChecked,\n      nonLayoutProps,\n      layoutProps,\n      resolvedProps?.children,\n    ]);\n\n    const mergedWrapperRef = React.useMemo(\n      () => mergeRefs([wrapperRef, _ref]),\n      [wrapperRef]\n    );\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Box\n        // @ts-ignore - RN web supports accessibilityRole=\"label\"\n        accessibilityRole=\"label\"\n        ref={mergedWrapperRef}\n      >\n        <VisuallyHidden>\n          {/* <input {...props.inputProps} {...props.focusProps} ref={props.mergedRef} /> */}\n          <input {...inputProps} {...focusProps} ref={mergedRef} />\n        </VisuallyHidden>\n\n        {component}\n      </Box>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "Checkbox.web.tsx"
+  ],
+  "names": [
+    "Checkbox",
+    "wrapperRef",
+    "isHovered",
+    "isHoveredProp",
+    "isFocusVisible",
+    "isFocusVisibleProp",
+    "props",
+    "ref",
+    "formControlContext",
+    "isInvalid",
+    "isReadOnly",
+    "isIndeterminate",
+    "combinedProps",
+    "checkboxGroupContext",
+    "React",
+    "useContext",
+    "CheckboxGroupContext",
+    "state",
+    "defaultSelected",
+    "defaultIsChecked",
+    "isSelected",
+    "isChecked",
+    "_ref",
+    "useRef",
+    "mergedRef",
+    "inputProps",
+    "groupItemInputProps",
+    "accessibilityLabel",
+    "value",
+    "useMemo",
+    "checked",
+    "disabled",
+    "contextCombinedProps",
+    "CheckboxComponent",
+    "memo",
+    "isDisabled",
+    "focusProps",
+    "icon",
+    "_interactionBox",
+    "_icon",
+    "_stack",
+    "_text",
+    "resolvedProps",
+    "layoutProps",
+    "nonLayoutProps",
+    "stylingProps",
+    "margin",
+    "layout",
+    "flexbox",
+    "position",
+    "component",
+    "children",
+    "mergedWrapperRef"
+  ],
+  "mappings": "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",
+  "sourcesContent": [
+    "import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport { mergeRefs } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\nimport { Stack } from '../Stack';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\n\nconst Checkbox = (\n  {\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel || 'test',\n          'value': combinedProps.value,\n        },\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel || 'test',\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n    groupItemInputProps,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...checkboxGroupContext, ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  return (\n    <CheckboxComponent\n      wrapperRef={wrapperRef}\n      mergedRef={mergedRef}\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isHovered={isHoveredProp}\n      isIndeterminate={isIndeterminate}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    mergedRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n  }: any) => {\n    const _ref = React.useRef();\n    const { isHovered } = useHover({}, _ref);\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      _stack,\n      _text,\n      ...resolvedProps\n    } = usePropsResolution('Checkbox', combinedProps, {\n      isInvalid,\n      isReadOnly,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered: isHovered || isHoveredProp,\n    });\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n    const component = React.useMemo(() => {\n      return (\n        <Stack {..._stack} {...layoutProps}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Checkbox */}\n            <Center {...nonLayoutProps}>\n              {/* {iconResolver()} */}\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {/* {resolvedProps?.children} */}\n          {wrapStringChild(resolvedProps?.children, _text)}\n        </Stack>\n      );\n    }, [\n      _icon,\n      _stack,\n      _text,\n      _interactionBox,\n      icon,\n      isChecked,\n      nonLayoutProps,\n      layoutProps,\n      resolvedProps?.children,\n    ]);\n\n    const mergedWrapperRef = React.useMemo(\n      () => mergeRefs([wrapperRef, _ref]),\n      [wrapperRef]\n    );\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Box\n        // @ts-ignore - RN web supports accessibilityRole=\"label\"\n        accessibilityRole=\"label\"\n        ref={mergedWrapperRef}\n      >\n        <VisuallyHidden>\n          {/* <input {...props.inputProps} {...props.focusProps} ref={props.mergedRef} /> */}\n          <input {...inputProps} {...focusProps} ref={mergedRef} />\n        </VisuallyHidden>\n\n        {component}\n      </Box>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"
+  ]
+}
diff --git a/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/CheckboxGroup.js b/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/CheckboxGroup.js
index 9dd55ab..565a149 100644
--- a/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/CheckboxGroup.js
+++ b/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/CheckboxGroup.js
@@ -1,80 +1,148 @@
-"use strict";
+'use strict';
 
-Object.defineProperty(exports, "__esModule", {
-  value: true
+Object.defineProperty(exports, '__esModule', {
+  value: true,
 });
 exports.default = exports.CheckboxGroupContext = void 0;
 
-var _react = _interopRequireWildcard(require("react"));
+var _react = _interopRequireWildcard(require('react'));
 
-var _checkbox2 = require("@react-stately/checkbox");
+var _checkbox2 = require('@react-stately/checkbox');
 
-var _checkbox3 = require("@react-native-aria/checkbox");
+var _checkbox3 = require('@react-native-aria/checkbox');
 
-var _FormControl = require("../../composites/FormControl");
+var _FormControl = require('../../composites/FormControl');
 
-var _Box = _interopRequireDefault(require("../Box"));
+var _Box = _interopRequireDefault(require('../Box'));
 
-var _useHasResponsiveProps = require("../../../hooks/useHasResponsiveProps");
+var _useHasResponsiveProps = require('../../../hooks/useHasResponsiveProps');
 
-var _useThemeProps = require("../../../hooks/useThemeProps");
+var _useThemeProps = require('../../../hooks/useThemeProps');
 
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+function _interopRequireDefault(obj) {
+  return obj && obj.__esModule ? obj : { default: obj };
+}
 
-function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }
+function _getRequireWildcardCache() {
+  if (typeof WeakMap !== 'function') return null;
+  var cache = new WeakMap();
+  _getRequireWildcardCache = function () {
+    return cache;
+  };
+  return cache;
+}
 
-function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
+function _interopRequireWildcard(obj) {
+  if (obj && obj.__esModule) {
+    return obj;
+  }
+  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
+    return { default: obj };
+  }
+  var cache = _getRequireWildcardCache();
+  if (cache && cache.has(obj)) {
+    return cache.get(obj);
+  }
+  var newObj = {};
+  var hasPropertyDescriptor =
+    Object.defineProperty && Object.getOwnPropertyDescriptor;
+  for (var key in obj) {
+    if (Object.prototype.hasOwnProperty.call(obj, key)) {
+      var desc = hasPropertyDescriptor
+        ? Object.getOwnPropertyDescriptor(obj, key)
+        : null;
+      if (desc && (desc.get || desc.set)) {
+        Object.defineProperty(newObj, key, desc);
+      } else {
+        newObj[key] = obj[key];
+      }
+    }
+  }
+  newObj.default = obj;
+  if (cache) {
+    cache.set(obj, newObj);
+  }
+  return newObj;
+}
 
-function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
+function _extends() {
+  _extends =
+    Object.assign ||
+    function (target) {
+      for (var i = 1; i < arguments.length; i++) {
+        var source = arguments[i];
+        for (var key in source) {
+          if (Object.prototype.hasOwnProperty.call(source, key)) {
+            target[key] = source[key];
+          }
+        }
+      }
+      return target;
+    };
+  return _extends.apply(this, arguments);
+}
 
-const CheckboxGroupContext = /*#__PURE__*/(0, _react.createContext)(null);
+const CheckboxGroupContext = /*#__PURE__*/ (0, _react.createContext)(null);
 exports.CheckboxGroupContext = CheckboxGroupContext;
 
-function CheckboxGroup({
-  size,
-  _checkbox,
-  colorScheme,
-  ...props
-}, ref) {
-  const resolvedProps = (0, _useThemeProps.usePropsResolution)('CheckboxGroup', props);
-  const {
-    children
-  } = props;
+function CheckboxGroup({ size, _checkbox, colorScheme, ...props }, ref) {
+  const resolvedProps = (0, _useThemeProps.usePropsResolution)(
+    'CheckboxGroup',
+    props
+  );
+  const { children } = props;
   const state = (0, _checkbox2.useCheckboxGroupState)(props);
-  const {
-    groupProps
-  } = (0, _checkbox3.useCheckboxGroup)({
-    'aria-label': props.accessibilityLabel,
-    ...props
-  }, state);
-  const formControlContext = (0, _FormControl.useFormControlContext)();
-  const value = (0, _react.useMemo)(() => ({
-    size,
-    colorScheme,
-    ..._checkbox,
-    ...formControlContext,
+  const { groupProps } = (0, _checkbox3.useCheckboxGroup)(
+    {
+      'aria-label': props.accessibilityLabel || 'checkbox-group',
+      ...props,
+    },
     state
-  }), [_checkbox, colorScheme, formControlContext, size, state]); //TODO: refactor for responsive prop
-
-  if ((0, _useHasResponsiveProps.useHasResponsiveProps)({ ...props,
-    size,
-    colorScheme
-  })) {
+  );
+  const formControlContext = (0, _FormControl.useFormControlContext)();
+  const value = (0, _react.useMemo)(
+    () => ({
+      size,
+      colorScheme,
+      ..._checkbox,
+      ...formControlContext,
+      state,
+    }),
+    [_checkbox, colorScheme, formControlContext, size, state]
+  ); //TODO: refactor for responsive prop
+
+  if (
+    (0, _useHasResponsiveProps.useHasResponsiveProps)({
+      ...props,
+      size,
+      colorScheme,
+    })
+  ) {
     return null;
   }
 
   return (
     /*#__PURE__*/
     // @ts-ignore
-    _react.default.createElement(CheckboxGroupContext.Provider, {
-      value: value
-    }, /*#__PURE__*/_react.default.createElement(_Box.default, _extends({}, resolvedProps, groupProps, props, {
-      ref: ref
-    }), children))
+    _react.default.createElement(
+      CheckboxGroupContext.Provider,
+      {
+        value: value,
+      },
+      /*#__PURE__*/ _react.default.createElement(
+        _Box.default,
+        _extends({}, resolvedProps, groupProps, props, {
+          ref: ref,
+        }),
+        children
+      )
+    )
   );
 }
 
-var _default = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(CheckboxGroup));
+var _default = /*#__PURE__*/ (0, _react.memo)(
+  /*#__PURE__*/ (0, _react.forwardRef)(CheckboxGroup)
+);
 
 exports.default = _default;
 //# sourceMappingURL=CheckboxGroup.js.map
diff --git a/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/CheckboxGroup.js.map b/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/CheckboxGroup.js.map
index ec2bebf..4372c21 100644
--- a/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/CheckboxGroup.js.map
+++ b/node_modules/native-base/lib/commonjs/components/primitives/Checkbox/CheckboxGroup.js.map
@@ -1 +1,26 @@
-{"version":3,"sources":["CheckboxGroup.tsx"],"names":["CheckboxGroupContext","CheckboxGroup","size","_checkbox","colorScheme","props","ref","resolvedProps","children","state","groupProps","accessibilityLabel","formControlContext","value"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEO,MAAMA,oBAAoB,gBAAG,0BAClC,IADkC,CAA7B;;;AAIP,SAASC,aAAT,CACE;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,SAAR;AAAmBC,EAAAA,WAAnB;AAAgC,KAAGC;AAAnC,CADF,EAEEC,GAFF,EAGE;AACA,QAAMC,aAAa,GAAG,uCAAmB,eAAnB,EAAoCF,KAApC,CAAtB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAeH,KAArB;AACA,QAAMI,KAAK,GAAG,sCAAsBJ,KAAtB,CAAd;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAiB,iCACrB;AAAE,kBAAcL,KAAK,CAACM,kBAAtB;AAA0C,OAAGN;AAA7C,GADqB,EAErBI,KAFqB,CAAvB;AAIA,QAAMG,kBAAkB,GAAG,yCAA3B;AACA,QAAMC,KAAK,GAAG,oBACZ,OAAO;AACLX,IAAAA,IADK;AAELE,IAAAA,WAFK;AAGL,OAAGD,SAHE;AAIL,OAAGS,kBAJE;AAKLH,IAAAA;AALK,GAAP,CADY,EAQZ,CAACN,SAAD,EAAYC,WAAZ,EAAyBQ,kBAAzB,EAA6CV,IAA7C,EAAmDO,KAAnD,CARY,CAAd,CATA,CAoBA;;AACA,MAAI,kDAAsB,EAAE,GAAGJ,KAAL;AAAYH,IAAAA,IAAZ;AAAkBE,IAAAA;AAAlB,GAAtB,CAAJ,EAA4D;AAC1D,WAAO,IAAP;AACD;;AACD;AAAA;AACE;AACA,iCAAC,oBAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAES;AAAtC,oBACE,6BAAC,YAAD,eAASN,aAAT,EAA4BG,UAA5B,EAA4CL,KAA5C;AAAmD,MAAA,GAAG,EAAEC;AAAxD,QACGE,QADH,CADF;AAFF;AAQD;;4BAEc,+BAAK,uBAAWP,aAAX,CAAL,C","sourcesContent":["import React, { createContext, memo, forwardRef, useMemo } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { ICheckboxGroupProps, ICheckboxContext } from './types';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const CheckboxGroupContext = createContext<ICheckboxContext | null>(\n  null\n);\n\nfunction CheckboxGroup(\n  { size, _checkbox, colorScheme, ...props }: ICheckboxGroupProps,\n  ref?: any\n) {\n  const resolvedProps = usePropsResolution('CheckboxGroup', props);\n  const { children } = props;\n  const state = useCheckboxGroupState(props);\n  const { groupProps } = useCheckboxGroup(\n    { 'aria-label': props.accessibilityLabel, ...props },\n    state\n  );\n  const formControlContext = useFormControlContext();\n  const value = useMemo(\n    () => ({\n      size,\n      colorScheme,\n      ..._checkbox,\n      ...formControlContext,\n      state,\n    }),\n    [_checkbox, colorScheme, formControlContext, size, state]\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n  return (\n    // @ts-ignore\n    <CheckboxGroupContext.Provider value={value}>\n      <Box {...resolvedProps} {...groupProps} {...props} ref={ref}>\n        {children}\n      </Box>\n    </CheckboxGroupContext.Provider>\n  );\n}\n\nexport default memo(forwardRef(CheckboxGroup));\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "CheckboxGroup.tsx"
+  ],
+  "names": [
+    "CheckboxGroupContext",
+    "CheckboxGroup",
+    "size",
+    "_checkbox",
+    "colorScheme",
+    "props",
+    "ref",
+    "resolvedProps",
+    "children",
+    "state",
+    "groupProps",
+    "accessibilityLabel",
+    "formControlContext",
+    "value"
+  ],
+  "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEO,MAAMA,oBAAoB,gBAAG,0BAClC,IADkC,CAA7B;;;AAIP,SAASC,aAAT,CACE;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,SAAR;AAAmBC,EAAAA,WAAnB;AAAgC,KAAGC;AAAnC,CADF,EAEEC,GAFF,EAGE;AACA,QAAMC,aAAa,GAAG,uCAAmB,eAAnB,EAAoCF,KAApC,CAAtB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAeH,KAArB;AACA,QAAMI,KAAK,GAAG,sCAAsBJ,KAAtB,CAAd;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAiB,iCACrB;AAAE,kBAAcL,KAAK,CAACM,kBAAtB;AAA0C,OAAGN;AAA7C,GADqB,EAErBI,KAFqB,CAAvB;AAIA,QAAMG,kBAAkB,GAAG,yCAA3B;AACA,QAAMC,KAAK,GAAG,oBACZ,OAAO;AACLX,IAAAA,IADK;AAELE,IAAAA,WAFK;AAGL,OAAGD,SAHE;AAIL,OAAGS,kBAJE;AAKLH,IAAAA;AALK,GAAP,CADY,EAQZ,CAACN,SAAD,EAAYC,WAAZ,EAAyBQ,kBAAzB,EAA6CV,IAA7C,EAAmDO,KAAnD,CARY,CAAd,CATA,CAoBA;;AACA,MAAI,kDAAsB,EAAE,GAAGJ,KAAL;AAAYH,IAAAA,IAAZ;AAAkBE,IAAAA;AAAlB,GAAtB,CAAJ,EAA4D;AAC1D,WAAO,IAAP;AACD;;AACD;AAAA;AACE;AACA,iCAAC,oBAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAES;AAAtC,oBACE,6BAAC,YAAD,eAASN,aAAT,EAA4BG,UAA5B,EAA4CL,KAA5C;AAAmD,MAAA,GAAG,EAAEC;AAAxD,QACGE,QADH,CADF;AAFF;AAQD;;4BAEc,+BAAK,uBAAWP,aAAX,CAAL,C",
+  "sourcesContent": [
+    "import React, { createContext, memo, forwardRef, useMemo } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { ICheckboxGroupProps, ICheckboxContext } from './types';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const CheckboxGroupContext = createContext<ICheckboxContext | null>(\n  null\n);\n\nfunction CheckboxGroup(\n  { size, _checkbox, colorScheme, ...props }: ICheckboxGroupProps,\n  ref?: any\n) {\n  const resolvedProps = usePropsResolution('CheckboxGroup', props);\n  const { children } = props;\n  const state = useCheckboxGroupState(props);\n  const { groupProps } = useCheckboxGroup(\n    { 'aria-label': props.accessibilityLabel || 'test', ...props },\n    state\n  );\n  const formControlContext = useFormControlContext();\n  const value = useMemo(\n    () => ({\n      size,\n      colorScheme,\n      ..._checkbox,\n      ...formControlContext,\n      state,\n    }),\n    [_checkbox, colorScheme, formControlContext, size, state]\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n  return (\n    // @ts-ignore\n    <CheckboxGroupContext.Provider value={value}>\n      <Box {...resolvedProps} {...groupProps} {...props} ref={ref}>\n        {children}\n      </Box>\n    </CheckboxGroupContext.Provider>\n  );\n}\n\nexport default memo(forwardRef(CheckboxGroup));\n"
+  ]
+}
diff --git a/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.js b/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.js
index cbe6105..8ee62c0 100644
--- a/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.js
+++ b/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.js
@@ -1,181 +1,294 @@
-"use strict";
+'use strict';
 
-Object.defineProperty(exports, "__esModule", {
-  value: true
+Object.defineProperty(exports, '__esModule', {
+  value: true,
 });
 exports.default = void 0;
 
-var _react = _interopRequireWildcard(require("react"));
-
-var _stableHash = _interopRequireDefault(require("stable-hash"));
-
-var _Pressable = require("../Pressable");
-
-var _Center = require("../../composites/Center");
-
-var _Box = _interopRequireDefault(require("../Box"));
-
-var _Stack = require("../Stack");
-
-var _useThemeProps = require("../../../hooks/useThemeProps");
-
-var _wrapStringChild = require("../../../utils/wrapStringChild");
-
-var _radio = require("@react-native-aria/radio");
-
-var _RadioGroup = require("./RadioGroup");
-
-var _utils = require("../../../utils");
-
-var _Icons = require("../Icon/Icons");
-
-var _useHasResponsiveProps = require("../../../hooks/useHasResponsiveProps");
-
-var _utils2 = require("../../../theme/tools/utils");
-
-var _Pressable2 = require("../../primitives/Pressable/Pressable");
-
-var _FormControl = require("../../composites/FormControl");
-
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-
-function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }
-
-function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
-
-function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
-
-const RadioComponent = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(({
-  icon,
-  inputProps,
-  combinedProps,
-  size,
-  children,
-  wrapperRef,
-  isHovered: isHoveredProp,
-  isPressed: isPressedProp,
-  isFocused: isFocusedProp
-}, ref) => {
-  const {
-    isInvalid,
-    isReadOnly,
-    isIndeterminate
-  } = combinedProps;
-  const {
-    hoverProps,
-    isHovered
-  } = (0, _Pressable2.useHover)();
-  const {
-    pressableProps,
-    isPressed
-  } = (0, _Pressable2.useIsPressed)();
-  const {
-    focusProps,
-    isFocused
-  } = (0, _Pressable2.useFocus)();
-  const {
-    disabled: isDisabled,
-    checked: isChecked
-  } = inputProps;
-  const {
-    onPressIn,
-    onPressOut,
-    onHoverIn,
-    onHoverOut,
-    onFocus,
-    onBlur,
-    _interactionBox,
-    _icon,
-    _stack,
-    _text,
-    ...resolvedProps
-  } = (0, _useThemeProps.usePropsResolution)('Radio', { ...combinedProps,
-    size
-  }, {
-    isInvalid,
-    isReadOnly,
-    isDisabled,
-    isIndeterminate,
-    isChecked,
-    isHovered: isHoveredProp || isHovered,
-    isPressed: isPressedProp || isPressed,
-    isFocused: isFocusedProp || isFocused
-  });
-  const [, cleanInputProps] = (0, _utils2.extractInObject)(inputProps, [..._utils2.stylingProps.margin, ..._utils2.stylingProps.layout, ..._utils2.stylingProps.flexbox, ..._utils2.stylingProps.position, ..._utils2.stylingProps.background, ..._utils2.stylingProps.padding, ..._utils2.stylingProps.border, '_text']); // only calling below function when icon exist.
+var _react = _interopRequireWildcard(require('react'));
 
-  const sizedIcon = () =>
-  /*#__PURE__*/
-  //@ts-ignore
-  _react.default.cloneElement(icon, { ..._icon
-  });
+var _stableHash = _interopRequireDefault(require('stable-hash'));
+
+var _Pressable = require('../Pressable');
+
+var _Center = require('../../composites/Center');
+
+var _Box = _interopRequireDefault(require('../Box'));
+
+var _Stack = require('../Stack');
+
+var _useThemeProps = require('../../../hooks/useThemeProps');
+
+var _wrapStringChild = require('../../../utils/wrapStringChild');
+
+var _radio = require('@react-native-aria/radio');
+
+var _RadioGroup = require('./RadioGroup');
+
+var _utils = require('../../../utils');
+
+var _Icons = require('../Icon/Icons');
+
+var _useHasResponsiveProps = require('../../../hooks/useHasResponsiveProps');
+
+var _utils2 = require('../../../theme/tools/utils');
 
-  return /*#__PURE__*/_react.default.createElement(_Pressable.Pressable, _extends({
-    disabled: isDisabled
-  }, pressableProps, cleanInputProps, {
-    ref: (0, _utils.mergeRefs)([ref, wrapperRef]),
-    accessibilityRole: "radio",
-    onPressIn: (0, _utils.composeEventHandlers)(onPressIn, pressableProps.onPressIn),
-    onPressOut: (0, _utils.composeEventHandlers)(onPressOut, pressableProps.onPressOut) // @ts-ignore - web only
-    ,
-    onHoverIn: (0, _utils.composeEventHandlers)(onHoverIn, hoverProps.onHoverIn) // @ts-ignore - web only
-    ,
-    onHoverOut: (0, _utils.composeEventHandlers)(onHoverOut, hoverProps.onHoverOut) // @ts-ignore - web only
-    ,
-    onFocus: (0, _utils.composeEventHandlers)((0, _utils.composeEventHandlers)(onFocus, focusProps.onFocus) // focusRingProps.onFocu
-    ) // @ts-ignore - web only
-    ,
-    onBlur: (0, _utils.composeEventHandlers)((0, _utils.composeEventHandlers)(onBlur, focusProps.onBlur) // focusRingProps.onBlur
-    )
-  }), /*#__PURE__*/_react.default.createElement(_Stack.Stack, _stack, /*#__PURE__*/_react.default.createElement(_Center.Center, null, /*#__PURE__*/_react.default.createElement(_Box.default, _interactionBox), /*#__PURE__*/_react.default.createElement(_Center.Center, resolvedProps, icon && sizedIcon && isChecked ? sizedIcon() : /*#__PURE__*/_react.default.createElement(_Icons.CircleIcon, _extends({}, _icon, {
-    opacity: isChecked ? 1 : 0
-  })))), (0, _wrapStringChild.wrapStringChild)(children, _text)));
-}));
-
-const Radio = ({
-  icon,
-  children,
-  size,
-  wrapperRef,
-  isHovered: isHoveredProp,
-  isPressed: isPressedProp,
-  isFocused: isFocusedProp,
-  ...props
-}, ref) => {
+var _Pressable2 = require('../../primitives/Pressable/Pressable');
+
+var _FormControl = require('../../composites/FormControl');
+
+function _interopRequireDefault(obj) {
+  return obj && obj.__esModule ? obj : { default: obj };
+}
+
+function _getRequireWildcardCache() {
+  if (typeof WeakMap !== 'function') return null;
+  var cache = new WeakMap();
+  _getRequireWildcardCache = function () {
+    return cache;
+  };
+  return cache;
+}
+
+function _interopRequireWildcard(obj) {
+  if (obj && obj.__esModule) {
+    return obj;
+  }
+  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
+    return { default: obj };
+  }
+  var cache = _getRequireWildcardCache();
+  if (cache && cache.has(obj)) {
+    return cache.get(obj);
+  }
+  var newObj = {};
+  var hasPropertyDescriptor =
+    Object.defineProperty && Object.getOwnPropertyDescriptor;
+  for (var key in obj) {
+    if (Object.prototype.hasOwnProperty.call(obj, key)) {
+      var desc = hasPropertyDescriptor
+        ? Object.getOwnPropertyDescriptor(obj, key)
+        : null;
+      if (desc && (desc.get || desc.set)) {
+        Object.defineProperty(newObj, key, desc);
+      } else {
+        newObj[key] = obj[key];
+      }
+    }
+  }
+  newObj.default = obj;
+  if (cache) {
+    cache.set(obj, newObj);
+  }
+  return newObj;
+}
+
+function _extends() {
+  _extends =
+    Object.assign ||
+    function (target) {
+      for (var i = 1; i < arguments.length; i++) {
+        var source = arguments[i];
+        for (var key in source) {
+          if (Object.prototype.hasOwnProperty.call(source, key)) {
+            target[key] = source[key];
+          }
+        }
+      }
+      return target;
+    };
+  return _extends.apply(this, arguments);
+}
+
+const RadioComponent = /*#__PURE__*/ (0, _react.memo)(
+  /*#__PURE__*/ (0, _react.forwardRef)(
+    (
+      {
+        icon,
+        inputProps,
+        combinedProps,
+        size,
+        children,
+        wrapperRef,
+        isHovered: isHoveredProp,
+        isPressed: isPressedProp,
+        isFocused: isFocusedProp,
+      },
+      ref
+    ) => {
+      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;
+      const { hoverProps, isHovered } = (0, _Pressable2.useHover)();
+      const { pressableProps, isPressed } = (0, _Pressable2.useIsPressed)();
+      const { focusProps, isFocused } = (0, _Pressable2.useFocus)();
+      const { disabled: isDisabled, checked: isChecked } = inputProps;
+      const {
+        onPressIn,
+        onPressOut,
+        onHoverIn,
+        onHoverOut,
+        onFocus,
+        onBlur,
+        _interactionBox,
+        _icon,
+        _stack,
+        _text,
+        ...resolvedProps
+      } = (0, _useThemeProps.usePropsResolution)(
+        'Radio',
+        { ...combinedProps, size },
+        {
+          isInvalid,
+          isReadOnly,
+          isDisabled,
+          isIndeterminate,
+          isChecked,
+          isHovered: isHoveredProp || isHovered,
+          isPressed: isPressedProp || isPressed,
+          isFocused: isFocusedProp || isFocused,
+        }
+      );
+      const [, cleanInputProps] = (0, _utils2.extractInObject)(inputProps, [
+        ..._utils2.stylingProps.margin,
+        ..._utils2.stylingProps.layout,
+        ..._utils2.stylingProps.flexbox,
+        ..._utils2.stylingProps.position,
+        ..._utils2.stylingProps.background,
+        ..._utils2.stylingProps.padding,
+        ..._utils2.stylingProps.border,
+        '_text',
+      ]); // only calling below function when icon exist.
+
+      const sizedIcon = () =>
+        /*#__PURE__*/
+        //@ts-ignore
+        _react.default.cloneElement(icon, { ..._icon });
+
+      return /*#__PURE__*/ _react.default.createElement(
+        _Pressable.Pressable,
+        _extends(
+          {
+            disabled: isDisabled,
+          },
+          pressableProps,
+          cleanInputProps,
+          {
+            ref: (0, _utils.mergeRefs)([ref, wrapperRef]),
+            accessibilityRole: 'radio',
+            onPressIn: (0, _utils.composeEventHandlers)(
+              onPressIn,
+              pressableProps.onPressIn
+            ),
+            onPressOut: (0, _utils.composeEventHandlers)(
+              onPressOut,
+              pressableProps.onPressOut
+            ), // @ts-ignore - web only
+            onHoverIn: (0, _utils.composeEventHandlers)(
+              onHoverIn,
+              hoverProps.onHoverIn
+            ), // @ts-ignore - web only
+            onHoverOut: (0, _utils.composeEventHandlers)(
+              onHoverOut,
+              hoverProps.onHoverOut
+            ), // @ts-ignore - web only
+            onFocus: (0, _utils.composeEventHandlers)(
+              (0, _utils.composeEventHandlers)(onFocus, focusProps.onFocus) // focusRingProps.onFocu
+            ), // @ts-ignore - web only
+            onBlur: (0, _utils.composeEventHandlers)(
+              (0, _utils.composeEventHandlers)(onBlur, focusProps.onBlur) // focusRingProps.onBlur
+            ),
+          }
+        ),
+        /*#__PURE__*/ _react.default.createElement(
+          _Stack.Stack,
+          _stack,
+          /*#__PURE__*/ _react.default.createElement(
+            _Center.Center,
+            null,
+            /*#__PURE__*/ _react.default.createElement(
+              _Box.default,
+              _interactionBox
+            ),
+            /*#__PURE__*/ _react.default.createElement(
+              _Center.Center,
+              resolvedProps,
+              icon && sizedIcon && isChecked
+                ? sizedIcon()
+                : /*#__PURE__*/ _react.default.createElement(
+                    _Icons.CircleIcon,
+                    _extends({}, _icon, {
+                      opacity: isChecked ? 1 : 0,
+                    })
+                  )
+            )
+          ),
+          (0, _wrapStringChild.wrapStringChild)(children, _text)
+        )
+      );
+    }
+  )
+);
+
+const Radio = (
+  {
+    icon,
+    children,
+    size,
+    wrapperRef,
+    isHovered: isHoveredProp,
+    isPressed: isPressedProp,
+    isFocused: isFocusedProp,
+    ...props
+  },
+  ref
+) => {
   var _contextState$state;
 
   const formControlContext = (0, _FormControl.useFormControlContext)();
 
   const contextState = _react.default.useContext(_RadioGroup.RadioContext);
 
-  const combinedProps = (0, _utils.combineContextAndProps)({ ...formControlContext,
-    ...contextState
-  }, props);
+  const combinedProps = (0, _utils.combineContextAndProps)(
+    { ...formControlContext, ...contextState },
+    props
+  );
 
   const inputRef = _react.default.useRef(null);
 
-  const radioState = (0, _radio.useRadio)({ ...combinedProps,
-    'aria-label': props.accessibilityLabel,
-    children
-  }, (_contextState$state = contextState.state) !== null && _contextState$state !== void 0 ? _contextState$state : {}, inputRef); // eslint-disable-next-line react-hooks/exhaustive-deps
-
-  const inputProps = _react.default.useMemo(() => radioState.inputProps, [radioState.inputProps.checked, radioState.inputProps.disabled]);
+  const radioState = (0, _radio.useRadio)(
+    {
+      ...combinedProps,
+      'aria-label': props.accessibilityLabel || 'radio',
+      children,
+    },
+    (_contextState$state = contextState.state) !== null &&
+      _contextState$state !== void 0
+      ? _contextState$state
+      : {},
+    inputRef
+  ); // eslint-disable-next-line react-hooks/exhaustive-deps
+
+  const inputProps = _react.default.useMemo(
+    () => radioState.inputProps,
+    [radioState.inputProps.checked, radioState.inputProps.disabled]
+  );
 
   const contextCombinedProps = _react.default.useMemo(() => {
-    return { ...combinedProps
-    }; // eslint-disable-next-line react-hooks/exhaustive-deps
+    return { ...combinedProps }; // eslint-disable-next-line react-hooks/exhaustive-deps
   }, [(0, _stableHash.default)(combinedProps)]); //TODO: refactor for responsive prop
 
-
   if ((0, _useHasResponsiveProps.useHasResponsiveProps)(props)) {
     return null;
   }
 
   if ((0, _utils.isEmptyObj)(contextState)) {
     console.error('Error: Radio must be wrapped inside a Radio.Group');
-    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null);
+    return /*#__PURE__*/ _react.default.createElement(
+      _react.default.Fragment,
+      null
+    );
   }
 
-  return /*#__PURE__*/_react.default.createElement(RadioComponent, {
+  return /*#__PURE__*/ _react.default.createElement(RadioComponent, {
     inputProps: inputProps,
     combinedProps: contextCombinedProps,
     children: children,
@@ -185,11 +298,13 @@ const Radio = ({
     wrapperRef: wrapperRef,
     isHovered: isHoveredProp,
     isPressed: isPressedProp,
-    isFocused: isFocusedProp
+    isFocused: isFocusedProp,
   });
 };
 
-var _default = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(Radio));
+var _default = /*#__PURE__*/ (0, _react.memo)(
+  /*#__PURE__*/ (0, _react.forwardRef)(Radio)
+);
 
 exports.default = _default;
 //# sourceMappingURL=Radio.js.map
diff --git a/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.js.map b/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.js.map
index 01cd5f2..5a6d282 100644
--- a/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.js.map
+++ b/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.js.map
@@ -1 +1,74 @@
-{"version":3,"sources":["Radio.tsx"],"names":["RadioComponent","icon","inputProps","combinedProps","size","children","wrapperRef","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","ref","isInvalid","isReadOnly","isIndeterminate","hoverProps","pressableProps","focusProps","disabled","isDisabled","checked","isChecked","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","_interactionBox","_icon","_stack","_text","resolvedProps","cleanInputProps","stylingProps","margin","layout","flexbox","position","background","padding","border","sizedIcon","React","cloneElement","Radio","props","formControlContext","contextState","useContext","RadioContext","inputRef","useRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { Center } from '../../composites/Center';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { useRadio } from '@react-native-aria/radio';\nimport { RadioContext } from './RadioGroup';\nimport { mergeRefs } from '../../../utils';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  composeEventHandlers,\n  combineContextAndProps,\n  isEmptyObj,\n} from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        size,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { hoverProps, isHovered } = useHover();\n      const { pressableProps, isPressed } = useIsPressed();\n      const { focusProps, isFocused } = useFocus();\n\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n\n      const {\n        onPressIn,\n        onPressOut,\n        onHoverIn,\n        onHoverOut,\n        onFocus,\n        onBlur,\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution(\n        'Radio',\n        {\n          ...combinedProps,\n          size,\n        },\n        {\n          isInvalid,\n          isReadOnly,\n          isDisabled,\n          isIndeterminate,\n          isChecked,\n          isHovered: isHoveredProp || isHovered,\n          isPressed: isPressedProp || isPressed,\n          isFocused: isFocusedProp || isFocused,\n        }\n      );\n\n      const [, cleanInputProps] = extractInObject(inputProps, [\n        ...stylingProps.margin,\n        ...stylingProps.layout,\n        ...stylingProps.flexbox,\n        ...stylingProps.position,\n        ...stylingProps.background,\n        ...stylingProps.padding,\n        ...stylingProps.border,\n        '_text',\n      ]);\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      return (\n        <Pressable\n          disabled={isDisabled}\n          {...pressableProps}\n          {...(cleanInputProps as IPressableProps)}\n          ref={mergeRefs([ref, wrapperRef])}\n          accessibilityRole=\"radio\"\n          onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n          onPressOut={composeEventHandlers(\n            onPressOut,\n            pressableProps.onPressOut\n          )}\n          // @ts-ignore - web only\n          onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n          // @ts-ignore - web only\n          onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n          // @ts-ignore - web only\n          onFocus={composeEventHandlers(\n            composeEventHandlers(onFocus, focusProps.onFocus)\n            // focusRingProps.onFocu\n          )}\n          // @ts-ignore - web only\n          onBlur={composeEventHandlers(\n            composeEventHandlers(onBlur, focusProps.onBlur)\n            // focusRingProps.onBlur\n          )}\n        >\n          <Stack {..._stack}>\n            <Center>\n              {/* Interaction Wrapper */}\n              <Box {..._interactionBox} />\n              {/* radio */}\n              <Center {...resolvedProps}>\n                {icon && sizedIcon && isChecked ? (\n                  sizedIcon()\n                ) : (\n                  <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n                )}\n              </Center>\n            </Center>\n            {/* Label */}\n            {wrapStringChild(children, _text)}\n          </Stack>\n        </Pressable>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    size,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      size={size}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressedProp}\n      isFocused={isFocusedProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "Radio.tsx"
+  ],
+  "names": [
+    "RadioComponent",
+    "icon",
+    "inputProps",
+    "combinedProps",
+    "size",
+    "children",
+    "wrapperRef",
+    "isHovered",
+    "isHoveredProp",
+    "isPressed",
+    "isPressedProp",
+    "isFocused",
+    "isFocusedProp",
+    "ref",
+    "isInvalid",
+    "isReadOnly",
+    "isIndeterminate",
+    "hoverProps",
+    "pressableProps",
+    "focusProps",
+    "disabled",
+    "isDisabled",
+    "checked",
+    "isChecked",
+    "onPressIn",
+    "onPressOut",
+    "onHoverIn",
+    "onHoverOut",
+    "onFocus",
+    "onBlur",
+    "_interactionBox",
+    "_icon",
+    "_stack",
+    "_text",
+    "resolvedProps",
+    "cleanInputProps",
+    "stylingProps",
+    "margin",
+    "layout",
+    "flexbox",
+    "position",
+    "background",
+    "padding",
+    "border",
+    "sizedIcon",
+    "React",
+    "cloneElement",
+    "Radio",
+    "props",
+    "formControlContext",
+    "contextState",
+    "useContext",
+    "RadioContext",
+    "inputRef",
+    "useRef",
+    "radioState",
+    "accessibilityLabel",
+    "state",
+    "useMemo",
+    "contextCombinedProps",
+    "console",
+    "error"
+  ],
+  "mappings": "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",
+  "sourcesContent": [
+    "import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { Center } from '../../composites/Center';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { useRadio } from '@react-native-aria/radio';\nimport { RadioContext } from './RadioGroup';\nimport { mergeRefs } from '../../../utils';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  composeEventHandlers,\n  combineContextAndProps,\n  isEmptyObj,\n} from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        size,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { hoverProps, isHovered } = useHover();\n      const { pressableProps, isPressed } = useIsPressed();\n      const { focusProps, isFocused } = useFocus();\n\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n\n      const {\n        onPressIn,\n        onPressOut,\n        onHoverIn,\n        onHoverOut,\n        onFocus,\n        onBlur,\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution(\n        'Radio',\n        {\n          ...combinedProps,\n          size,\n        },\n        {\n          isInvalid,\n          isReadOnly,\n          isDisabled,\n          isIndeterminate,\n          isChecked,\n          isHovered: isHoveredProp || isHovered,\n          isPressed: isPressedProp || isPressed,\n          isFocused: isFocusedProp || isFocused,\n        }\n      );\n\n      const [, cleanInputProps] = extractInObject(inputProps, [\n        ...stylingProps.margin,\n        ...stylingProps.layout,\n        ...stylingProps.flexbox,\n        ...stylingProps.position,\n        ...stylingProps.background,\n        ...stylingProps.padding,\n        ...stylingProps.border,\n        '_text',\n      ]);\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      return (\n        <Pressable\n          disabled={isDisabled}\n          {...pressableProps}\n          {...(cleanInputProps as IPressableProps)}\n          ref={mergeRefs([ref, wrapperRef])}\n          accessibilityRole=\"radio\"\n          onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n          onPressOut={composeEventHandlers(\n            onPressOut,\n            pressableProps.onPressOut\n          )}\n          // @ts-ignore - web only\n          onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n          // @ts-ignore - web only\n          onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n          // @ts-ignore - web only\n          onFocus={composeEventHandlers(\n            composeEventHandlers(onFocus, focusProps.onFocus)\n            // focusRingProps.onFocu\n          )}\n          // @ts-ignore - web only\n          onBlur={composeEventHandlers(\n            composeEventHandlers(onBlur, focusProps.onBlur)\n            // focusRingProps.onBlur\n          )}\n        >\n          <Stack {..._stack}>\n            <Center>\n              {/* Interaction Wrapper */}\n              <Box {..._interactionBox} />\n              {/* radio */}\n              <Center {...resolvedProps}>\n                {icon && sizedIcon && isChecked ? (\n                  sizedIcon()\n                ) : (\n                  <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n                )}\n              </Center>\n            </Center>\n            {/* Label */}\n            {wrapStringChild(children, _text)}\n          </Stack>\n        </Pressable>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    size,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel || 'test', children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      size={size}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressedProp}\n      isFocused={isFocusedProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"
+  ]
+}
diff --git a/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.web.js b/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.web.js
index 5472ca2..54b1d7f 100644
--- a/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.web.js
+++ b/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.web.js
@@ -1,198 +1,294 @@
-"use strict";
+'use strict';
 
-Object.defineProperty(exports, "__esModule", {
-  value: true
+Object.defineProperty(exports, '__esModule', {
+  value: true,
 });
 exports.default = void 0;
 
-var _react = _interopRequireWildcard(require("react"));
+var _react = _interopRequireWildcard(require('react'));
 
-var _stableHash = _interopRequireDefault(require("stable-hash"));
+var _stableHash = _interopRequireDefault(require('stable-hash'));
 
-var _Box = _interopRequireDefault(require("../Box"));
+var _Box = _interopRequireDefault(require('../Box'));
 
-var _Stack = require("../Stack");
+var _Stack = require('../Stack');
 
-var _Center = require("../../composites/Center");
+var _Center = require('../../composites/Center');
 
-var _useThemeProps = require("../../../hooks/useThemeProps");
+var _useThemeProps = require('../../../hooks/useThemeProps');
 
-var _wrapStringChild = require("../../../utils/wrapStringChild");
+var _wrapStringChild = require('../../../utils/wrapStringChild');
 
-var _utils = require("./../../../utils");
+var _utils = require('./../../../utils');
 
-var _interactions = require("@react-native-aria/interactions");
+var _interactions = require('@react-native-aria/interactions');
 
-var _radio = require("@react-native-aria/radio");
+var _radio = require('@react-native-aria/radio');
 
-var _visuallyHidden = require("@react-aria/visually-hidden");
+var _visuallyHidden = require('@react-aria/visually-hidden');
 
-var _RadioGroup = require("./RadioGroup");
+var _RadioGroup = require('./RadioGroup');
 
-var _focus = require("@react-native-aria/focus");
+var _focus = require('@react-native-aria/focus');
 
-var _Icons = require("../Icon/Icons");
+var _Icons = require('../Icon/Icons');
 
-var _useHasResponsiveProps = require("../../../hooks/useHasResponsiveProps");
+var _useHasResponsiveProps = require('../../../hooks/useHasResponsiveProps');
 
-var _utils2 = require("../../../utils");
+var _utils2 = require('../../../utils');
 
-var _FormControl = require("../../composites/FormControl");
+var _FormControl = require('../../composites/FormControl');
 
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+function _interopRequireDefault(obj) {
+  return obj && obj.__esModule ? obj : { default: obj };
+}
 
-function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }
-
-function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
-
-function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
-
-const RadioComponent = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(({
-  icon,
-  inputProps,
-  combinedProps,
-  children,
-  wrapperRef,
-  isHovered: isHoveredProp,
-  isPressed: isPressedProp,
-  isFocused: isFocusedProp,
-  isFocusVisible: isFocusVisibleProp,
-  ...props
-}, ref) => {
-  const {
-    isInvalid,
-    isReadOnly,
-    isIndeterminate
-  } = combinedProps;
-  const {
-    disabled: isDisabled,
-    checked: isChecked
-  } = inputProps;
-
-  const _ref = _react.default.useRef(null);
-
-  const {
-    isHovered
-  } = (0, _interactions.useHover)({}, _ref);
-  const mergedRefs = (0, _utils.mergeRefs)([_ref, wrapperRef]);
-  const {
-    focusProps,
-    isFocusVisible
-  } = (0, _focus.useFocusRing)();
-
-  const [isFocused, setFocused] = _react.default.useState(isFocusedProp);
-
-  const [isPressed, setPressed] = _react.default.useState(isPressedProp);
-
-  const handleFocus = () => {
-    setFocused(true);
+function _getRequireWildcardCache() {
+  if (typeof WeakMap !== 'function') return null;
+  var cache = new WeakMap();
+  _getRequireWildcardCache = function () {
+    return cache;
   };
+  return cache;
+}
 
-  const handleBlur = () => {
-    isFocusedProp ? setFocused(true) : setFocused(false);
-  };
-
-  const handlePressIn = () => {
-    setPressed(true);
-  };
-
-  const handlePressOut = () => {
-    isPressedProp ? setPressed(true) : setPressed(false);
-  };
-
-  const {
-    _interactionBox,
-    _icon,
-    _stack,
-    _text,
-    ...resolvedProps
-  } = (0, _useThemeProps.usePropsResolution)('Radio', combinedProps, {
-    isInvalid,
-    isReadOnly,
-    isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,
-    isDisabled,
-    isIndeterminate,
-    isChecked,
-    isHovered: isHoveredProp || isHovered,
-    isPressed,
-    isFocused
-  }); // only calling below function when icon exist.
-
-  const sizedIcon = () =>
-  /*#__PURE__*/
-  //@ts-ignore
-  _react.default.cloneElement(icon, { ..._icon
-  });
-
-  const component = /*#__PURE__*/_react.default.createElement(_Stack.Stack, _stack, /*#__PURE__*/_react.default.createElement(_Center.Center, null, /*#__PURE__*/_react.default.createElement(_Box.default, _interactionBox), /*#__PURE__*/_react.default.createElement(_Center.Center, resolvedProps, icon && sizedIcon && isChecked ? sizedIcon() : /*#__PURE__*/_react.default.createElement(_Icons.CircleIcon, _extends({}, _icon, {
-    opacity: isChecked ? 1 : 0
-  })))), (0, _wrapStringChild.wrapStringChild)(children, _text)); //TODO: refactor for responsive prop
-
-
-  if ((0, _useHasResponsiveProps.useHasResponsiveProps)(props)) {
-    return null;
+function _interopRequireWildcard(obj) {
+  if (obj && obj.__esModule) {
+    return obj;
   }
-
-  return /*#__PURE__*/_react.default.createElement(_Box.default // @ts-ignore - RN web supports accessibilityRole="label"
-  , {
-    accessibilityRole: "label",
-    ref: mergedRefs
-  }, /*#__PURE__*/_react.default.createElement("div", {
-    onMouseDown: handlePressIn,
-    onMouseUp: handlePressOut
-  }, /*#__PURE__*/_react.default.createElement(_visuallyHidden.VisuallyHidden, null, /*#__PURE__*/_react.default.createElement("input", _extends({}, inputProps, focusProps, {
-    ref: ref,
-    onFocus: handleFocus,
-    onBlur: handleBlur
-  }))), component));
-}));
-
-const Radio = ({
-  icon,
-  children,
-  wrapperRef,
-  isHovered: isHoveredProp,
-  isPressed,
-  isFocused: isFocusedProp,
-  isFocusVisible: isFocusVisibleProp,
-  ...props
-}, ref) => {
+  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
+    return { default: obj };
+  }
+  var cache = _getRequireWildcardCache();
+  if (cache && cache.has(obj)) {
+    return cache.get(obj);
+  }
+  var newObj = {};
+  var hasPropertyDescriptor =
+    Object.defineProperty && Object.getOwnPropertyDescriptor;
+  for (var key in obj) {
+    if (Object.prototype.hasOwnProperty.call(obj, key)) {
+      var desc = hasPropertyDescriptor
+        ? Object.getOwnPropertyDescriptor(obj, key)
+        : null;
+      if (desc && (desc.get || desc.set)) {
+        Object.defineProperty(newObj, key, desc);
+      } else {
+        newObj[key] = obj[key];
+      }
+    }
+  }
+  newObj.default = obj;
+  if (cache) {
+    cache.set(obj, newObj);
+  }
+  return newObj;
+}
+
+function _extends() {
+  _extends =
+    Object.assign ||
+    function (target) {
+      for (var i = 1; i < arguments.length; i++) {
+        var source = arguments[i];
+        for (var key in source) {
+          if (Object.prototype.hasOwnProperty.call(source, key)) {
+            target[key] = source[key];
+          }
+        }
+      }
+      return target;
+    };
+  return _extends.apply(this, arguments);
+}
+
+const RadioComponent = /*#__PURE__*/ (0, _react.memo)(
+  /*#__PURE__*/ (0, _react.forwardRef)(
+    (
+      {
+        icon,
+        inputProps,
+        combinedProps,
+        children,
+        wrapperRef,
+        isHovered: isHoveredProp,
+        isPressed: isPressedProp,
+        isFocused: isFocusedProp,
+        isFocusVisible: isFocusVisibleProp,
+        ...props
+      },
+      ref
+    ) => {
+      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;
+      const { disabled: isDisabled, checked: isChecked } = inputProps;
+
+      const _ref = _react.default.useRef(null);
+
+      const { isHovered } = (0, _interactions.useHover)({}, _ref);
+      const mergedRefs = (0, _utils.mergeRefs)([_ref, wrapperRef]);
+      const { focusProps, isFocusVisible } = (0, _focus.useFocusRing)();
+
+      const [isFocused, setFocused] = _react.default.useState(isFocusedProp);
+
+      const [isPressed, setPressed] = _react.default.useState(isPressedProp);
+
+      const handleFocus = () => {
+        setFocused(true);
+      };
+
+      const handleBlur = () => {
+        isFocusedProp ? setFocused(true) : setFocused(false);
+      };
+
+      const handlePressIn = () => {
+        setPressed(true);
+      };
+
+      const handlePressOut = () => {
+        isPressedProp ? setPressed(true) : setPressed(false);
+      };
+
+      const { _interactionBox, _icon, _stack, _text, ...resolvedProps } = (0,
+      _useThemeProps.usePropsResolution)('Radio', combinedProps, {
+        isInvalid,
+        isReadOnly,
+        isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,
+        isDisabled,
+        isIndeterminate,
+        isChecked,
+        isHovered: isHoveredProp || isHovered,
+        isPressed,
+        isFocused,
+      }); // only calling below function when icon exist.
+
+      const sizedIcon = () =>
+        /*#__PURE__*/
+        //@ts-ignore
+        _react.default.cloneElement(icon, { ..._icon });
+
+      const component = /*#__PURE__*/ _react.default.createElement(
+        _Stack.Stack,
+        _stack,
+        /*#__PURE__*/ _react.default.createElement(
+          _Center.Center,
+          null,
+          /*#__PURE__*/ _react.default.createElement(
+            _Box.default,
+            _interactionBox
+          ),
+          /*#__PURE__*/ _react.default.createElement(
+            _Center.Center,
+            resolvedProps,
+            icon && sizedIcon && isChecked
+              ? sizedIcon()
+              : /*#__PURE__*/ _react.default.createElement(
+                  _Icons.CircleIcon,
+                  _extends({}, _icon, {
+                    opacity: isChecked ? 1 : 0,
+                  })
+                )
+          )
+        ),
+        (0, _wrapStringChild.wrapStringChild)(children, _text)
+      ); //TODO: refactor for responsive prop
+
+      if ((0, _useHasResponsiveProps.useHasResponsiveProps)(props)) {
+        return null;
+      }
+
+      return /*#__PURE__*/ _react.default.createElement(
+        _Box.default, // @ts-ignore - RN web supports accessibilityRole="label"
+        {
+          accessibilityRole: 'label',
+          ref: mergedRefs,
+        },
+        /*#__PURE__*/ _react.default.createElement(
+          'div',
+          {
+            onMouseDown: handlePressIn,
+            onMouseUp: handlePressOut,
+          },
+          /*#__PURE__*/ _react.default.createElement(
+            _visuallyHidden.VisuallyHidden,
+            null,
+            /*#__PURE__*/ _react.default.createElement(
+              'input',
+              _extends({}, inputProps, focusProps, {
+                ref: ref,
+                onFocus: handleFocus,
+                onBlur: handleBlur,
+              })
+            )
+          ),
+          component
+        )
+      );
+    }
+  )
+);
+
+const Radio = (
+  {
+    icon,
+    children,
+    wrapperRef,
+    isHovered: isHoveredProp,
+    isPressed,
+    isFocused: isFocusedProp,
+    isFocusVisible: isFocusVisibleProp,
+    ...props
+  },
+  ref
+) => {
   var _contextState$state;
 
   const formControlContext = (0, _FormControl.useFormControlContext)();
 
   const contextState = _react.default.useContext(_RadioGroup.RadioContext);
 
-  const combinedProps = (0, _utils2.combineContextAndProps)({ ...formControlContext,
-    ...contextState
-  }, props);
+  const combinedProps = (0, _utils2.combineContextAndProps)(
+    { ...formControlContext, ...contextState },
+    props
+  );
 
   const inputRef = _react.default.useRef(null);
 
-  const radioState = (0, _radio.useRadio)({ ...combinedProps,
-    'aria-label': props.accessibilityLabel,
-    children
-  }, (_contextState$state = contextState.state) !== null && _contextState$state !== void 0 ? _contextState$state : {}, inputRef); //@ts-ignore
+  const radioState = (0, _radio.useRadio)(
+    {
+      ...combinedProps,
+      'aria-label': props.accessibilityLabel || 'radio',
+      children,
+    },
+    (_contextState$state = contextState.state) !== null &&
+      _contextState$state !== void 0
+      ? _contextState$state
+      : {},
+    inputRef
+  ); //@ts-ignore
   // eslint-disable-next-line react-hooks/exhaustive-deps
 
-  const inputProps = _react.default.useMemo(() => radioState.inputProps, [radioState.inputProps.checked, radioState.inputProps.disabled]);
+  const inputProps = _react.default.useMemo(
+    () => radioState.inputProps,
+    [radioState.inputProps.checked, radioState.inputProps.disabled]
+  );
 
   const contextCombinedProps = _react.default.useMemo(() => {
-    return { ...combinedProps
-    }; // eslint-disable-next-line react-hooks/exhaustive-deps
+    return { ...combinedProps }; // eslint-disable-next-line react-hooks/exhaustive-deps
   }, [(0, _stableHash.default)(combinedProps)]); //TODO: refactor for responsive prop
 
-
   if ((0, _useHasResponsiveProps.useHasResponsiveProps)(props)) {
     return null;
   }
 
   if ((0, _utils2.isEmptyObj)(contextState)) {
     console.error('Error: Radio must be wrapped inside a Radio.Group');
-    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null);
+    return /*#__PURE__*/ _react.default.createElement(
+      _react.default.Fragment,
+      null
+    );
   }
 
-  return /*#__PURE__*/_react.default.createElement(RadioComponent, {
+  return /*#__PURE__*/ _react.default.createElement(RadioComponent, {
     inputProps: inputProps,
     combinedProps: contextCombinedProps,
     children: children,
@@ -202,11 +298,13 @@ const Radio = ({
     isHovered: isHoveredProp,
     isPressed: isPressed,
     isFocused: isFocusedProp,
-    isFocusVisible: isFocusVisibleProp
+    isFocusVisible: isFocusVisibleProp,
   });
 };
 
-var _default = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(Radio));
+var _default = /*#__PURE__*/ (0, _react.memo)(
+  /*#__PURE__*/ (0, _react.forwardRef)(Radio)
+);
 
 exports.default = _default;
 //# sourceMappingURL=Radio.web.js.map
diff --git a/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.web.js.map b/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.web.js.map
index c3e36d7..4ecea48 100644
--- a/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.web.js.map
+++ b/node_modules/native-base/lib/commonjs/components/primitives/Radio/Radio.web.js.map
@@ -1 +1,68 @@
-{"version":3,"sources":["Radio.web.tsx"],"names":["RadioComponent","icon","inputProps","combinedProps","children","wrapperRef","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","props","ref","isInvalid","isReadOnly","isIndeterminate","disabled","isDisabled","checked","isChecked","_ref","React","useRef","mergedRefs","focusProps","setFocused","useState","setPressed","handleFocus","handleBlur","handlePressIn","handlePressOut","_interactionBox","_icon","_stack","_text","resolvedProps","sizedIcon","cloneElement","component","Radio","formControlContext","contextState","useContext","RadioContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n      const [isFocused, setFocused] = React.useState(isFocusedProp);\n      const [isPressed, setPressed] = React.useState(isPressedProp);\n      const handleFocus = () => {\n        setFocused(true);\n      };\n      const handleBlur = () => {\n        isFocusedProp ? setFocused(true) : setFocused(false);\n      };\n      const handlePressIn = () => {\n        setPressed(true);\n      };\n\n      const handlePressOut = () => {\n        isPressedProp ? setPressed(true) : setPressed(false);\n      };\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n        isPressed,\n        isFocused,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <div onMouseDown={handlePressIn} onMouseUp={handlePressOut}>\n            <VisuallyHidden>\n              <input\n                {...inputProps}\n                {...focusProps}\n                ref={ref}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n              />\n            </VisuallyHidden>\n            {component}\n          </div>\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressed}\n      isFocused={isFocusedProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "Radio.web.tsx"
+  ],
+  "names": [
+    "RadioComponent",
+    "icon",
+    "inputProps",
+    "combinedProps",
+    "children",
+    "wrapperRef",
+    "isHovered",
+    "isHoveredProp",
+    "isPressed",
+    "isPressedProp",
+    "isFocused",
+    "isFocusedProp",
+    "isFocusVisible",
+    "isFocusVisibleProp",
+    "props",
+    "ref",
+    "isInvalid",
+    "isReadOnly",
+    "isIndeterminate",
+    "disabled",
+    "isDisabled",
+    "checked",
+    "isChecked",
+    "_ref",
+    "React",
+    "useRef",
+    "mergedRefs",
+    "focusProps",
+    "setFocused",
+    "useState",
+    "setPressed",
+    "handleFocus",
+    "handleBlur",
+    "handlePressIn",
+    "handlePressOut",
+    "_interactionBox",
+    "_icon",
+    "_stack",
+    "_text",
+    "resolvedProps",
+    "sizedIcon",
+    "cloneElement",
+    "component",
+    "Radio",
+    "formControlContext",
+    "contextState",
+    "useContext",
+    "RadioContext",
+    "inputRef",
+    "radioState",
+    "accessibilityLabel",
+    "state",
+    "useMemo",
+    "contextCombinedProps",
+    "console",
+    "error"
+  ],
+  "mappings": "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",
+  "sourcesContent": [
+    "import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n      const [isFocused, setFocused] = React.useState(isFocusedProp);\n      const [isPressed, setPressed] = React.useState(isPressedProp);\n      const handleFocus = () => {\n        setFocused(true);\n      };\n      const handleBlur = () => {\n        isFocusedProp ? setFocused(true) : setFocused(false);\n      };\n      const handlePressIn = () => {\n        setPressed(true);\n      };\n\n      const handlePressOut = () => {\n        isPressedProp ? setPressed(true) : setPressed(false);\n      };\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n        isPressed,\n        isFocused,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <div onMouseDown={handlePressIn} onMouseUp={handlePressOut}>\n            <VisuallyHidden>\n              <input\n                {...inputProps}\n                {...focusProps}\n                ref={ref}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n              />\n            </VisuallyHidden>\n            {component}\n          </div>\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel || 'test', children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressed}\n      isFocused={isFocusedProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"
+  ]
+}
diff --git a/node_modules/native-base/lib/commonjs/components/primitives/Radio/RadioGroup.js b/node_modules/native-base/lib/commonjs/components/primitives/Radio/RadioGroup.js
index cea2f2d..6e7588b 100644
--- a/node_modules/native-base/lib/commonjs/components/primitives/Radio/RadioGroup.js
+++ b/node_modules/native-base/lib/commonjs/components/primitives/Radio/RadioGroup.js
@@ -1,51 +1,108 @@
-"use strict";
+'use strict';
 
-Object.defineProperty(exports, "__esModule", {
-  value: true
+Object.defineProperty(exports, '__esModule', {
+  value: true,
 });
 exports.default = exports.RadioContext = void 0;
 
-var _react = _interopRequireWildcard(require("react"));
+var _react = _interopRequireWildcard(require('react'));
 
-var _Stack = require("../Stack");
+var _Stack = require('../Stack');
 
-var _FormControl = require("../../composites/FormControl");
+var _FormControl = require('../../composites/FormControl');
 
-var _radio2 = require("@react-stately/radio");
+var _radio2 = require('@react-stately/radio');
 
-var _radio3 = require("@react-native-aria/radio");
+var _radio3 = require('@react-native-aria/radio');
 
-var _useHasResponsiveProps = require("../../../hooks/useHasResponsiveProps");
+var _useHasResponsiveProps = require('../../../hooks/useHasResponsiveProps');
 
-var _useThemeProps = require("../../../hooks/useThemeProps");
+var _useThemeProps = require('../../../hooks/useThemeProps');
 
-function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }
+function _getRequireWildcardCache() {
+  if (typeof WeakMap !== 'function') return null;
+  var cache = new WeakMap();
+  _getRequireWildcardCache = function () {
+    return cache;
+  };
+  return cache;
+}
 
-function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
-
-function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
+function _interopRequireWildcard(obj) {
+  if (obj && obj.__esModule) {
+    return obj;
+  }
+  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
+    return { default: obj };
+  }
+  var cache = _getRequireWildcardCache();
+  if (cache && cache.has(obj)) {
+    return cache.get(obj);
+  }
+  var newObj = {};
+  var hasPropertyDescriptor =
+    Object.defineProperty && Object.getOwnPropertyDescriptor;
+  for (var key in obj) {
+    if (Object.prototype.hasOwnProperty.call(obj, key)) {
+      var desc = hasPropertyDescriptor
+        ? Object.getOwnPropertyDescriptor(obj, key)
+        : null;
+      if (desc && (desc.get || desc.set)) {
+        Object.defineProperty(newObj, key, desc);
+      } else {
+        newObj[key] = obj[key];
+      }
+    }
+  }
+  newObj.default = obj;
+  if (cache) {
+    cache.set(obj, newObj);
+  }
+  return newObj;
+}
+
+function _extends() {
+  _extends =
+    Object.assign ||
+    function (target) {
+      for (var i = 1; i < arguments.length; i++) {
+        var source = arguments[i];
+        for (var key in source) {
+          if (Object.prototype.hasOwnProperty.call(source, key)) {
+            target[key] = source[key];
+          }
+        }
+      }
+      return target;
+    };
+  return _extends.apply(this, arguments);
+}
 
-const RadioContext = /*#__PURE__*/_react.default.createContext({});
+const RadioContext = /*#__PURE__*/ _react.default.createContext({});
 
 exports.RadioContext = RadioContext;
-const RadioWrapper = /*#__PURE__*/(0, _react.memo)(props => {
-  const resolvedProps = (0, _useThemeProps.usePropsResolution)('RadioGroup', props);
-  return /*#__PURE__*/_react.default.createElement(_Stack.Stack, _extends({}, resolvedProps, props.radioGroupProps, props));
+const RadioWrapper = /*#__PURE__*/ (0, _react.memo)((props) => {
+  const resolvedProps = (0, _useThemeProps.usePropsResolution)(
+    'RadioGroup',
+    props
+  );
+  return /*#__PURE__*/ _react.default.createElement(
+    _Stack.Stack,
+    _extends({}, resolvedProps, props.radioGroupProps, props)
+  );
 });
 
-const RadioGroup = ({
-  size,
-  colorScheme,
-  _radio,
-  children,
-  ...props
-}, ref) => {
+const RadioGroup = ({ size, colorScheme, _radio, children, ...props }, ref) => {
   const formControlContext = (0, _FormControl.useFormControlContext)();
   const state = (0, _radio2.useRadioGroupState)(props);
-  const radioGroupState = (0, _radio3.useRadioGroup)({ ...formControlContext,
-    ...props,
-    'aria-label': props.accessibilityLabel
-  }, state);
+  const radioGroupState = (0, _radio3.useRadioGroup)(
+    {
+      ...formControlContext,
+      ...props,
+      'aria-label': props.accessibilityLabel || 'radio-group',
+    },
+    state
+  );
 
   const [propsState] = _react.default.useState(props);
 
@@ -55,29 +112,43 @@ const RadioGroup = ({
       size,
       colorScheme,
       ..._radio,
-      state
+      state,
     };
   }, [size, colorScheme, formControlContext, state, _radio]);
 
-  const radioGroupProps = _react.default.useMemo(() => radioGroupState.radioGroupProps, // eslint-disable-next-line react-hooks/exhaustive-deps
-  []); //TODO: refactor for responsive prop
-
+  const radioGroupProps = _react.default.useMemo(
+    () => radioGroupState.radioGroupProps, // eslint-disable-next-line react-hooks/exhaustive-deps
+    []
+  ); //TODO: refactor for responsive prop
 
-  if ((0, _useHasResponsiveProps.useHasResponsiveProps)({ ...props,
-    size,
-    colorScheme
-  })) {
+  if (
+    (0, _useHasResponsiveProps.useHasResponsiveProps)({
+      ...props,
+      size,
+      colorScheme,
+    })
+  ) {
     return null;
   }
 
-  return /*#__PURE__*/_react.default.createElement(RadioContext.Provider, {
-    value: contextValue
-  }, /*#__PURE__*/_react.default.createElement(RadioWrapper, _extends({}, radioGroupProps, propsState, {
-    ref: ref
-  }), children));
+  return /*#__PURE__*/ _react.default.createElement(
+    RadioContext.Provider,
+    {
+      value: contextValue,
+    },
+    /*#__PURE__*/ _react.default.createElement(
+      RadioWrapper,
+      _extends({}, radioGroupProps, propsState, {
+        ref: ref,
+      }),
+      children
+    )
+  );
 };
 
-var _default = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(RadioGroup));
+var _default = /*#__PURE__*/ (0, _react.memo)(
+  /*#__PURE__*/ (0, _react.forwardRef)(RadioGroup)
+);
 
 exports.default = _default;
 //# sourceMappingURL=RadioGroup.js.map
diff --git a/node_modules/native-base/lib/commonjs/components/primitives/Radio/RadioGroup.js.map b/node_modules/native-base/lib/commonjs/components/primitives/Radio/RadioGroup.js.map
index a308cdb..750d818 100644
--- a/node_modules/native-base/lib/commonjs/components/primitives/Radio/RadioGroup.js.map
+++ b/node_modules/native-base/lib/commonjs/components/primitives/Radio/RadioGroup.js.map
@@ -1 +1,33 @@
-{"version":3,"sources":["RadioGroup.tsx"],"names":["RadioContext","React","createContext","RadioWrapper","props","resolvedProps","radioGroupProps","RadioGroup","size","colorScheme","_radio","children","ref","formControlContext","state","radioGroupState","accessibilityLabel","propsState","useState","contextValue","useMemo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;AAEO,MAAMA,YAAY,gBAAGC,eAAMC,aAAN,CAC1B,EAD0B,CAArB;;;AAGP,MAAMC,YAAY,gBAAG,iBAAMC,KAAD,IAAgB;AACxC,QAAMC,aAAa,GAAG,uCAAmB,YAAnB,EAAiCD,KAAjC,CAAtB;AACA,sBAAO,6BAAC,YAAD,eAAWC,aAAX,EAA8BD,KAAK,CAACE,eAApC,EAAyDF,KAAzD,EAAP;AACD,CAHoB,CAArB;;AAKA,MAAMG,UAAU,GAAG,CACjB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqBC,EAAAA,MAArB;AAA6BC,EAAAA,QAA7B;AAAuC,KAAGP;AAA1C,CADiB,EAEjBQ,GAFiB,KAGd;AACH,QAAMC,kBAAkB,GAAG,yCAA3B;AAEA,QAAMC,KAAK,GAAG,gCAAmBV,KAAnB,CAAd;AACA,QAAMW,eAAe,GAAG,2BACtB,EAAE,GAAGF,kBAAL;AAAyB,OAAGT,KAA5B;AAAmC,kBAAcA,KAAK,CAACY;AAAvD,GADsB,EAEtBF,KAFsB,CAAxB;;AAIA,QAAM,CAACG,UAAD,IAAehB,eAAMiB,QAAN,CAAed,KAAf,CAArB;;AACA,QAAMe,YAAiB,GAAGlB,eAAMmB,OAAN,CAAc,MAAM;AAC5C,WAAO;AACLP,MAAAA,kBADK;AAELL,MAAAA,IAFK;AAGLC,MAAAA,WAHK;AAIL,SAAGC,MAJE;AAKLI,MAAAA;AALK,KAAP;AAOD,GARyB,EAQvB,CAACN,IAAD,EAAOC,WAAP,EAAoBI,kBAApB,EAAwCC,KAAxC,EAA+CJ,MAA/C,CARuB,CAA1B;;AAUA,QAAMJ,eAAe,GAAGL,eAAMmB,OAAN,CACtB,MAAML,eAAe,CAACT,eADA,EAEtB;AACA,IAHsB,CAAxB,CAnBG,CAyBH;;;AACA,MAAI,kDAAsB,EAAE,GAAGF,KAAL;AAAYI,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,GAAtB,CAAJ,EAA4D;AAC1D,WAAO,IAAP;AACD;;AAED,sBACE,6BAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEU;AAA9B,kBACE,6BAAC,YAAD,eAAkBb,eAAlB,EAAuCW,UAAvC;AAAmD,IAAA,GAAG,EAAEL;AAAxD,MACGD,QADH,CADF,CADF;AAOD,CAxCD;;4BA0Ce,+BAAK,uBAAWJ,UAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Stack } from '../Stack';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { IRadioContext, IRadioGroupProps } from './types';\nimport { useRadioGroupState } from '@react-stately/radio';\nimport { useRadioGroup } from '@react-native-aria/radio';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const RadioContext = React.createContext<IRadioContext>(\n  {} as IRadioContext\n);\nconst RadioWrapper = memo((props: any) => {\n  const resolvedProps = usePropsResolution('RadioGroup', props);\n  return <Stack {...resolvedProps} {...props.radioGroupProps} {...props} />;\n});\n\nconst RadioGroup = (\n  { size, colorScheme, _radio, children, ...props }: IRadioGroupProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const state = useRadioGroupState(props);\n  const radioGroupState = useRadioGroup(\n    { ...formControlContext, ...props, 'aria-label': props.accessibilityLabel },\n    state\n  );\n  const [propsState] = React.useState(props);\n  const contextValue: any = React.useMemo(() => {\n    return {\n      formControlContext,\n      size,\n      colorScheme,\n      ..._radio,\n      state,\n    };\n  }, [size, colorScheme, formControlContext, state, _radio]);\n\n  const radioGroupProps = React.useMemo(\n    () => radioGroupState.radioGroupProps,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n\n  return (\n    <RadioContext.Provider value={contextValue}>\n      <RadioWrapper {...radioGroupProps} {...propsState} ref={ref}>\n        {children}\n      </RadioWrapper>\n    </RadioContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(RadioGroup));\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "RadioGroup.tsx"
+  ],
+  "names": [
+    "RadioContext",
+    "React",
+    "createContext",
+    "RadioWrapper",
+    "props",
+    "resolvedProps",
+    "radioGroupProps",
+    "RadioGroup",
+    "size",
+    "colorScheme",
+    "_radio",
+    "children",
+    "ref",
+    "formControlContext",
+    "state",
+    "radioGroupState",
+    "accessibilityLabel",
+    "propsState",
+    "useState",
+    "contextValue",
+    "useMemo"
+  ],
+  "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;AAEO,MAAMA,YAAY,gBAAGC,eAAMC,aAAN,CAC1B,EAD0B,CAArB;;;AAGP,MAAMC,YAAY,gBAAG,iBAAMC,KAAD,IAAgB;AACxC,QAAMC,aAAa,GAAG,uCAAmB,YAAnB,EAAiCD,KAAjC,CAAtB;AACA,sBAAO,6BAAC,YAAD,eAAWC,aAAX,EAA8BD,KAAK,CAACE,eAApC,EAAyDF,KAAzD,EAAP;AACD,CAHoB,CAArB;;AAKA,MAAMG,UAAU,GAAG,CACjB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqBC,EAAAA,MAArB;AAA6BC,EAAAA,QAA7B;AAAuC,KAAGP;AAA1C,CADiB,EAEjBQ,GAFiB,KAGd;AACH,QAAMC,kBAAkB,GAAG,yCAA3B;AAEA,QAAMC,KAAK,GAAG,gCAAmBV,KAAnB,CAAd;AACA,QAAMW,eAAe,GAAG,2BACtB,EAAE,GAAGF,kBAAL;AAAyB,OAAGT,KAA5B;AAAmC,kBAAcA,KAAK,CAACY;AAAvD,GADsB,EAEtBF,KAFsB,CAAxB;;AAIA,QAAM,CAACG,UAAD,IAAehB,eAAMiB,QAAN,CAAed,KAAf,CAArB;;AACA,QAAMe,YAAiB,GAAGlB,eAAMmB,OAAN,CAAc,MAAM;AAC5C,WAAO;AACLP,MAAAA,kBADK;AAELL,MAAAA,IAFK;AAGLC,MAAAA,WAHK;AAIL,SAAGC,MAJE;AAKLI,MAAAA;AALK,KAAP;AAOD,GARyB,EAQvB,CAACN,IAAD,EAAOC,WAAP,EAAoBI,kBAApB,EAAwCC,KAAxC,EAA+CJ,MAA/C,CARuB,CAA1B;;AAUA,QAAMJ,eAAe,GAAGL,eAAMmB,OAAN,CACtB,MAAML,eAAe,CAACT,eADA,EAEtB;AACA,IAHsB,CAAxB,CAnBG,CAyBH;;;AACA,MAAI,kDAAsB,EAAE,GAAGF,KAAL;AAAYI,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,GAAtB,CAAJ,EAA4D;AAC1D,WAAO,IAAP;AACD;;AAED,sBACE,6BAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEU;AAA9B,kBACE,6BAAC,YAAD,eAAkBb,eAAlB,EAAuCW,UAAvC;AAAmD,IAAA,GAAG,EAAEL;AAAxD,MACGD,QADH,CADF,CADF;AAOD,CAxCD;;4BA0Ce,+BAAK,uBAAWJ,UAAX,CAAL,C",
+  "sourcesContent": [
+    "import React, { memo, forwardRef } from 'react';\nimport { Stack } from '../Stack';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { IRadioContext, IRadioGroupProps } from './types';\nimport { useRadioGroupState } from '@react-stately/radio';\nimport { useRadioGroup } from '@react-native-aria/radio';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const RadioContext = React.createContext<IRadioContext>(\n  {} as IRadioContext\n);\nconst RadioWrapper = memo((props: any) => {\n  const resolvedProps = usePropsResolution('RadioGroup', props);\n  return <Stack {...resolvedProps} {...props.radioGroupProps} {...props} />;\n});\n\nconst RadioGroup = (\n  { size, colorScheme, _radio, children, ...props }: IRadioGroupProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const state = useRadioGroupState(props);\n  const radioGroupState = useRadioGroup(\n    { ...formControlContext, ...props, 'aria-label': props.accessibilityLabel || 'test' },\n    state\n  );\n  const [propsState] = React.useState(props);\n  const contextValue: any = React.useMemo(() => {\n    return {\n      formControlContext,\n      size,\n      colorScheme,\n      ..._radio,\n      state,\n    };\n  }, [size, colorScheme, formControlContext, state, _radio]);\n\n  const radioGroupProps = React.useMemo(\n    () => radioGroupState.radioGroupProps,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n\n  return (\n    <RadioContext.Provider value={contextValue}>\n      <RadioWrapper {...radioGroupProps} {...propsState} ref={ref}>\n        {children}\n      </RadioWrapper>\n    </RadioContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(RadioGroup));\n"
+  ]
+}
diff --git a/node_modules/native-base/lib/commonjs/components/primitives/Select/Select.js b/node_modules/native-base/lib/commonjs/components/primitives/Select/Select.js
index 4241fa2..f573171 100644
--- a/node_modules/native-base/lib/commonjs/components/primitives/Select/Select.js
+++ b/node_modules/native-base/lib/commonjs/components/primitives/Select/Select.js
@@ -1,71 +1,129 @@
-"use strict";
+'use strict';
 
-Object.defineProperty(exports, "__esModule", {
-  value: true
+Object.defineProperty(exports, '__esModule', {
+  value: true,
 });
 exports.default = exports.SelectContext = void 0;
 
-var _react = _interopRequireWildcard(require("react"));
+var _react = _interopRequireWildcard(require('react'));
 
-var _reactNative = require("react-native");
+var _reactNative = require('react-native');
 
-var _Actionsheet = require("../../composites/Actionsheet");
+var _Actionsheet = require('../../composites/Actionsheet');
 
-var _Box = _interopRequireDefault(require("../Box"));
+var _Box = _interopRequireDefault(require('../Box'));
 
-var _Input = require("../Input");
+var _Input = require('../Input');
 
-var _focus = require("@react-native-aria/focus");
+var _focus = require('@react-native-aria/focus');
 
-var _hooks = require("../../../hooks");
+var _hooks = require('../../../hooks');
 
-var _useThemeProps = require("../../../hooks/useThemeProps");
+var _useThemeProps = require('../../../hooks/useThemeProps');
 
-var _interactions = require("@react-native-aria/interactions");
+var _interactions = require('@react-native-aria/interactions');
 
-var _utils = require("../../../utils");
+var _utils = require('../../../utils');
 
-var _FormControl = require("../../composites/FormControl");
+var _FormControl = require('../../composites/FormControl');
 
-var _Icons = require("../Icon/Icons");
+var _Icons = require('../Icon/Icons');
 
-var _ScrollView = require("../../basic/ScrollView");
+var _ScrollView = require('../../basic/ScrollView');
 
-var _utils2 = require("../../../theme/tools/utils");
+var _utils2 = require('../../../theme/tools/utils');
 
-var _FlatList = require("../../basic/FlatList");
+var _FlatList = require('../../basic/FlatList');
 
-var _useHasResponsiveProps = require("../../../hooks/useHasResponsiveProps");
+var _useHasResponsiveProps = require('../../../hooks/useHasResponsiveProps');
 
-var _Pressable = require("../Pressable");
+var _Pressable = require('../Pressable');
 
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+function _interopRequireDefault(obj) {
+  return obj && obj.__esModule ? obj : { default: obj };
+}
 
-function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }
-
-function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
+function _getRequireWildcardCache() {
+  if (typeof WeakMap !== 'function') return null;
+  var cache = new WeakMap();
+  _getRequireWildcardCache = function () {
+    return cache;
+  };
+  return cache;
+}
 
-function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
+function _interopRequireWildcard(obj) {
+  if (obj && obj.__esModule) {
+    return obj;
+  }
+  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
+    return { default: obj };
+  }
+  var cache = _getRequireWildcardCache();
+  if (cache && cache.has(obj)) {
+    return cache.get(obj);
+  }
+  var newObj = {};
+  var hasPropertyDescriptor =
+    Object.defineProperty && Object.getOwnPropertyDescriptor;
+  for (var key in obj) {
+    if (Object.prototype.hasOwnProperty.call(obj, key)) {
+      var desc = hasPropertyDescriptor
+        ? Object.getOwnPropertyDescriptor(obj, key)
+        : null;
+      if (desc && (desc.get || desc.set)) {
+        Object.defineProperty(newObj, key, desc);
+      } else {
+        newObj[key] = obj[key];
+      }
+    }
+  }
+  newObj.default = obj;
+  if (cache) {
+    cache.set(obj, newObj);
+  }
+  return newObj;
+}
+
+function _extends() {
+  _extends =
+    Object.assign ||
+    function (target) {
+      for (var i = 1; i < arguments.length; i++) {
+        var source = arguments[i];
+        for (var key in source) {
+          if (Object.prototype.hasOwnProperty.call(source, key)) {
+            target[key] = source[key];
+          }
+        }
+      }
+      return target;
+    };
+  return _extends.apply(this, arguments);
+}
 
-const SelectContext = /*#__PURE__*/_react.default.createContext({
+const SelectContext = /*#__PURE__*/ _react.default.createContext({
   onValueChange: () => {},
   selectedValue: null,
   _selectedItem: {},
-  _item: {}
+  _item: {},
 });
 
 exports.SelectContext = SelectContext;
 
-const Select = ({
-  isHovered: isHoveredProp,
-  isFocused: isFocusedProp,
-  isFocusVisible: isFocusVisibleProp,
-  variant,
-  ...props
-}, ref) => {
+const Select = (
+  {
+    isHovered: isHoveredProp,
+    isFocused: isFocusedProp,
+    isFocusVisible: isFocusVisibleProp,
+    variant,
+    ...props
+  },
+  ref
+) => {
   const selectProps = (0, _FormControl.useFormControl)({
     isDisabled: props.isDisabled,
-    nativeID: props.nativeID
+    nativeID: props.nativeID,
   });
   const flatListData = [];
   const isDisabled = selectProps.disabled;
@@ -77,16 +135,13 @@ const Select = ({
 
   const [isFocused, setIsFocused] = _react.default.useState(false);
 
-  const {
-    focusProps,
-    isFocusVisible
-  } = (0, _focus.useFocusRing)();
-  const {
-    hoverProps,
-    isHovered
-  } = (0, _interactions.useHover)({
-    isDisabled
-  }, _ref);
+  const { focusProps, isFocusVisible } = (0, _focus.useFocusRing)();
+  const { hoverProps, isHovered } = (0, _interactions.useHover)(
+    {
+      isDisabled,
+    },
+    _ref
+  );
   const {
     onValueChange,
     selectedValue,
@@ -108,48 +163,76 @@ const Select = ({
     _actionSheetBody,
     _webSelect,
     ...resolvedProps
-  } = (0, _useThemeProps.usePropsResolution)('Select', props, {
-    isDisabled,
-    isHovered: isHoveredProp || isHovered,
-    isFocused: isFocusedProp || isFocused,
-    isFocusVisible: isFocusVisibleProp || isFocusVisible
-  }, undefined);
+  } = (0, _useThemeProps.usePropsResolution)(
+    'Select',
+    props,
+    {
+      isDisabled,
+      isHovered: isHoveredProp || isHovered,
+      isFocused: isFocusedProp || isFocused,
+      isFocusVisible: isFocusVisibleProp || isFocusVisible,
+    },
+    undefined
+  );
   const [value, setValue] = (0, _hooks.useControllableState)({
     value: selectedValue,
     defaultValue,
-    onChange: newValue => {
+    onChange: (newValue) => {
       onValueChange && onValueChange(newValue);
       setIsOpen(false);
-    }
+    },
   });
 
-  const itemsList = _react.default.Children.toArray(children).map(child => {
+  const itemsList = _react.default.Children.toArray(children).map((child) => {
     var _child$props, _child$props2;
 
     return {
-      label: child === null || child === void 0 ? void 0 : (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.label,
-      value: child === null || child === void 0 ? void 0 : (_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.value
+      label:
+        child === null || child === void 0
+          ? void 0
+          : (_child$props = child.props) === null || _child$props === void 0
+          ? void 0
+          : _child$props.label,
+      value:
+        child === null || child === void 0
+          ? void 0
+          : (_child$props2 = child.props) === null || _child$props2 === void 0
+          ? void 0
+          : _child$props2.value,
     };
   });
 
-  const selectedItemArray = itemsList.filter(item => (item === null || item === void 0 ? void 0 : item.value) === value);
-  const selectedItem = selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;
+  const selectedItemArray = itemsList.filter(
+    (item) => (item === null || item === void 0 ? void 0 : item.value) === value
+  );
+  const selectedItem =
+    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;
 
   const contextValue = _react.default.useMemo(() => {
     return {
       onValueChange: setValue,
       selectedValue: value,
-      _selectedItem: _selectedItem !== null && _selectedItem !== void 0 ? _selectedItem : {},
-      _item: _item !== null && _item !== void 0 ? _item : {}
+      _selectedItem:
+        _selectedItem !== null && _selectedItem !== void 0 ? _selectedItem : {},
+      _item: _item !== null && _item !== void 0 ? _item : {},
     };
   }, [value, setValue, _selectedItem, _item]); //TODO: refactor for responsive prop
 
-
   if ((0, _useHasResponsiveProps.useHasResponsiveProps)(props)) {
     return null;
   }
 
-  const rightIcon = isOpen && dropdownOpenIcon ? dropdownOpenIcon : !isOpen && dropdownCloseIcon ? dropdownCloseIcon : dropdownIcon ? dropdownIcon : /*#__PURE__*/_react.default.createElement(_Icons.ChevronDownIcon, _customDropdownIconProps);
+  const rightIcon =
+    isOpen && dropdownOpenIcon
+      ? dropdownOpenIcon
+      : !isOpen && dropdownCloseIcon
+      ? dropdownCloseIcon
+      : dropdownIcon
+      ? dropdownIcon
+      : /*#__PURE__*/ _react.default.createElement(
+          _Icons.ChevronDownIcon,
+          _customDropdownIconProps
+        );
 
   const handleClose = () => {
     setIsOpen(false);
@@ -157,93 +240,183 @@ const Select = ({
   };
 
   if (optimized) {
-    _react.default.Children.toArray(children).map(child => {
+    _react.default.Children.toArray(children).map((child) => {
       flatListData.push(child.props);
     });
   }
 
-  const [layoutProps, nonLayoutProps] = (0, _utils2.extractInObject)(resolvedProps, [..._utils2.stylingProps.margin, ..._utils2.stylingProps.flexbox, ..._utils2.stylingProps.position, 'shadow', 'opacity']);
-
-  const commonInput = /*#__PURE__*/_react.default.createElement(_Input.Input, _extends({
-    placeholder: placeholder,
-    InputRightElement: rightIcon
-  }, nonLayoutProps, {
-    // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component
-    // @ts-ignore-next-line
-    isFocused: isFocused,
-    isHovered: isHovered,
-    "aria-hidden": true,
-    importantForAccessibility: "no",
-    value: selectedItem ? selectedItem.label : '',
-    editable: false,
-    focusable: false,
-    isDisabled: isDisabled,
-    pointerEvents: "none",
-    variant: variant
-  }));
-
-  return _reactNative.Platform.OS === 'android' || _reactNative.Platform.OS === 'ios' ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Pressable.Pressable, _extends({
-    onPress: () => {
-      _reactNative.Keyboard.dismiss();
-
-      setIsOpen(true);
-      onOpen && onOpen();
-    },
-    disabled: isDisabled,
-    accessibilityLabel: accessibilityLabel,
-    accessibilityRole: "button",
-    ref: (0, _utils.mergeRefs)([ref, _ref])
-  }, layoutProps), commonInput), /*#__PURE__*/_react.default.createElement(_Actionsheet.Actionsheet, _extends({
-    isOpen: isOpen,
-    onClose: handleClose
-  }, _actionSheet), /*#__PURE__*/_react.default.createElement(_Actionsheet.Actionsheet.Content, _actionSheetContent, optimized ? /*#__PURE__*/_react.default.createElement(_FlatList.FlatList, _extends({}, _actionSheetBody, {
-    data: flatListData // eslint-disable-next-line no-shadow
-    ,
-    keyExtractor: (_item, index) => index.toString(),
-    renderItem: ({
-      item
-    }) => {
-      const isSelected = selectedValue === (item === null || item === void 0 ? void 0 : item.value);
-      return /*#__PURE__*/_react.default.createElement(_Actionsheet.Actionsheet.Item, _extends({
-        onPress: () => {
-          if (!isDisabled) {
-            setValue(item === null || item === void 0 ? void 0 : item.value);
-          }
-        },
-        accessibilityState: {
-          selected: isSelected
-        }
-      }, item, _item, isSelected && _selectedItem), item === null || item === void 0 ? void 0 : item.label);
-    }
-  })) : /*#__PURE__*/_react.default.createElement(_ScrollView.ScrollView, _actionSheetBody, /*#__PURE__*/_react.default.createElement(SelectContext.Provider, {
-    value: contextValue
-  }, children))))) : /*#__PURE__*/_react.default.createElement(_Box.default, layoutProps, /*#__PURE__*/_react.default.createElement("select", _extends({
-    "aria-readonly": selectProps.readOnly,
-    required: selectProps.required,
-    disabled: isDisabled
-  }, focusProps, hoverProps, {
-    ref: (0, _utils.mergeRefs)([ref, _ref]) //@ts-ignore
-    ,
-    onChange: e => {
-      setValue(e.target.value);
-    },
-    value: selectedItem === null ? tempFix : value,
-    "aria-label": placeholder,
-    onFocus: () => {
-      setIsFocused(true);
-      onOpen && onOpen();
-    },
-    onBlur: () => {
-      setIsFocused(false);
-      onClose && onClose();
-    }
-  }, _webSelect), /*#__PURE__*/_react.default.createElement("option", {
-    disabled: true,
-    value: tempFix
-  }, placeholder), children), commonInput);
+  const [layoutProps, nonLayoutProps] = (0, _utils2.extractInObject)(
+    resolvedProps,
+    [
+      ..._utils2.stylingProps.margin,
+      ..._utils2.stylingProps.flexbox,
+      ..._utils2.stylingProps.position,
+      'shadow',
+      'opacity',
+    ]
+  );
+
+  const commonInput = /*#__PURE__*/ _react.default.createElement(
+    _Input.Input,
+    _extends(
+      {
+        placeholder: placeholder,
+        InputRightElement: rightIcon,
+      },
+      nonLayoutProps,
+      {
+        // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component
+        // @ts-ignore-next-line
+        'isFocused': isFocused,
+        'isHovered': isHovered,
+        'aria-hidden': true,
+        'importantForAccessibility': 'no',
+        'value': selectedItem ? selectedItem.label : '',
+        'editable': false,
+        'focusable': false,
+        'isDisabled': isDisabled,
+        'pointerEvents': 'none',
+        'variant': variant,
+      }
+    )
+  );
+
+  return _reactNative.Platform.OS === 'android' ||
+    _reactNative.Platform.OS === 'ios'
+    ? /*#__PURE__*/ _react.default.createElement(
+        _react.default.Fragment,
+        null,
+        /*#__PURE__*/ _react.default.createElement(
+          _Pressable.Pressable,
+          _extends(
+            {
+              onPress: () => {
+                _reactNative.Keyboard.dismiss();
+
+                setIsOpen(true);
+                onOpen && onOpen();
+              },
+              disabled: isDisabled,
+              accessibilityLabel: accessibilityLabel,
+              accessibilityRole: 'button',
+              ref: (0, _utils.mergeRefs)([ref, _ref]),
+            },
+            layoutProps
+          ),
+          commonInput
+        ),
+        /*#__PURE__*/ _react.default.createElement(
+          _Actionsheet.Actionsheet,
+          _extends(
+            {
+              isOpen: isOpen,
+              onClose: handleClose,
+            },
+            _actionSheet
+          ),
+          /*#__PURE__*/ _react.default.createElement(
+            _Actionsheet.Actionsheet.Content,
+            _actionSheetContent,
+            optimized
+              ? /*#__PURE__*/ _react.default.createElement(
+                  _FlatList.FlatList,
+                  _extends({}, _actionSheetBody, {
+                    data: flatListData, // eslint-disable-next-line no-shadow
+                    keyExtractor: (_item, index) => index.toString(),
+                    renderItem: ({ item }) => {
+                      const isSelected =
+                        selectedValue ===
+                        (item === null || item === void 0
+                          ? void 0
+                          : item.value);
+                      return /*#__PURE__*/ _react.default.createElement(
+                        _Actionsheet.Actionsheet.Item,
+                        _extends(
+                          {
+                            onPress: () => {
+                              if (!isDisabled) {
+                                setValue(
+                                  item === null || item === void 0
+                                    ? void 0
+                                    : item.value
+                                );
+                              }
+                            },
+                            accessibilityState: {
+                              selected: isSelected,
+                            },
+                          },
+                          item,
+                          _item,
+                          isSelected && _selectedItem
+                        ),
+                        item === null || item === void 0 ? void 0 : item.label
+                      );
+                    },
+                  })
+                )
+              : /*#__PURE__*/ _react.default.createElement(
+                  _ScrollView.ScrollView,
+                  _actionSheetBody,
+                  /*#__PURE__*/ _react.default.createElement(
+                    SelectContext.Provider,
+                    {
+                      value: contextValue,
+                    },
+                    children
+                  )
+                )
+          )
+        )
+      )
+    : /*#__PURE__*/ _react.default.createElement(
+        _Box.default,
+        layoutProps,
+        /*#__PURE__*/ _react.default.createElement(
+          'select',
+          _extends(
+            {
+              'aria-readonly': selectProps.readOnly,
+              'required': selectProps.required,
+              'disabled': isDisabled,
+            },
+            focusProps,
+            hoverProps,
+            {
+              'ref': (0, _utils.mergeRefs)([ref, _ref]), //@ts-ignore
+              'onChange': (e) => {
+                setValue(e.target.value);
+              },
+              'value': selectedItem === null ? tempFix : value,
+              'aria-label': placeholder || 'Select an option',
+              'onFocus': () => {
+                setIsFocused(true);
+                onOpen && onOpen();
+              },
+              'onBlur': () => {
+                setIsFocused(false);
+                onClose && onClose();
+              },
+            },
+            _webSelect
+          ),
+          /*#__PURE__*/ _react.default.createElement(
+            'option',
+            {
+              disabled: true,
+              value: tempFix,
+            },
+            placeholder
+          ),
+          children
+        ),
+        commonInput
+      );
 };
 
-var _default = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(Select));
+var _default = /*#__PURE__*/ (0, _react.memo)(
+  /*#__PURE__*/ (0, _react.forwardRef)(Select)
+);
 
 exports.default = _default;
 //# sourceMappingURL=Select.js.map
diff --git a/node_modules/native-base/lib/commonjs/components/primitives/Select/Select.js.map b/node_modules/native-base/lib/commonjs/components/primitives/Select/Select.js.map
index 9215409..c6eccbc 100644
--- a/node_modules/native-base/lib/commonjs/components/primitives/Select/Select.js.map
+++ b/node_modules/native-base/lib/commonjs/components/primitives/Select/Select.js.map
@@ -1 +1,99 @@
-{"version":3,"sources":["Select.tsx"],"names":["SelectContext","React","createContext","onValueChange","selectedValue","_selectedItem","_item","Select","isHovered","isHoveredProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","variant","props","ref","selectProps","isDisabled","nativeID","flatListData","disabled","tempFix","_ref","useRef","isOpen","setIsOpen","useState","setIsFocused","focusProps","hoverProps","children","dropdownIcon","dropdownCloseIcon","dropdownOpenIcon","placeholder","accessibilityLabel","defaultValue","onOpen","onClose","optimized","_customDropdownIconProps","_actionSheet","_actionSheetContent","_actionSheetBody","_webSelect","resolvedProps","undefined","value","setValue","onChange","newValue","itemsList","Children","toArray","map","child","label","selectedItemArray","filter","item","selectedItem","length","contextValue","useMemo","rightIcon","handleClose","push","layoutProps","nonLayoutProps","stylingProps","margin","flexbox","position","commonInput","Platform","OS","Keyboard","dismiss","index","toString","isSelected","selected","readOnly","required","e","target"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEO,MAAMA,aAAa,gBAAGC,eAAMC,aAAN,CAAoB;AAC/CC,EAAAA,aAAa,EAAG,MAAM,CAAE,CADuB;AAE/CC,EAAAA,aAAa,EAAE,IAFgC;AAG/CC,EAAAA,aAAa,EAAE,EAHgC;AAI/CC,EAAAA,KAAK,EAAE;AAJwC,CAApB,CAAtB;;;;AAOP,MAAMC,MAAM,GAAG,CACb;AACEC,EAAAA,SAAS,EAAEC,aADb;AAEEC,EAAAA,SAAS,EAAEC,aAFb;AAGEC,EAAAA,cAAc,EAAEC,kBAHlB;AAIEC,EAAAA,OAJF;AAKE,KAAGC;AALL,CADa,EAQbC,GARa,KASV;AACH,QAAMC,WAAW,GAAG,iCAAe;AACjCC,IAAAA,UAAU,EAAEH,KAAK,CAACG,UADe;AAEjCC,IAAAA,QAAQ,EAAEJ,KAAK,CAACI;AAFiB,GAAf,CAApB;AAIA,QAAMC,YAAgC,GAAG,EAAzC;AAEA,QAAMF,UAAU,GAAGD,WAAW,CAACI,QAA/B;AACA,QAAMC,OAAO,GAAG,2BAAhB;;AACA,QAAMC,IAAI,GAAGtB,eAAMuB,MAAN,CAAa,IAAb,CAAb;;AAEA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBzB,eAAM0B,QAAN,CAAwB,KAAxB,CAA5B;;AACA,QAAM,CAACjB,SAAD,EAAYkB,YAAZ,IAA4B3B,eAAM0B,QAAN,CAAwB,KAAxB,CAAlC;;AAEA,QAAM;AAAEE,IAAAA,UAAF;AAAcjB,IAAAA;AAAd,MAAiC,0BAAvC;AACA,QAAM;AAAEkB,IAAAA,UAAF;AAActB,IAAAA;AAAd,MAA4B,4BAAS;AAAEU,IAAAA;AAAF,GAAT,EAAyBK,IAAzB,CAAlC;AAEA,QAAM;AACJpB,IAAAA,aADI;AAEJC,IAAAA,aAFI;AAGJ2B,IAAAA,QAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,iBALI;AAMJC,IAAAA,gBANI;AAOJC,IAAAA,WAPI;AAQJC,IAAAA,kBARI;AASJC,IAAAA,YATI;AAUJ/B,IAAAA,KAVI;AAWJD,IAAAA,aAXI;AAYJiC,IAAAA,MAZI;AAaJC,IAAAA,OAbI;AAcJC,IAAAA,SAdI;AAeJC,IAAAA,wBAfI;AAgBJC,IAAAA,YAhBI;AAiBJC,IAAAA,mBAjBI;AAkBJC,IAAAA,gBAlBI;AAmBJC,IAAAA,UAnBI;AAoBJ,OAAGC;AApBC,MAqBF,uCACF,QADE,EAEF/B,KAFE,EAGF;AACEG,IAAAA,UADF;AAEEV,IAAAA,SAAS,EAAEC,aAAa,IAAID,SAF9B;AAGEE,IAAAA,SAAS,EAAEC,aAAa,IAAID,SAH9B;AAIEE,IAAAA,cAAc,EAAEC,kBAAkB,IAAID;AAJxC,GAHE,EASFmC,SATE,CArBJ;AAiCA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB,iCAAqB;AAC7CD,IAAAA,KAAK,EAAE5C,aADsC;AAE7CiC,IAAAA,YAF6C;AAG7Ca,IAAAA,QAAQ,EAAGC,QAAD,IAAc;AACtBhD,MAAAA,aAAa,IAAIA,aAAa,CAACgD,QAAD,CAA9B;AACAzB,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AAN4C,GAArB,CAA1B;;AASA,QAAM0B,SAGJ,GAAGnD,eAAMoD,QAAN,CAAeC,OAAf,CAAuBvB,QAAvB,EAAiCwB,GAAjC,CAAsCC,KAAD,IAAgB;AAAA;;AACxD,WAAO;AACLC,MAAAA,KAAK,EAAED,KAAF,aAAEA,KAAF,uCAAEA,KAAK,CAAEzC,KAAT,iDAAE,aAAc0C,KADhB;AAELT,MAAAA,KAAK,EAAEQ,KAAF,aAAEA,KAAF,wCAAEA,KAAK,CAAEzC,KAAT,kDAAE,cAAciC;AAFhB,KAAP;AAID,GALI,CAHL;;AAUA,QAAMU,iBAAiB,GAAGN,SAAS,CAACO,MAAV,CACvBC,IAAD,IAAe,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEZ,KAAN,MAAgBA,KADP,CAA1B;AAIA,QAAMa,YAAY,GAChBH,iBAAiB,IAAIA,iBAAiB,CAACI,MAAvC,GAAgDJ,iBAAiB,CAAC,CAAD,CAAjE,GAAuE,IADzE;;AAGA,QAAMK,YAAY,GAAG9D,eAAM+D,OAAN,CAAc,MAAM;AACvC,WAAO;AACL7D,MAAAA,aAAa,EAAE8C,QADV;AAEL7C,MAAAA,aAAa,EAAE4C,KAFV;AAGL3C,MAAAA,aAAa,EAAEA,aAAF,aAAEA,aAAF,cAAEA,aAAF,GAAmB,EAH3B;AAILC,MAAAA,KAAK,EAAEA,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAW;AAJX,KAAP;AAMD,GAPoB,EAOlB,CAAC0C,KAAD,EAAQC,QAAR,EAAkB5C,aAAlB,EAAiCC,KAAjC,CAPkB,CAArB,CA5EG,CAqFH;;;AACA,MAAI,kDAAsBS,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,QAAMkD,SAAS,GACbxC,MAAM,IAAIS,gBAAV,GACEA,gBADF,GAEI,CAACT,MAAD,IAAWQ,iBAAX,GACFA,iBADE,GAEAD,YAAY,GACdA,YADc,gBAGd,6BAAC,sBAAD,EAAqBS,wBAArB,CARJ;;AAWA,QAAMyB,WAAW,GAAG,MAAM;AACxBxC,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAa,IAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD,GAHD;;AAKA,MAAIC,SAAJ,EAAe;AACbvC,mBAAMoD,QAAN,CAAeC,OAAf,CAAuBvB,QAAvB,EAAiCwB,GAAjC,CAAsCC,KAAD,IAAgB;AACnDpC,MAAAA,YAAY,CAAC+C,IAAb,CAAkBX,KAAK,CAACzC,KAAxB;AACD,KAFD;AAGD;;AAED,QAAM,CAACqD,WAAD,EAAcC,cAAd,IAAgC,6BAAgBvB,aAAhB,EAA+B,CACnE,GAAGwB,qBAAaC,MADmD,EAEnE,GAAGD,qBAAaE,OAFmD,EAGnE,GAAGF,qBAAaG,QAHmD,EAInE,QAJmE,EAKnE,SALmE,CAA/B,CAAtC;;AAQA,QAAMC,WAAW,gBACf,6BAAC,YAAD;AACE,IAAA,WAAW,EAAEvC,WADf;AAEE,IAAA,iBAAiB,EAAE8B;AAFrB,KAGMI,cAHN;AAIE;AACA;AACA,IAAA,SAAS,EAAE3D,SANb;AAOE,IAAA,SAAS,EAAEF,SAPb;AAQE,mBAAa,IARf;AASE,IAAA,yBAAyB,EAAC,IAT5B;AAUE,IAAA,KAAK,EAAEqD,YAAY,GAAGA,YAAY,CAACJ,KAAhB,GAAwB,EAV7C;AAWE,IAAA,QAAQ,EAAE,KAXZ;AAYE,IAAA,SAAS,EAAE,KAZb;AAaE,IAAA,UAAU,EAAEvC,UAbd;AAcE,IAAA,aAAa,EAAC,MAdhB;AAeE,IAAA,OAAO,EAAEJ;AAfX,KADF;;AAoBA,SAAO6D,sBAASC,EAAT,KAAgB,SAAhB,IAA6BD,sBAASC,EAAT,KAAgB,KAA7C,gBACL,yEACE,6BAAC,oBAAD;AACE,IAAA,OAAO,EAAE,MAAM;AACbC,4BAASC,OAAT;;AACApD,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAY,MAAAA,MAAM,IAAIA,MAAM,EAAhB;AACD,KALH;AAME,IAAA,QAAQ,EAAEpB,UANZ;AAOE,IAAA,kBAAkB,EAAEkB,kBAPtB;AAQE,IAAA,iBAAiB,EAAC,QARpB;AASE,IAAA,GAAG,EAAE,sBAAU,CAACpB,GAAD,EAAMO,IAAN,CAAV;AATP,KAUM6C,WAVN,GAYGM,WAZH,CADF,eAeE,6BAAC,wBAAD;AAAa,IAAA,MAAM,EAAEjD,MAArB;AAA6B,IAAA,OAAO,EAAEyC;AAAtC,KAAuDxB,YAAvD,gBACE,6BAAC,wBAAD,CAAa,OAAb,EAAyBC,mBAAzB,EAEGH,SAAS,gBACR,6BAAC,kBAAD,eACMI,gBADN;AAEE,IAAA,IAAI,EAAExB,YAFR,CAGE;AAHF;AAIE,IAAA,YAAY,EAAE,CAACd,KAAD,EAAQyE,KAAR,KAAkBA,KAAK,CAACC,QAAN,EAJlC;AAKE,IAAA,UAAU,EAAE,CAAC;AAAEpB,MAAAA;AAAF,KAAD,KAAmB;AAC7B,YAAMqB,UAAU,GAAG7E,aAAa,MAAKwD,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEZ,KAAX,CAAhC;AACA,0BACE,6BAAC,wBAAD,CAAa,IAAb;AACE,QAAA,OAAO,EAAE,MAAM;AACb,cAAI,CAAC9B,UAAL,EAAiB;AACf+B,YAAAA,QAAQ,CAACW,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEZ,KAAP,CAAR;AACD;AACF,SALH;AAME,QAAA,kBAAkB,EAAE;AAAEkC,UAAAA,QAAQ,EAAED;AAAZ;AANtB,SAOMrB,IAPN,EAQMtD,KARN,EASO2E,UAAU,IAAI5E,aATrB,GAWGuD,IAXH,aAWGA,IAXH,uBAWGA,IAAI,CAAEH,KAXT,CADF;AAeD;AAtBH,KADQ,gBA0BR,6BAAC,sBAAD,EAAgBb,gBAAhB,eACE,6BAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEmB;AAA/B,KACGhC,QADH,CADF,CA5BJ,CADF,CAfF,CADK,gBAuDL,6BAAC,YAAD,EAASqC,WAAT,eAEE;AACE,qBAAenD,WAAW,CAACkE,QAD7B;AAEE,IAAA,QAAQ,EAAElE,WAAW,CAACmE,QAFxB;AAGE,IAAA,QAAQ,EAAElE;AAHZ,KAIMW,UAJN,EAKMC,UALN;AAME,IAAA,GAAG,EAAE,sBAAU,CAACd,GAAD,EAAMO,IAAN,CAAV,CANP,CAOE;AAPF;AAQE,IAAA,QAAQ,EAAG8D,CAAD,IAAO;AACfpC,MAAAA,QAAQ,CAACoC,CAAC,CAACC,MAAF,CAAStC,KAAV,CAAR;AACD,KAVH;AAWE,IAAA,KAAK,EAAEa,YAAY,KAAK,IAAjB,GAAwBvC,OAAxB,GAAkC0B,KAX3C;AAYE,kBAAYb,WAZd;AAaE,IAAA,OAAO,EAAE,MAAM;AACbP,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAU,MAAAA,MAAM,IAAIA,MAAM,EAAhB;AACD,KAhBH;AAiBE,IAAA,MAAM,EAAE,MAAM;AACZV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAW,MAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD;AApBH,KAqBMM,UArBN,gBAuBE;AAAQ,IAAA,QAAQ,MAAhB;AAAiB,IAAA,KAAK,EAAEvB;AAAxB,KACGa,WADH,CAvBF,EA0BGJ,QA1BH,CAFF,EA+BG2C,WA/BH,CAvDF;AAyFD,CA9OD;;4BAgPe,+BAAK,uBAAWnE,MAAX,CAAL,C","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISelectItemProps } from './types';\nimport { Pressable } from '../Pressable';\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    variant,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n  const flatListData: ISelectItemProps[] = [];\n\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [isFocused, setIsFocused] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    _customDropdownIconProps,\n    _actionSheet,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Select',\n    props,\n    {\n      isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    },\n    undefined\n  );\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n\n  const itemsList: Array<{\n    label: string;\n    value: string;\n  }> = React.Children.toArray(children).map((child: any) => {\n    return {\n      label: child?.props?.label,\n      value: child?.props?.value,\n    };\n  });\n\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item?.value === value\n  );\n\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem ?? {},\n      _item: _item ?? {},\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {..._customDropdownIconProps} />\n    );\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.toArray(children).map((child: any) => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    'shadow',\n    'opacity',\n  ]);\n\n  const commonInput = (\n    <Input\n      placeholder={placeholder}\n      InputRightElement={rightIcon}\n      {...nonLayoutProps}\n      // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n      // @ts-ignore-next-line\n      isFocused={isFocused}\n      isHovered={isHovered}\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem ? selectedItem.label : ''}\n      editable={false}\n      focusable={false}\n      isDisabled={isDisabled}\n      pointerEvents=\"none\"\n      variant={variant}\n    />\n  );\n\n  return Platform.OS === 'android' || Platform.OS === 'ios' ? (\n    <>\n      <Pressable\n        onPress={() => {\n          Keyboard.dismiss();\n          setIsOpen(true);\n          onOpen && onOpen();\n        }}\n        disabled={isDisabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        ref={mergeRefs([ref, _ref])}\n        {...layoutProps}\n      >\n        {commonInput}\n      </Pressable>\n      <Actionsheet isOpen={isOpen} onClose={handleClose} {..._actionSheet}>\n        <Actionsheet.Content {..._actionSheetContent}>\n          {/* TODO: Replace ScrollVeiw with FlatList */}\n          {optimized ? (\n            <FlatList\n              {..._actionSheetBody}\n              data={flatListData}\n              // eslint-disable-next-line no-shadow\n              keyExtractor={(_item, index) => index.toString()}\n              renderItem={({ item }: any) => {\n                const isSelected = selectedValue === item?.value;\n                return (\n                  <Actionsheet.Item\n                    onPress={() => {\n                      if (!isDisabled) {\n                        setValue(item?.value);\n                      }\n                    }}\n                    accessibilityState={{ selected: isSelected }}\n                    {...item}\n                    {..._item}\n                    {...(isSelected && _selectedItem)}\n                  >\n                    {item?.label}\n                  </Actionsheet.Item>\n                );\n              }}\n            />\n          ) : (\n            <ScrollView {..._actionSheetBody}>\n              <SelectContext.Provider value={contextValue}>\n                {children}\n              </SelectContext.Provider>\n            </ScrollView>\n          )}\n        </Actionsheet.Content>\n      </Actionsheet>\n    </>\n  ) : (\n    <Box {...layoutProps}>\n      {/* <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}> */}\n      <select\n        aria-readonly={selectProps.readOnly}\n        required={selectProps.required}\n        disabled={isDisabled}\n        {...focusProps}\n        {...hoverProps}\n        ref={mergeRefs([ref, _ref])}\n        //@ts-ignore\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        value={selectedItem === null ? tempFix : value}\n        aria-label={placeholder}\n        onFocus={() => {\n          setIsFocused(true);\n          onOpen && onOpen();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          onClose && onClose();\n        }}\n        {..._webSelect}\n      >\n        <option disabled value={tempFix}>\n          {placeholder}\n        </option>\n        {children}\n      </select>\n      {/* </Box> */}\n      {commonInput}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "Select.tsx"
+  ],
+  "names": [
+    "SelectContext",
+    "React",
+    "createContext",
+    "onValueChange",
+    "selectedValue",
+    "_selectedItem",
+    "_item",
+    "Select",
+    "isHovered",
+    "isHoveredProp",
+    "isFocused",
+    "isFocusedProp",
+    "isFocusVisible",
+    "isFocusVisibleProp",
+    "variant",
+    "props",
+    "ref",
+    "selectProps",
+    "isDisabled",
+    "nativeID",
+    "flatListData",
+    "disabled",
+    "tempFix",
+    "_ref",
+    "useRef",
+    "isOpen",
+    "setIsOpen",
+    "useState",
+    "setIsFocused",
+    "focusProps",
+    "hoverProps",
+    "children",
+    "dropdownIcon",
+    "dropdownCloseIcon",
+    "dropdownOpenIcon",
+    "placeholder",
+    "accessibilityLabel",
+    "defaultValue",
+    "onOpen",
+    "onClose",
+    "optimized",
+    "_customDropdownIconProps",
+    "_actionSheet",
+    "_actionSheetContent",
+    "_actionSheetBody",
+    "_webSelect",
+    "resolvedProps",
+    "undefined",
+    "value",
+    "setValue",
+    "onChange",
+    "newValue",
+    "itemsList",
+    "Children",
+    "toArray",
+    "map",
+    "child",
+    "label",
+    "selectedItemArray",
+    "filter",
+    "item",
+    "selectedItem",
+    "length",
+    "contextValue",
+    "useMemo",
+    "rightIcon",
+    "handleClose",
+    "push",
+    "layoutProps",
+    "nonLayoutProps",
+    "stylingProps",
+    "margin",
+    "flexbox",
+    "position",
+    "commonInput",
+    "Platform",
+    "OS",
+    "Keyboard",
+    "dismiss",
+    "index",
+    "toString",
+    "isSelected",
+    "selected",
+    "readOnly",
+    "required",
+    "e",
+    "target"
+  ],
+  "mappings": "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",
+  "sourcesContent": [
+    "import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISelectItemProps } from './types';\nimport { Pressable } from '../Pressable';\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    variant,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n  const flatListData: ISelectItemProps[] = [];\n\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [isFocused, setIsFocused] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    _customDropdownIconProps,\n    _actionSheet,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Select',\n    props,\n    {\n      isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    },\n    undefined\n  );\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n\n  const itemsList: Array<{\n    label: string;\n    value: string;\n  }> = React.Children.toArray(children).map((child: any) => {\n    return {\n      label: child?.props?.label,\n      value: child?.props?.value,\n    };\n  });\n\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item?.value === value\n  );\n\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem ?? {},\n      _item: _item ?? {},\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {..._customDropdownIconProps} />\n    );\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.toArray(children).map((child: any) => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    'shadow',\n    'opacity',\n  ]);\n\n  const commonInput = (\n    <Input\n      placeholder={placeholder}\n      InputRightElement={rightIcon}\n      {...nonLayoutProps}\n      // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n      // @ts-ignore-next-line\n      isFocused={isFocused}\n      isHovered={isHovered}\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem ? selectedItem.label : ''}\n      editable={false}\n      focusable={false}\n      isDisabled={isDisabled}\n      pointerEvents=\"none\"\n      variant={variant}\n    />\n  );\n\n  return Platform.OS === 'android' || Platform.OS === 'ios' ? (\n    <>\n      <Pressable\n        onPress={() => {\n          Keyboard.dismiss();\n          setIsOpen(true);\n          onOpen && onOpen();\n        }}\n        disabled={isDisabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        ref={mergeRefs([ref, _ref])}\n        {...layoutProps}\n      >\n        {commonInput}\n      </Pressable>\n      <Actionsheet isOpen={isOpen} onClose={handleClose} {..._actionSheet}>\n        <Actionsheet.Content {..._actionSheetContent}>\n          {/* TODO: Replace ScrollVeiw with FlatList */}\n          {optimized ? (\n            <FlatList\n              {..._actionSheetBody}\n              data={flatListData}\n              // eslint-disable-next-line no-shadow\n              keyExtractor={(_item, index) => index.toString()}\n              renderItem={({ item }: any) => {\n                const isSelected = selectedValue === item?.value;\n                return (\n                  <Actionsheet.Item\n                    onPress={() => {\n                      if (!isDisabled) {\n                        setValue(item?.value);\n                      }\n                    }}\n                    accessibilityState={{ selected: isSelected }}\n                    {...item}\n                    {..._item}\n                    {...(isSelected && _selectedItem)}\n                  >\n                    {item?.label}\n                  </Actionsheet.Item>\n                );\n              }}\n            />\n          ) : (\n            <ScrollView {..._actionSheetBody}>\n              <SelectContext.Provider value={contextValue}>\n                {children}\n              </SelectContext.Provider>\n            </ScrollView>\n          )}\n        </Actionsheet.Content>\n      </Actionsheet>\n    </>\n  ) : (\n    <Box {...layoutProps}>\n      {/* <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}> */}\n      <select\n        aria-readonly={selectProps.readOnly}\n        required={selectProps.required}\n        disabled={isDisabled}\n        {...focusProps}\n        {...hoverProps}\n        ref={mergeRefs([ref, _ref])}\n        //@ts-ignore\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        value={selectedItem === null ? tempFix : value}\n        aria-label={placeholder || 'test'}\n        onFocus={() => {\n          setIsFocused(true);\n          onOpen && onOpen();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          onClose && onClose();\n        }}\n        {..._webSelect}\n      >\n        <option disabled value={tempFix}>\n          {placeholder}\n        </option>\n        {children}\n      </select>\n      {/* </Box> */}\n      {commonInput}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"
+  ]
+}
diff --git a/node_modules/native-base/lib/module/components/composites/Popover/PopoverContent.js b/node_modules/native-base/lib/module/components/composites/Popover/PopoverContent.js
index 70a0433..09a0bf1 100644
--- a/node_modules/native-base/lib/module/components/composites/Popover/PopoverContent.js
+++ b/node_modules/native-base/lib/module/components/composites/Popover/PopoverContent.js
@@ -1,12 +1,31 @@
-function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
+function _extends() {
+  _extends =
+    Object.assign ||
+    function (target) {
+      for (var i = 1; i < arguments.length; i++) {
+        var source = arguments[i];
+        for (var key in source) {
+          if (Object.prototype.hasOwnProperty.call(source, key)) {
+            target[key] = source[key];
+          }
+        }
+      }
+      return target;
+    };
+  return _extends.apply(this, arguments);
+}
 
-import { useKeyboardDismissable, usePropsResolution, useToken } from '../../../hooks';
+import {
+  useKeyboardDismissable,
+  usePropsResolution,
+  useToken,
+} from '../../../hooks';
 import React from 'react';
 import { Platform } from 'react-native';
 import { Popper } from '../Popper';
 import { PopoverContext } from './PopoverContext';
 import { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';
-export const PopoverContent = /*#__PURE__*/React.forwardRef((props, ref) => {
+export const PopoverContent = /*#__PURE__*/ React.forwardRef((props, ref) => {
   var _ref, _ref2, _props$bgColor;
 
   const {
@@ -18,13 +37,25 @@ export const PopoverContent = /*#__PURE__*/React.forwardRef((props, ref) => {
     bodyMounted,
     bodyId,
     headerId,
-    isOpen
+    isOpen,
   } = React.useContext(PopoverContext);
   const resolvedProps = usePropsResolution('PopoverContent', props);
-  const arrowDefaultColor = (_ref = (_ref2 = (_props$bgColor = props.bgColor) !== null && _props$bgColor !== void 0 ? _props$bgColor : props.bg) !== null && _ref2 !== void 0 ? _ref2 : props.backgroundColor) !== null && _ref !== void 0 ? _ref : resolvedProps.backgroundColor;
+  const arrowDefaultColor =
+    (_ref =
+      (_ref2 =
+        (_props$bgColor = props.bgColor) !== null && _props$bgColor !== void 0
+          ? _props$bgColor
+          : props.bg) !== null && _ref2 !== void 0
+        ? _ref2
+        : props.backgroundColor) !== null && _ref !== void 0
+      ? _ref
+      : resolvedProps.backgroundColor;
   const color = useToken('colors', arrowDefaultColor);
   React.useEffect(() => {
-    const finalFocusRefCurrentVal = finalFocusRef === null || finalFocusRef === void 0 ? void 0 : finalFocusRef.current;
+    const finalFocusRefCurrentVal =
+      finalFocusRef === null || finalFocusRef === void 0
+        ? void 0
+        : finalFocusRef.current;
 
     if (initialFocusRef && initialFocusRef.current) {
       initialFocusRef.current.focus();
@@ -38,39 +69,62 @@ export const PopoverContent = /*#__PURE__*/React.forwardRef((props, ref) => {
   }, [finalFocusRef, initialFocusRef]);
   useKeyboardDismissable({
     enabled: true,
-    callback: onClose
+    callback: onClose,
   });
   let arrowElement = null;
   const restChildren = [];
-  React.Children.toArray(props.children).forEach(child => {
+  React.Children.toArray(props.children).forEach((child) => {
     var _child$type;
 
-    if ((child === null || child === void 0 ? void 0 : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === 'PopperArrow') {
+    if (
+      (child === null || child === void 0
+        ? void 0
+        : (_child$type = child.type) === null || _child$type === void 0
+        ? void 0
+        : _child$type.displayName) === 'PopperArrow'
+    ) {
       var _child$props$color;
 
-      arrowElement = /*#__PURE__*/React.cloneElement(child, {
-        backgroundColor: (_child$props$color = child.props.color) !== null && _child$props$color !== void 0 ? _child$props$color : color
+      arrowElement = /*#__PURE__*/ React.cloneElement(child, {
+        backgroundColor:
+          (_child$props$color = child.props.color) !== null &&
+          _child$props$color !== void 0
+            ? _child$props$color
+            : color,
       });
     } else {
       restChildren.push(child);
     }
   });
-  const accessibilityProps = Platform.OS === 'web' ? {
-    'accessibilityRole': 'dialog',
-    'aria-labelledby': headerMounted ? headerId : undefined,
-    'aria-describedby': bodyMounted ? bodyId : undefined
-  } : {}; //TODO: refactor for responsive prop
+  const accessibilityProps =
+    Platform.OS === 'web'
+      ? {
+          'accessibilityRole': 'dialog',
+          'aria-labelledby': headerMounted ? headerId : 'test',
+          'aria-describedby': bodyMounted ? bodyId : undefined,
+        }
+      : {}; //TODO: refactor for responsive prop
 
   if (useHasResponsiveProps(props)) {
     return null;
   }
 
-  return /*#__PURE__*/React.createElement(Popper.Content, _extends({
-    nativeID: popoverContentId
-  }, accessibilityProps, resolvedProps, {
-    ref: ref,
-    isOpen: isOpen
-  }), arrowElement, restChildren);
+  return /*#__PURE__*/ React.createElement(
+    Popper.Content,
+    _extends(
+      {
+        nativeID: popoverContentId,
+      },
+      accessibilityProps,
+      resolvedProps,
+      {
+        ref: ref,
+        isOpen: isOpen,
+      }
+    ),
+    arrowElement,
+    restChildren
+  );
 });
 PopoverContent.displayName = 'PopoverContent';
 //# sourceMappingURL=PopoverContent.js.map
diff --git a/node_modules/native-base/lib/module/components/composites/Popover/PopoverContent.js.map b/node_modules/native-base/lib/module/components/composites/Popover/PopoverContent.js.map
index 2515064..7b46522 100644
--- a/node_modules/native-base/lib/module/components/composites/Popover/PopoverContent.js.map
+++ b/node_modules/native-base/lib/module/components/composites/Popover/PopoverContent.js.map
@@ -1 +1,60 @@
-{"version":3,"sources":["PopoverContent.tsx"],"names":["useKeyboardDismissable","usePropsResolution","useToken","React","Platform","Popper","PopoverContext","useHasResponsiveProps","PopoverContent","forwardRef","props","ref","onClose","initialFocusRef","finalFocusRef","popoverContentId","headerMounted","bodyMounted","bodyId","headerId","isOpen","useContext","resolvedProps","arrowDefaultColor","bgColor","bg","backgroundColor","color","useEffect","finalFocusRefCurrentVal","current","focus","enabled","callback","arrowElement","restChildren","Children","toArray","children","forEach","child","type","displayName","cloneElement","push","accessibilityProps","OS","undefined"],"mappings":"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","sourcesContent":["import {\n  useKeyboardDismissable,\n  usePropsResolution,\n  useToken,\n} from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport type { IPopoverContentProps } from './types';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const PopoverContent = React.forwardRef(\n  (props: IPopoverContentProps, ref: any) => {\n    const {\n      onClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      headerMounted,\n      bodyMounted,\n      bodyId,\n      headerId,\n      isOpen,\n    } = React.useContext(PopoverContext);\n    const resolvedProps = usePropsResolution('PopoverContent', props);\n\n    const arrowDefaultColor =\n      props.bgColor ??\n      props.bg ??\n      props.backgroundColor ??\n      resolvedProps.backgroundColor;\n    const color = useToken('colors', arrowDefaultColor);\n\n    React.useEffect(() => {\n      const finalFocusRefCurrentVal = finalFocusRef?.current;\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n\n      return () => {\n        if (finalFocusRefCurrentVal) {\n          finalFocusRefCurrentVal.focus();\n        }\n      };\n    }, [finalFocusRef, initialFocusRef]);\n\n    useKeyboardDismissable({\n      enabled: true,\n      callback: onClose,\n    });\n\n    let arrowElement = null;\n    const restChildren: any = [];\n    React.Children.toArray(props.children).forEach((child: any) => {\n      if (child?.type?.displayName === 'PopperArrow') {\n        arrowElement = React.cloneElement(child, {\n          backgroundColor: child.props.color ?? color,\n        });\n      } else {\n        restChildren.push(child);\n      }\n    });\n\n    const accessibilityProps =\n      Platform.OS === 'web'\n        ? ({\n            'accessibilityRole': 'dialog',\n            'aria-labelledby': headerMounted ? headerId : undefined,\n            'aria-describedby': bodyMounted ? bodyId : undefined,\n          } as any)\n        : {};\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    return (\n      <Popper.Content\n        nativeID={popoverContentId}\n        {...accessibilityProps}\n        {...resolvedProps}\n        ref={ref}\n        isOpen={isOpen}\n      >\n        {arrowElement}\n        {restChildren}\n      </Popper.Content>\n    );\n  }\n);\n\nPopoverContent.displayName = 'PopoverContent';\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "PopoverContent.tsx"
+  ],
+  "names": [
+    "useKeyboardDismissable",
+    "usePropsResolution",
+    "useToken",
+    "React",
+    "Platform",
+    "Popper",
+    "PopoverContext",
+    "useHasResponsiveProps",
+    "PopoverContent",
+    "forwardRef",
+    "props",
+    "ref",
+    "onClose",
+    "initialFocusRef",
+    "finalFocusRef",
+    "popoverContentId",
+    "headerMounted",
+    "bodyMounted",
+    "bodyId",
+    "headerId",
+    "isOpen",
+    "useContext",
+    "resolvedProps",
+    "arrowDefaultColor",
+    "bgColor",
+    "bg",
+    "backgroundColor",
+    "color",
+    "useEffect",
+    "finalFocusRefCurrentVal",
+    "current",
+    "focus",
+    "enabled",
+    "callback",
+    "arrowElement",
+    "restChildren",
+    "Children",
+    "toArray",
+    "children",
+    "forEach",
+    "child",
+    "type",
+    "displayName",
+    "cloneElement",
+    "push",
+    "accessibilityProps",
+    "OS",
+    "undefined"
+  ],
+  "mappings": "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",
+  "sourcesContent": [
+    "import {\n  useKeyboardDismissable,\n  usePropsResolution,\n  useToken,\n} from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport type { IPopoverContentProps } from './types';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const PopoverContent = React.forwardRef(\n  (props: IPopoverContentProps, ref: any) => {\n    const {\n      onClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      headerMounted,\n      bodyMounted,\n      bodyId,\n      headerId,\n      isOpen,\n    } = React.useContext(PopoverContext);\n    const resolvedProps = usePropsResolution('PopoverContent', props);\n\n    const arrowDefaultColor =\n      props.bgColor ??\n      props.bg ??\n      props.backgroundColor ??\n      resolvedProps.backgroundColor;\n    const color = useToken('colors', arrowDefaultColor);\n\n    React.useEffect(() => {\n      const finalFocusRefCurrentVal = finalFocusRef?.current;\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n\n      return () => {\n        if (finalFocusRefCurrentVal) {\n          finalFocusRefCurrentVal.focus();\n        }\n      };\n    }, [finalFocusRef, initialFocusRef]);\n\n    useKeyboardDismissable({\n      enabled: true,\n      callback: onClose,\n    });\n\n    let arrowElement = null;\n    const restChildren: any = [];\n    React.Children.toArray(props.children).forEach((child: any) => {\n      if (child?.type?.displayName === 'PopperArrow') {\n        arrowElement = React.cloneElement(child, {\n          backgroundColor: child.props.color ?? color,\n        });\n      } else {\n        restChildren.push(child);\n      }\n    });\n\n    const accessibilityProps =\n      Platform.OS === 'web'\n        ? ({\n            'accessibilityRole': 'dialog',\n            'aria-labelledby': headerMounted ? headerId : 'test',\n            'aria-describedby': bodyMounted ? bodyId : undefined,\n          } as any)\n        : {};\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    return (\n      <Popper.Content\n        nativeID={popoverContentId}\n        {...accessibilityProps}\n        {...resolvedProps}\n        ref={ref}\n        isOpen={isOpen}\n      >\n        {arrowElement}\n        {restChildren}\n      </Popper.Content>\n    );\n  }\n);\n\nPopoverContent.displayName = 'PopoverContent';\n"
+  ]
+}
diff --git a/node_modules/native-base/lib/module/components/primitives/Checkbox/Checkbox.web.js b/node_modules/native-base/lib/module/components/primitives/Checkbox/Checkbox.web.js
index c2d97ac..d117065 100644
--- a/node_modules/native-base/lib/module/components/primitives/Checkbox/Checkbox.web.js
+++ b/node_modules/native-base/lib/module/components/primitives/Checkbox/Checkbox.web.js
@@ -1,4 +1,19 @@
-function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
+function _extends() {
+  _extends =
+    Object.assign ||
+    function (target) {
+      for (var i = 1; i < arguments.length; i++) {
+        var source = arguments[i];
+        for (var key in source) {
+          if (Object.prototype.hasOwnProperty.call(source, key)) {
+            target[key] = source[key];
+          }
+        }
+      }
+      return target;
+    };
+  return _extends.apply(this, arguments);
+}
 
 import React, { memo, forwardRef } from 'react'; //@ts-ignore
 
@@ -21,23 +36,23 @@ import SizedIcon from './SizedIcon';
 import { Stack } from '../Stack';
 import { wrapStringChild } from '../../../utils/wrapStringChild';
 
-const Checkbox = ({
-  wrapperRef,
-  isHovered: isHoveredProp,
-  isFocusVisible: isFocusVisibleProp,
-  ...props
-}, ref) => {
+const Checkbox = (
+  {
+    wrapperRef,
+    isHovered: isHoveredProp,
+    isFocusVisible: isFocusVisibleProp,
+    ...props
+  },
+  ref
+) => {
   const formControlContext = useFormControlContext();
-  const {
-    isInvalid,
-    isReadOnly,
-    isIndeterminate,
-    ...combinedProps
-  } = combineContextAndProps(formControlContext, props);
+  const { isInvalid, isReadOnly, isIndeterminate, ...combinedProps } =
+    combineContextAndProps(formControlContext, props);
   const checkboxGroupContext = React.useContext(CheckboxGroupContext);
-  const state = useToggleState({ ...props,
+  const state = useToggleState({
+    ...props,
     defaultSelected: props.defaultIsChecked,
-    isSelected: props.isChecked
+    isSelected: props.isChecked,
   });
 
   const _ref = React.useRef();
@@ -46,26 +61,37 @@ const Checkbox = ({
   // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,
   // but since the checkbox won't move in and out of a group, it should be safe.
 
-  const {
-    inputProps: groupItemInputProps
-  } = checkboxGroupContext ? // eslint-disable-next-line react-hooks/rules-of-hooks
-  useCheckboxGroupItem({ ...combinedProps,
-    'aria-label': combinedProps.accessibilityLabel,
-    'value': combinedProps.value
-  }, checkboxGroupContext.state, //@ts-ignore
-  mergedRef) : // eslint-disable-next-line react-hooks/rules-of-hooks
-  useCheckbox({ ...combinedProps,
-    'aria-label': combinedProps.accessibilityLabel
-  }, state, //@ts-ignore
-  mergedRef); // eslint-disable-next-line react-hooks/exhaustive-deps
+  const { inputProps: groupItemInputProps } = checkboxGroupContext // eslint-disable-next-line react-hooks/rules-of-hooks
+    ? useCheckboxGroupItem(
+        {
+          ...combinedProps,
+          'aria-label': combinedProps.accessibilityLabel || 'Checkbox',
+          'value': combinedProps.value,
+        },
+        checkboxGroupContext.state, //@ts-ignore
+        mergedRef
+      ) // eslint-disable-next-line react-hooks/rules-of-hooks
+    : useCheckbox(
+        {
+          ...combinedProps,
+          'aria-label': combinedProps.accessibilityLabel || 'Checkbox',
+        },
+        state, //@ts-ignore
+        mergedRef
+      ); // eslint-disable-next-line react-hooks/exhaustive-deps
 
-  const inputProps = React.useMemo(() => groupItemInputProps, [groupItemInputProps.checked, groupItemInputProps.disabled, groupItemInputProps]);
+  const inputProps = React.useMemo(
+    () => groupItemInputProps,
+    [
+      groupItemInputProps.checked,
+      groupItemInputProps.disabled,
+      groupItemInputProps,
+    ]
+  );
   const contextCombinedProps = React.useMemo(() => {
-    return { ...checkboxGroupContext,
-      ...combinedProps
-    }; // eslint-disable-next-line react-hooks/exhaustive-deps
+    return { ...checkboxGroupContext, ...combinedProps }; // eslint-disable-next-line react-hooks/exhaustive-deps
   }, [stableHash(combinedProps)]);
-  return /*#__PURE__*/React.createElement(CheckboxComponent, {
+  return /*#__PURE__*/ React.createElement(CheckboxComponent, {
     wrapperRef: wrapperRef,
     mergedRef: mergedRef,
     inputProps: inputProps,
@@ -74,71 +100,110 @@ const Checkbox = ({
     isReadOnly: isReadOnly,
     isHovered: isHoveredProp,
     isIndeterminate: isIndeterminate,
-    isFocusVisible: isFocusVisibleProp
+    isFocusVisible: isFocusVisibleProp,
   });
 };
 
-const CheckboxComponent = /*#__PURE__*/React.memo(({
-  wrapperRef,
-  inputProps,
-  combinedProps,
-  isInvalid,
-  isReadOnly,
-  isIndeterminate,
-  mergedRef,
-  isHovered: isHoveredProp,
-  isFocusVisible: isFocusVisibleProp
-}) => {
-  const _ref = React.useRef();
-
-  const {
-    isHovered
-  } = useHover({}, _ref);
-  const {
-    checked: isChecked,
-    disabled: isDisabled
-  } = inputProps;
-  const {
-    focusProps,
-    isFocusVisible
-  } = useFocusRing();
-  const {
-    icon,
-    _interactionBox,
-    _icon,
-    _stack,
-    _text,
-    ...resolvedProps
-  } = usePropsResolution('Checkbox', combinedProps, {
+const CheckboxComponent = /*#__PURE__*/ React.memo(
+  ({
+    wrapperRef,
+    inputProps,
+    combinedProps,
     isInvalid,
     isReadOnly,
-    isFocusVisible: isFocusVisibleProp || isFocusVisible,
-    isDisabled,
     isIndeterminate,
-    isChecked,
-    isHovered: isHovered || isHoveredProp
-  });
-  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [...stylingProps.margin, ...stylingProps.layout, ...stylingProps.flexbox, ...stylingProps.position, '_text']);
-  const component = React.useMemo(() => {
-    return /*#__PURE__*/React.createElement(Stack, _extends({}, _stack, layoutProps), /*#__PURE__*/React.createElement(Center, null, /*#__PURE__*/React.createElement(Box, _interactionBox), /*#__PURE__*/React.createElement(Center, nonLayoutProps, /*#__PURE__*/React.createElement(SizedIcon, {
-      icon: icon,
-      _icon: _icon,
-      isChecked: isChecked
-    }))), wrapStringChild(resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.children, _text));
-  }, [_icon, _stack, _text, _interactionBox, icon, isChecked, nonLayoutProps, layoutProps, resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.children]);
-  const mergedWrapperRef = React.useMemo(() => mergeRefs([wrapperRef, _ref]), [wrapperRef]); //TODO: refactor for responsive prop
+    mergedRef,
+    isHovered: isHoveredProp,
+    isFocusVisible: isFocusVisibleProp,
+  }) => {
+    const _ref = React.useRef();
 
-  if (useHasResponsiveProps(resolvedProps)) {
-    return null;
-  }
+    const { isHovered } = useHover({}, _ref);
+    const { checked: isChecked, disabled: isDisabled } = inputProps;
+    const { focusProps, isFocusVisible } = useFocusRing();
+    const { icon, _interactionBox, _icon, _stack, _text, ...resolvedProps } =
+      usePropsResolution('Checkbox', combinedProps, {
+        isInvalid,
+        isReadOnly,
+        isFocusVisible: isFocusVisibleProp || isFocusVisible,
+        isDisabled,
+        isIndeterminate,
+        isChecked,
+        isHovered: isHovered || isHoveredProp,
+      });
+    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [
+      ...stylingProps.margin,
+      ...stylingProps.layout,
+      ...stylingProps.flexbox,
+      ...stylingProps.position,
+      '_text',
+    ]);
+    const component = React.useMemo(() => {
+      return /*#__PURE__*/ React.createElement(
+        Stack,
+        _extends({}, _stack, layoutProps),
+        /*#__PURE__*/ React.createElement(
+          Center,
+          null,
+          /*#__PURE__*/ React.createElement(Box, _interactionBox),
+          /*#__PURE__*/ React.createElement(
+            Center,
+            nonLayoutProps,
+            /*#__PURE__*/ React.createElement(SizedIcon, {
+              icon: icon,
+              _icon: _icon,
+              isChecked: isChecked,
+            })
+          )
+        ),
+        wrapStringChild(
+          resolvedProps === null || resolvedProps === void 0
+            ? void 0
+            : resolvedProps.children,
+          _text
+        )
+      );
+    }, [
+      _icon,
+      _stack,
+      _text,
+      _interactionBox,
+      icon,
+      isChecked,
+      nonLayoutProps,
+      layoutProps,
+      resolvedProps === null || resolvedProps === void 0
+        ? void 0
+        : resolvedProps.children,
+    ]);
+    const mergedWrapperRef = React.useMemo(
+      () => mergeRefs([wrapperRef, _ref]),
+      [wrapperRef]
+    ); //TODO: refactor for responsive prop
 
-  return /*#__PURE__*/React.createElement(Box // @ts-ignore - RN web supports accessibilityRole="label"
-  , {
-    accessibilityRole: "label",
-    ref: mergedWrapperRef
-  }, /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement("input", _extends({}, inputProps, focusProps, {
-    ref: mergedRef
-  }))), component);
-});
-export default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Checkbox));
+    if (useHasResponsiveProps(resolvedProps)) {
+      return null;
+    }
+
+    return /*#__PURE__*/ React.createElement(
+      Box, // @ts-ignore - RN web supports accessibilityRole="label"
+      {
+        accessibilityRole: 'label',
+        ref: mergedWrapperRef,
+      },
+      /*#__PURE__*/ React.createElement(
+        VisuallyHidden,
+        null,
+        /*#__PURE__*/ React.createElement(
+          'input',
+          _extends({}, inputProps, focusProps, {
+            ref: mergedRef,
+          })
+        )
+      ),
+      component
+    );
+  }
+);
+export default /*#__PURE__*/ memo(/*#__PURE__*/ forwardRef(Checkbox));
 //# sourceMappingURL=Checkbox.web.js.map
diff --git a/node_modules/native-base/lib/module/components/primitives/Checkbox/Checkbox.web.js.map b/node_modules/native-base/lib/module/components/primitives/Checkbox/Checkbox.web.js.map
index 19ddf8d..b8935c6 100644
--- a/node_modules/native-base/lib/module/components/primitives/Checkbox/Checkbox.web.js.map
+++ b/node_modules/native-base/lib/module/components/primitives/Checkbox/Checkbox.web.js.map
@@ -1 +1,84 @@
-{"version":3,"sources":["Checkbox.web.tsx"],"names":["React","memo","forwardRef","stableHash","mergeRefs","usePropsResolution","Center","useFormControlContext","Box","useToggleState","VisuallyHidden","CheckboxGroupContext","useHover","useCheckbox","useCheckboxGroupItem","useFocusRing","useHasResponsiveProps","extractInObject","stylingProps","combineContextAndProps","SizedIcon","Stack","wrapStringChild","Checkbox","wrapperRef","isHovered","isHoveredProp","isFocusVisible","isFocusVisibleProp","props","ref","formControlContext","isInvalid","isReadOnly","isIndeterminate","combinedProps","checkboxGroupContext","useContext","state","defaultSelected","defaultIsChecked","isSelected","isChecked","_ref","useRef","mergedRef","inputProps","groupItemInputProps","accessibilityLabel","value","useMemo","checked","disabled","contextCombinedProps","CheckboxComponent","isDisabled","focusProps","icon","_interactionBox","_icon","_stack","_text","resolvedProps","layoutProps","nonLayoutProps","margin","layout","flexbox","position","component","children","mergedWrapperRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport { mergeRefs } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\nimport { Stack } from '../Stack';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\n\nconst Checkbox = (\n  {\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n          'value': combinedProps.value,\n        },\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n    groupItemInputProps,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...checkboxGroupContext, ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  return (\n    <CheckboxComponent\n      wrapperRef={wrapperRef}\n      mergedRef={mergedRef}\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isHovered={isHoveredProp}\n      isIndeterminate={isIndeterminate}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    mergedRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n  }: any) => {\n    const _ref = React.useRef();\n    const { isHovered } = useHover({}, _ref);\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      _stack,\n      _text,\n      ...resolvedProps\n    } = usePropsResolution('Checkbox', combinedProps, {\n      isInvalid,\n      isReadOnly,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered: isHovered || isHoveredProp,\n    });\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n    const component = React.useMemo(() => {\n      return (\n        <Stack {..._stack} {...layoutProps}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Checkbox */}\n            <Center {...nonLayoutProps}>\n              {/* {iconResolver()} */}\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {/* {resolvedProps?.children} */}\n          {wrapStringChild(resolvedProps?.children, _text)}\n        </Stack>\n      );\n    }, [\n      _icon,\n      _stack,\n      _text,\n      _interactionBox,\n      icon,\n      isChecked,\n      nonLayoutProps,\n      layoutProps,\n      resolvedProps?.children,\n    ]);\n\n    const mergedWrapperRef = React.useMemo(\n      () => mergeRefs([wrapperRef, _ref]),\n      [wrapperRef]\n    );\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Box\n        // @ts-ignore - RN web supports accessibilityRole=\"label\"\n        accessibilityRole=\"label\"\n        ref={mergedWrapperRef}\n      >\n        <VisuallyHidden>\n          {/* <input {...props.inputProps} {...props.focusProps} ref={props.mergedRef} /> */}\n          <input {...inputProps} {...focusProps} ref={mergedRef} />\n        </VisuallyHidden>\n\n        {component}\n      </Box>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "Checkbox.web.tsx"
+  ],
+  "names": [
+    "React",
+    "memo",
+    "forwardRef",
+    "stableHash",
+    "mergeRefs",
+    "usePropsResolution",
+    "Center",
+    "useFormControlContext",
+    "Box",
+    "useToggleState",
+    "VisuallyHidden",
+    "CheckboxGroupContext",
+    "useHover",
+    "useCheckbox",
+    "useCheckboxGroupItem",
+    "useFocusRing",
+    "useHasResponsiveProps",
+    "extractInObject",
+    "stylingProps",
+    "combineContextAndProps",
+    "SizedIcon",
+    "Stack",
+    "wrapStringChild",
+    "Checkbox",
+    "wrapperRef",
+    "isHovered",
+    "isHoveredProp",
+    "isFocusVisible",
+    "isFocusVisibleProp",
+    "props",
+    "ref",
+    "formControlContext",
+    "isInvalid",
+    "isReadOnly",
+    "isIndeterminate",
+    "combinedProps",
+    "checkboxGroupContext",
+    "useContext",
+    "state",
+    "defaultSelected",
+    "defaultIsChecked",
+    "isSelected",
+    "isChecked",
+    "_ref",
+    "useRef",
+    "mergedRef",
+    "inputProps",
+    "groupItemInputProps",
+    "accessibilityLabel",
+    "value",
+    "useMemo",
+    "checked",
+    "disabled",
+    "contextCombinedProps",
+    "CheckboxComponent",
+    "isDisabled",
+    "focusProps",
+    "icon",
+    "_interactionBox",
+    "_icon",
+    "_stack",
+    "_text",
+    "resolvedProps",
+    "layoutProps",
+    "nonLayoutProps",
+    "margin",
+    "layout",
+    "flexbox",
+    "position",
+    "component",
+    "children",
+    "mergedWrapperRef"
+  ],
+  "mappings": "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",
+  "sourcesContent": [
+    "import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport { mergeRefs } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\nimport { Stack } from '../Stack';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\n\nconst Checkbox = (\n  {\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel || 'test',\n          'value': combinedProps.value,\n        },\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel || 'test',\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n    groupItemInputProps,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...checkboxGroupContext, ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  return (\n    <CheckboxComponent\n      wrapperRef={wrapperRef}\n      mergedRef={mergedRef}\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isHovered={isHoveredProp}\n      isIndeterminate={isIndeterminate}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    mergedRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n  }: any) => {\n    const _ref = React.useRef();\n    const { isHovered } = useHover({}, _ref);\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      _stack,\n      _text,\n      ...resolvedProps\n    } = usePropsResolution('Checkbox', combinedProps, {\n      isInvalid,\n      isReadOnly,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered: isHovered || isHoveredProp,\n    });\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n    const component = React.useMemo(() => {\n      return (\n        <Stack {..._stack} {...layoutProps}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Checkbox */}\n            <Center {...nonLayoutProps}>\n              {/* {iconResolver()} */}\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {/* {resolvedProps?.children} */}\n          {wrapStringChild(resolvedProps?.children, _text)}\n        </Stack>\n      );\n    }, [\n      _icon,\n      _stack,\n      _text,\n      _interactionBox,\n      icon,\n      isChecked,\n      nonLayoutProps,\n      layoutProps,\n      resolvedProps?.children,\n    ]);\n\n    const mergedWrapperRef = React.useMemo(\n      () => mergeRefs([wrapperRef, _ref]),\n      [wrapperRef]\n    );\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Box\n        // @ts-ignore - RN web supports accessibilityRole=\"label\"\n        accessibilityRole=\"label\"\n        ref={mergedWrapperRef}\n      >\n        <VisuallyHidden>\n          {/* <input {...props.inputProps} {...props.focusProps} ref={props.mergedRef} /> */}\n          <input {...inputProps} {...focusProps} ref={mergedRef} />\n        </VisuallyHidden>\n\n        {component}\n      </Box>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"
+  ]
+}
diff --git a/node_modules/native-base/lib/module/components/primitives/Checkbox/CheckboxGroup.js b/node_modules/native-base/lib/module/components/primitives/Checkbox/CheckboxGroup.js
index 0362dd7..6403518 100644
--- a/node_modules/native-base/lib/module/components/primitives/Checkbox/CheckboxGroup.js
+++ b/node_modules/native-base/lib/module/components/primitives/Checkbox/CheckboxGroup.js
@@ -1,4 +1,19 @@
-function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
+function _extends() {
+  _extends =
+    Object.assign ||
+    function (target) {
+      for (var i = 1; i < arguments.length; i++) {
+        var source = arguments[i];
+        for (var key in source) {
+          if (Object.prototype.hasOwnProperty.call(source, key)) {
+            target[key] = source[key];
+          }
+        }
+      }
+      return target;
+    };
+  return _extends.apply(this, arguments);
+}
 
 import React, { createContext, memo, forwardRef, useMemo } from 'react';
 import { useCheckboxGroupState } from '@react-stately/checkbox';
@@ -7,51 +22,53 @@ import { useFormControlContext } from '../../composites/FormControl';
 import Box from '../Box';
 import { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';
 import { usePropsResolution } from '../../../hooks/useThemeProps';
-export const CheckboxGroupContext = /*#__PURE__*/createContext(null);
+export const CheckboxGroupContext = /*#__PURE__*/ createContext(null);
 
-function CheckboxGroup({
-  size,
-  _checkbox,
-  colorScheme,
-  ...props
-}, ref) {
+function CheckboxGroup({ size, _checkbox, colorScheme, ...props }, ref) {
   const resolvedProps = usePropsResolution('CheckboxGroup', props);
-  const {
-    children
-  } = props;
+  const { children } = props;
   const state = useCheckboxGroupState(props);
-  const {
-    groupProps
-  } = useCheckboxGroup({
-    'aria-label': props.accessibilityLabel,
-    ...props
-  }, state);
-  const formControlContext = useFormControlContext();
-  const value = useMemo(() => ({
-    size,
-    colorScheme,
-    ..._checkbox,
-    ...formControlContext,
+  const { groupProps } = useCheckboxGroup(
+    {
+      'aria-label': props.accessibilityLabel || 'checkbox-group',
+      ...props,
+    },
     state
-  }), [_checkbox, colorScheme, formControlContext, size, state]); //TODO: refactor for responsive prop
+  );
+  const formControlContext = useFormControlContext();
+  const value = useMemo(
+    () => ({
+      size,
+      colorScheme,
+      ..._checkbox,
+      ...formControlContext,
+      state,
+    }),
+    [_checkbox, colorScheme, formControlContext, size, state]
+  ); //TODO: refactor for responsive prop
 
-  if (useHasResponsiveProps({ ...props,
-    size,
-    colorScheme
-  })) {
+  if (useHasResponsiveProps({ ...props, size, colorScheme })) {
     return null;
   }
 
   return (
     /*#__PURE__*/
     // @ts-ignore
-    React.createElement(CheckboxGroupContext.Provider, {
-      value: value
-    }, /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, groupProps, props, {
-      ref: ref
-    }), children))
+    React.createElement(
+      CheckboxGroupContext.Provider,
+      {
+        value: value,
+      },
+      /*#__PURE__*/ React.createElement(
+        Box,
+        _extends({}, resolvedProps, groupProps, props, {
+          ref: ref,
+        }),
+        children
+      )
+    )
   );
 }
 
-export default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(CheckboxGroup));
+export default /*#__PURE__*/ memo(/*#__PURE__*/ forwardRef(CheckboxGroup));
 //# sourceMappingURL=CheckboxGroup.js.map
diff --git a/node_modules/native-base/lib/module/components/primitives/Checkbox/CheckboxGroup.js.map b/node_modules/native-base/lib/module/components/primitives/Checkbox/CheckboxGroup.js.map
index b5a0c1e..f4518f9 100644
--- a/node_modules/native-base/lib/module/components/primitives/Checkbox/CheckboxGroup.js.map
+++ b/node_modules/native-base/lib/module/components/primitives/Checkbox/CheckboxGroup.js.map
@@ -1 +1,37 @@
-{"version":3,"sources":["CheckboxGroup.tsx"],"names":["React","createContext","memo","forwardRef","useMemo","useCheckboxGroupState","useCheckboxGroup","useFormControlContext","Box","useHasResponsiveProps","usePropsResolution","CheckboxGroupContext","CheckboxGroup","size","_checkbox","colorScheme","props","ref","resolvedProps","children","state","groupProps","accessibilityLabel","formControlContext","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,IAA/B,EAAqCC,UAArC,EAAiDC,OAAjD,QAAgE,OAAhE;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AAEA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,OAAO,MAAMC,oBAAoB,gBAAGV,aAAa,CAC/C,IAD+C,CAA1C;;AAIP,SAASW,aAAT,CACE;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,SAAR;AAAmBC,EAAAA,WAAnB;AAAgC,KAAGC;AAAnC,CADF,EAEEC,GAFF,EAGE;AACA,QAAMC,aAAa,GAAGR,kBAAkB,CAAC,eAAD,EAAkBM,KAAlB,CAAxC;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAeH,KAArB;AACA,QAAMI,KAAK,GAAGf,qBAAqB,CAACW,KAAD,CAAnC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAiBf,gBAAgB,CACrC;AAAE,kBAAcU,KAAK,CAACM,kBAAtB;AAA0C,OAAGN;AAA7C,GADqC,EAErCI,KAFqC,CAAvC;AAIA,QAAMG,kBAAkB,GAAGhB,qBAAqB,EAAhD;AACA,QAAMiB,KAAK,GAAGpB,OAAO,CACnB,OAAO;AACLS,IAAAA,IADK;AAELE,IAAAA,WAFK;AAGL,OAAGD,SAHE;AAIL,OAAGS,kBAJE;AAKLH,IAAAA;AALK,GAAP,CADmB,EAQnB,CAACN,SAAD,EAAYC,WAAZ,EAAyBQ,kBAAzB,EAA6CV,IAA7C,EAAmDO,KAAnD,CARmB,CAArB,CATA,CAoBA;;AACA,MAAIX,qBAAqB,CAAC,EAAE,GAAGO,KAAL;AAAYH,IAAAA,IAAZ;AAAkBE,IAAAA;AAAlB,GAAD,CAAzB,EAA4D;AAC1D,WAAO,IAAP;AACD;;AACD;AAAA;AACE;AACA,wBAAC,oBAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAES;AAAtC,oBACE,oBAAC,GAAD,eAASN,aAAT,EAA4BG,UAA5B,EAA4CL,KAA5C;AAAmD,MAAA,GAAG,EAAEC;AAAxD,QACGE,QADH,CADF;AAFF;AAQD;;AAED,4BAAejB,IAAI,eAACC,UAAU,CAACS,aAAD,CAAX,CAAnB","sourcesContent":["import React, { createContext, memo, forwardRef, useMemo } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { ICheckboxGroupProps, ICheckboxContext } from './types';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const CheckboxGroupContext = createContext<ICheckboxContext | null>(\n  null\n);\n\nfunction CheckboxGroup(\n  { size, _checkbox, colorScheme, ...props }: ICheckboxGroupProps,\n  ref?: any\n) {\n  const resolvedProps = usePropsResolution('CheckboxGroup', props);\n  const { children } = props;\n  const state = useCheckboxGroupState(props);\n  const { groupProps } = useCheckboxGroup(\n    { 'aria-label': props.accessibilityLabel, ...props },\n    state\n  );\n  const formControlContext = useFormControlContext();\n  const value = useMemo(\n    () => ({\n      size,\n      colorScheme,\n      ..._checkbox,\n      ...formControlContext,\n      state,\n    }),\n    [_checkbox, colorScheme, formControlContext, size, state]\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n  return (\n    // @ts-ignore\n    <CheckboxGroupContext.Provider value={value}>\n      <Box {...resolvedProps} {...groupProps} {...props} ref={ref}>\n        {children}\n      </Box>\n    </CheckboxGroupContext.Provider>\n  );\n}\n\nexport default memo(forwardRef(CheckboxGroup));\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "CheckboxGroup.tsx"
+  ],
+  "names": [
+    "React",
+    "createContext",
+    "memo",
+    "forwardRef",
+    "useMemo",
+    "useCheckboxGroupState",
+    "useCheckboxGroup",
+    "useFormControlContext",
+    "Box",
+    "useHasResponsiveProps",
+    "usePropsResolution",
+    "CheckboxGroupContext",
+    "CheckboxGroup",
+    "size",
+    "_checkbox",
+    "colorScheme",
+    "props",
+    "ref",
+    "resolvedProps",
+    "children",
+    "state",
+    "groupProps",
+    "accessibilityLabel",
+    "formControlContext",
+    "value"
+  ],
+  "mappings": ";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,IAA/B,EAAqCC,UAArC,EAAiDC,OAAjD,QAAgE,OAAhE;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AAEA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,OAAO,MAAMC,oBAAoB,gBAAGV,aAAa,CAC/C,IAD+C,CAA1C;;AAIP,SAASW,aAAT,CACE;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,SAAR;AAAmBC,EAAAA,WAAnB;AAAgC,KAAGC;AAAnC,CADF,EAEEC,GAFF,EAGE;AACA,QAAMC,aAAa,GAAGR,kBAAkB,CAAC,eAAD,EAAkBM,KAAlB,CAAxC;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAeH,KAArB;AACA,QAAMI,KAAK,GAAGf,qBAAqB,CAACW,KAAD,CAAnC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAiBf,gBAAgB,CACrC;AAAE,kBAAcU,KAAK,CAACM,kBAAtB;AAA0C,OAAGN;AAA7C,GADqC,EAErCI,KAFqC,CAAvC;AAIA,QAAMG,kBAAkB,GAAGhB,qBAAqB,EAAhD;AACA,QAAMiB,KAAK,GAAGpB,OAAO,CACnB,OAAO;AACLS,IAAAA,IADK;AAELE,IAAAA,WAFK;AAGL,OAAGD,SAHE;AAIL,OAAGS,kBAJE;AAKLH,IAAAA;AALK,GAAP,CADmB,EAQnB,CAACN,SAAD,EAAYC,WAAZ,EAAyBQ,kBAAzB,EAA6CV,IAA7C,EAAmDO,KAAnD,CARmB,CAArB,CATA,CAoBA;;AACA,MAAIX,qBAAqB,CAAC,EAAE,GAAGO,KAAL;AAAYH,IAAAA,IAAZ;AAAkBE,IAAAA;AAAlB,GAAD,CAAzB,EAA4D;AAC1D,WAAO,IAAP;AACD;;AACD;AAAA;AACE;AACA,wBAAC,oBAAD,CAAsB,QAAtB;AAA+B,MAAA,KAAK,EAAES;AAAtC,oBACE,oBAAC,GAAD,eAASN,aAAT,EAA4BG,UAA5B,EAA4CL,KAA5C;AAAmD,MAAA,GAAG,EAAEC;AAAxD,QACGE,QADH,CADF;AAFF;AAQD;;AAED,4BAAejB,IAAI,eAACC,UAAU,CAACS,aAAD,CAAX,CAAnB",
+  "sourcesContent": [
+    "import React, { createContext, memo, forwardRef, useMemo } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { ICheckboxGroupProps, ICheckboxContext } from './types';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const CheckboxGroupContext = createContext<ICheckboxContext | null>(\n  null\n);\n\nfunction CheckboxGroup(\n  { size, _checkbox, colorScheme, ...props }: ICheckboxGroupProps,\n  ref?: any\n) {\n  const resolvedProps = usePropsResolution('CheckboxGroup', props);\n  const { children } = props;\n  const state = useCheckboxGroupState(props);\n  const { groupProps } = useCheckboxGroup(\n    { 'aria-label': props.accessibilityLabel || 'test', ...props },\n    state\n  );\n  const formControlContext = useFormControlContext();\n  const value = useMemo(\n    () => ({\n      size,\n      colorScheme,\n      ..._checkbox,\n      ...formControlContext,\n      state,\n    }),\n    [_checkbox, colorScheme, formControlContext, size, state]\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n  return (\n    // @ts-ignore\n    <CheckboxGroupContext.Provider value={value}>\n      <Box {...resolvedProps} {...groupProps} {...props} ref={ref}>\n        {children}\n      </Box>\n    </CheckboxGroupContext.Provider>\n  );\n}\n\nexport default memo(forwardRef(CheckboxGroup));\n"
+  ]
+}
diff --git a/node_modules/native-base/lib/module/components/primitives/Radio/Radio.js b/node_modules/native-base/lib/module/components/primitives/Radio/Radio.js
index 459d17e..b44a3f0 100644
--- a/node_modules/native-base/lib/module/components/primitives/Radio/Radio.js
+++ b/node_modules/native-base/lib/module/components/primitives/Radio/Radio.js
@@ -1,4 +1,19 @@
-function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
+function _extends() {
+  _extends =
+    Object.assign ||
+    function (target) {
+      for (var i = 1; i < arguments.length; i++) {
+        var source = arguments[i];
+        for (var key in source) {
+          if (Object.prototype.hasOwnProperty.call(source, key)) {
+            target[key] = source[key];
+          }
+        }
+      }
+      return target;
+    };
+  return _extends.apply(this, arguments);
+}
 
 import React, { memo, forwardRef } from 'react'; //@ts-ignore
 
@@ -14,123 +29,178 @@ import { RadioContext } from './RadioGroup';
 import { mergeRefs } from '../../../utils';
 import { CircleIcon } from '../Icon/Icons';
 import { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';
-import { composeEventHandlers, combineContextAndProps, isEmptyObj } from '../../../utils';
+import {
+  composeEventHandlers,
+  combineContextAndProps,
+  isEmptyObj,
+} from '../../../utils';
 import { extractInObject, stylingProps } from '../../../theme/tools/utils';
-import { useHover, useFocus, useIsPressed } from '../../primitives/Pressable/Pressable';
+import {
+  useHover,
+  useFocus,
+  useIsPressed,
+} from '../../primitives/Pressable/Pressable';
 import { useFormControlContext } from '../../composites/FormControl';
-const RadioComponent = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(({
-  icon,
-  inputProps,
-  combinedProps,
-  size,
-  children,
-  wrapperRef,
-  isHovered: isHoveredProp,
-  isPressed: isPressedProp,
-  isFocused: isFocusedProp
-}, ref) => {
-  const {
-    isInvalid,
-    isReadOnly,
-    isIndeterminate
-  } = combinedProps;
-  const {
-    hoverProps,
-    isHovered
-  } = useHover();
-  const {
-    pressableProps,
-    isPressed
-  } = useIsPressed();
-  const {
-    focusProps,
-    isFocused
-  } = useFocus();
-  const {
-    disabled: isDisabled,
-    checked: isChecked
-  } = inputProps;
-  const {
-    onPressIn,
-    onPressOut,
-    onHoverIn,
-    onHoverOut,
-    onFocus,
-    onBlur,
-    _interactionBox,
-    _icon,
-    _stack,
-    _text,
-    ...resolvedProps
-  } = usePropsResolution('Radio', { ...combinedProps,
-    size
-  }, {
-    isInvalid,
-    isReadOnly,
-    isDisabled,
-    isIndeterminate,
-    isChecked,
-    isHovered: isHoveredProp || isHovered,
-    isPressed: isPressedProp || isPressed,
-    isFocused: isFocusedProp || isFocused
-  });
-  const [, cleanInputProps] = extractInObject(inputProps, [...stylingProps.margin, ...stylingProps.layout, ...stylingProps.flexbox, ...stylingProps.position, ...stylingProps.background, ...stylingProps.padding, ...stylingProps.border, '_text']); // only calling below function when icon exist.
+const RadioComponent = /*#__PURE__*/ memo(
+  /*#__PURE__*/ forwardRef(
+    (
+      {
+        icon,
+        inputProps,
+        combinedProps,
+        size,
+        children,
+        wrapperRef,
+        isHovered: isHoveredProp,
+        isPressed: isPressedProp,
+        isFocused: isFocusedProp,
+      },
+      ref
+    ) => {
+      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;
+      const { hoverProps, isHovered } = useHover();
+      const { pressableProps, isPressed } = useIsPressed();
+      const { focusProps, isFocused } = useFocus();
+      const { disabled: isDisabled, checked: isChecked } = inputProps;
+      const {
+        onPressIn,
+        onPressOut,
+        onHoverIn,
+        onHoverOut,
+        onFocus,
+        onBlur,
+        _interactionBox,
+        _icon,
+        _stack,
+        _text,
+        ...resolvedProps
+      } = usePropsResolution(
+        'Radio',
+        { ...combinedProps, size },
+        {
+          isInvalid,
+          isReadOnly,
+          isDisabled,
+          isIndeterminate,
+          isChecked,
+          isHovered: isHoveredProp || isHovered,
+          isPressed: isPressedProp || isPressed,
+          isFocused: isFocusedProp || isFocused,
+        }
+      );
+      const [, cleanInputProps] = extractInObject(inputProps, [
+        ...stylingProps.margin,
+        ...stylingProps.layout,
+        ...stylingProps.flexbox,
+        ...stylingProps.position,
+        ...stylingProps.background,
+        ...stylingProps.padding,
+        ...stylingProps.border,
+        '_text',
+      ]); // only calling below function when icon exist.
 
-  const sizedIcon = () =>
-  /*#__PURE__*/
-  //@ts-ignore
-  React.cloneElement(icon, { ..._icon
-  });
+      const sizedIcon = () =>
+        /*#__PURE__*/
+        //@ts-ignore
+        React.cloneElement(icon, { ..._icon });
 
-  return /*#__PURE__*/React.createElement(Pressable, _extends({
-    disabled: isDisabled
-  }, pressableProps, cleanInputProps, {
-    ref: mergeRefs([ref, wrapperRef]),
-    accessibilityRole: "radio",
-    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),
-    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut) // @ts-ignore - web only
-    ,
-    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn) // @ts-ignore - web only
-    ,
-    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut) // @ts-ignore - web only
-    ,
-    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus) // focusRingProps.onFocu
-    ) // @ts-ignore - web only
-    ,
-    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur) // focusRingProps.onBlur
-    )
-  }), /*#__PURE__*/React.createElement(Stack, _stack, /*#__PURE__*/React.createElement(Center, null, /*#__PURE__*/React.createElement(Box, _interactionBox), /*#__PURE__*/React.createElement(Center, resolvedProps, icon && sizedIcon && isChecked ? sizedIcon() : /*#__PURE__*/React.createElement(CircleIcon, _extends({}, _icon, {
-    opacity: isChecked ? 1 : 0
-  })))), wrapStringChild(children, _text)));
-}));
+      return /*#__PURE__*/ React.createElement(
+        Pressable,
+        _extends(
+          {
+            disabled: isDisabled,
+          },
+          pressableProps,
+          cleanInputProps,
+          {
+            ref: mergeRefs([ref, wrapperRef]),
+            accessibilityRole: 'radio',
+            onPressIn: composeEventHandlers(
+              onPressIn,
+              pressableProps.onPressIn
+            ),
+            onPressOut: composeEventHandlers(
+              onPressOut,
+              pressableProps.onPressOut
+            ), // @ts-ignore - web only
+            onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn), // @ts-ignore - web only
+            onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut), // @ts-ignore - web only
+            onFocus: composeEventHandlers(
+              composeEventHandlers(onFocus, focusProps.onFocus) // focusRingProps.onFocu
+            ), // @ts-ignore - web only
+            onBlur: composeEventHandlers(
+              composeEventHandlers(onBlur, focusProps.onBlur) // focusRingProps.onBlur
+            ),
+          }
+        ),
+        /*#__PURE__*/ React.createElement(
+          Stack,
+          _stack,
+          /*#__PURE__*/ React.createElement(
+            Center,
+            null,
+            /*#__PURE__*/ React.createElement(Box, _interactionBox),
+            /*#__PURE__*/ React.createElement(
+              Center,
+              resolvedProps,
+              icon && sizedIcon && isChecked
+                ? sizedIcon()
+                : /*#__PURE__*/ React.createElement(
+                    CircleIcon,
+                    _extends({}, _icon, {
+                      opacity: isChecked ? 1 : 0,
+                    })
+                  )
+            )
+          ),
+          wrapStringChild(children, _text)
+        )
+      );
+    }
+  )
+);
 
-const Radio = ({
-  icon,
-  children,
-  size,
-  wrapperRef,
-  isHovered: isHoveredProp,
-  isPressed: isPressedProp,
-  isFocused: isFocusedProp,
-  ...props
-}, ref) => {
+const Radio = (
+  {
+    icon,
+    children,
+    size,
+    wrapperRef,
+    isHovered: isHoveredProp,
+    isPressed: isPressedProp,
+    isFocused: isFocusedProp,
+    ...props
+  },
+  ref
+) => {
   var _contextState$state;
 
   const formControlContext = useFormControlContext();
   const contextState = React.useContext(RadioContext);
-  const combinedProps = combineContextAndProps({ ...formControlContext,
-    ...contextState
-  }, props);
+  const combinedProps = combineContextAndProps(
+    { ...formControlContext, ...contextState },
+    props
+  );
   const inputRef = React.useRef(null);
-  const radioState = useRadio({ ...combinedProps,
-    'aria-label': props.accessibilityLabel,
-    children
-  }, (_contextState$state = contextState.state) !== null && _contextState$state !== void 0 ? _contextState$state : {}, inputRef); // eslint-disable-next-line react-hooks/exhaustive-deps
+  const radioState = useRadio(
+    {
+      ...combinedProps,
+      'aria-label': props.accessibilityLabel || 'Radio',
+      children,
+    },
+    (_contextState$state = contextState.state) !== null &&
+      _contextState$state !== void 0
+      ? _contextState$state
+      : {},
+    inputRef
+  ); // eslint-disable-next-line react-hooks/exhaustive-deps
 
-  const inputProps = React.useMemo(() => radioState.inputProps, [radioState.inputProps.checked, radioState.inputProps.disabled]);
+  const inputProps = React.useMemo(
+    () => radioState.inputProps,
+    [radioState.inputProps.checked, radioState.inputProps.disabled]
+  );
   const contextCombinedProps = React.useMemo(() => {
-    return { ...combinedProps
-    }; // eslint-disable-next-line react-hooks/exhaustive-deps
+    return { ...combinedProps }; // eslint-disable-next-line react-hooks/exhaustive-deps
   }, [stableHash(combinedProps)]); //TODO: refactor for responsive prop
 
   if (useHasResponsiveProps(props)) {
@@ -139,10 +209,10 @@ const Radio = ({
 
   if (isEmptyObj(contextState)) {
     console.error('Error: Radio must be wrapped inside a Radio.Group');
-    return /*#__PURE__*/React.createElement(React.Fragment, null);
+    return /*#__PURE__*/ React.createElement(React.Fragment, null);
   }
 
-  return /*#__PURE__*/React.createElement(RadioComponent, {
+  return /*#__PURE__*/ React.createElement(RadioComponent, {
     inputProps: inputProps,
     combinedProps: contextCombinedProps,
     children: children,
@@ -152,9 +222,9 @@ const Radio = ({
     wrapperRef: wrapperRef,
     isHovered: isHoveredProp,
     isPressed: isPressedProp,
-    isFocused: isFocusedProp
+    isFocused: isFocusedProp,
   });
 };
 
-export default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Radio));
+export default /*#__PURE__*/ memo(/*#__PURE__*/ forwardRef(Radio));
 //# sourceMappingURL=Radio.js.map
diff --git a/node_modules/native-base/lib/module/components/primitives/Radio/Radio.js.map b/node_modules/native-base/lib/module/components/primitives/Radio/Radio.js.map
index 986056a..452b557 100644
--- a/node_modules/native-base/lib/module/components/primitives/Radio/Radio.js.map
+++ b/node_modules/native-base/lib/module/components/primitives/Radio/Radio.js.map
@@ -1 +1,95 @@
-{"version":3,"sources":["Radio.tsx"],"names":["React","memo","forwardRef","stableHash","Pressable","Center","Box","Stack","usePropsResolution","wrapStringChild","useRadio","RadioContext","mergeRefs","CircleIcon","useHasResponsiveProps","composeEventHandlers","combineContextAndProps","isEmptyObj","extractInObject","stylingProps","useHover","useFocus","useIsPressed","useFormControlContext","RadioComponent","icon","inputProps","combinedProps","size","children","wrapperRef","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","ref","isInvalid","isReadOnly","isIndeterminate","hoverProps","pressableProps","focusProps","disabled","isDisabled","checked","isChecked","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","_interactionBox","_icon","_stack","_text","resolvedProps","cleanInputProps","margin","layout","flexbox","position","background","padding","border","sizedIcon","cloneElement","Radio","props","formControlContext","contextState","useContext","inputRef","useRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { Center } from '../../composites/Center';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { useRadio } from '@react-native-aria/radio';\nimport { RadioContext } from './RadioGroup';\nimport { mergeRefs } from '../../../utils';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  composeEventHandlers,\n  combineContextAndProps,\n  isEmptyObj,\n} from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        size,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { hoverProps, isHovered } = useHover();\n      const { pressableProps, isPressed } = useIsPressed();\n      const { focusProps, isFocused } = useFocus();\n\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n\n      const {\n        onPressIn,\n        onPressOut,\n        onHoverIn,\n        onHoverOut,\n        onFocus,\n        onBlur,\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution(\n        'Radio',\n        {\n          ...combinedProps,\n          size,\n        },\n        {\n          isInvalid,\n          isReadOnly,\n          isDisabled,\n          isIndeterminate,\n          isChecked,\n          isHovered: isHoveredProp || isHovered,\n          isPressed: isPressedProp || isPressed,\n          isFocused: isFocusedProp || isFocused,\n        }\n      );\n\n      const [, cleanInputProps] = extractInObject(inputProps, [\n        ...stylingProps.margin,\n        ...stylingProps.layout,\n        ...stylingProps.flexbox,\n        ...stylingProps.position,\n        ...stylingProps.background,\n        ...stylingProps.padding,\n        ...stylingProps.border,\n        '_text',\n      ]);\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      return (\n        <Pressable\n          disabled={isDisabled}\n          {...pressableProps}\n          {...(cleanInputProps as IPressableProps)}\n          ref={mergeRefs([ref, wrapperRef])}\n          accessibilityRole=\"radio\"\n          onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n          onPressOut={composeEventHandlers(\n            onPressOut,\n            pressableProps.onPressOut\n          )}\n          // @ts-ignore - web only\n          onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n          // @ts-ignore - web only\n          onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n          // @ts-ignore - web only\n          onFocus={composeEventHandlers(\n            composeEventHandlers(onFocus, focusProps.onFocus)\n            // focusRingProps.onFocu\n          )}\n          // @ts-ignore - web only\n          onBlur={composeEventHandlers(\n            composeEventHandlers(onBlur, focusProps.onBlur)\n            // focusRingProps.onBlur\n          )}\n        >\n          <Stack {..._stack}>\n            <Center>\n              {/* Interaction Wrapper */}\n              <Box {..._interactionBox} />\n              {/* radio */}\n              <Center {...resolvedProps}>\n                {icon && sizedIcon && isChecked ? (\n                  sizedIcon()\n                ) : (\n                  <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n                )}\n              </Center>\n            </Center>\n            {/* Label */}\n            {wrapStringChild(children, _text)}\n          </Stack>\n        </Pressable>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    size,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      size={size}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressedProp}\n      isFocused={isFocusedProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "Radio.tsx"
+  ],
+  "names": [
+    "React",
+    "memo",
+    "forwardRef",
+    "stableHash",
+    "Pressable",
+    "Center",
+    "Box",
+    "Stack",
+    "usePropsResolution",
+    "wrapStringChild",
+    "useRadio",
+    "RadioContext",
+    "mergeRefs",
+    "CircleIcon",
+    "useHasResponsiveProps",
+    "composeEventHandlers",
+    "combineContextAndProps",
+    "isEmptyObj",
+    "extractInObject",
+    "stylingProps",
+    "useHover",
+    "useFocus",
+    "useIsPressed",
+    "useFormControlContext",
+    "RadioComponent",
+    "icon",
+    "inputProps",
+    "combinedProps",
+    "size",
+    "children",
+    "wrapperRef",
+    "isHovered",
+    "isHoveredProp",
+    "isPressed",
+    "isPressedProp",
+    "isFocused",
+    "isFocusedProp",
+    "ref",
+    "isInvalid",
+    "isReadOnly",
+    "isIndeterminate",
+    "hoverProps",
+    "pressableProps",
+    "focusProps",
+    "disabled",
+    "isDisabled",
+    "checked",
+    "isChecked",
+    "onPressIn",
+    "onPressOut",
+    "onHoverIn",
+    "onHoverOut",
+    "onFocus",
+    "onBlur",
+    "_interactionBox",
+    "_icon",
+    "_stack",
+    "_text",
+    "resolvedProps",
+    "cleanInputProps",
+    "margin",
+    "layout",
+    "flexbox",
+    "position",
+    "background",
+    "padding",
+    "border",
+    "sizedIcon",
+    "cloneElement",
+    "Radio",
+    "props",
+    "formControlContext",
+    "contextState",
+    "useContext",
+    "inputRef",
+    "useRef",
+    "radioState",
+    "accessibilityLabel",
+    "state",
+    "useMemo",
+    "contextCombinedProps",
+    "console",
+    "error"
+  ],
+  "mappings": ";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC,C,CACA;;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,SAAT,QAA2C,cAA3C;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AAEA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SACEC,oBADF,EAEEC,sBAFF,EAGEC,UAHF,QAIO,gBAJP;AAKA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,4BAA9C;AACA,SACEC,QADF,EAEEC,QAFF,EAGEC,YAHF,QAIO,sCAJP;AAKA,SAASC,qBAAT,QAAsC,8BAAtC;AAEA,MAAMC,cAAc,gBAAGvB,IAAI,eACzBC,UAAU,CACR,CACE;AACEuB,EAAAA,IADF;AAEEC,EAAAA,UAFF;AAGEC,EAAAA,aAHF;AAIEC,EAAAA,IAJF;AAKEC,EAAAA,QALF;AAMEC,EAAAA,UANF;AAOEC,EAAAA,SAAS,EAAEC,aAPb;AAQEC,EAAAA,SAAS,EAAEC,aARb;AASEC,EAAAA,SAAS,EAAEC;AATb,CADF,EAYEC,GAZF,KAaK;AACH,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,UAAb;AAAyBC,IAAAA;AAAzB,MAA6Cb,aAAnD;AACA,QAAM;AAAEc,IAAAA,UAAF;AAAcV,IAAAA;AAAd,MAA4BX,QAAQ,EAA1C;AACA,QAAM;AAAEsB,IAAAA,cAAF;AAAkBT,IAAAA;AAAlB,MAAgCX,YAAY,EAAlD;AACA,QAAM;AAAEqB,IAAAA,UAAF;AAAcR,IAAAA;AAAd,MAA4Bd,QAAQ,EAA1C;AAEA,QAAM;AAAEuB,IAAAA,QAAQ,EAAEC,UAAZ;AAAwBC,IAAAA,OAAO,EAAEC;AAAjC,MAA+CrB,UAArD;AAEA,QAAM;AACJsB,IAAAA,SADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,eAPI;AAQJC,IAAAA,KARI;AASJC,IAAAA,MATI;AAUJC,IAAAA,KAVI;AAWJ,OAAGC;AAXC,MAYFlD,kBAAkB,CACpB,OADoB,EAEpB,EACE,GAAGmB,aADL;AAEEC,IAAAA;AAFF,GAFoB,EAMpB;AACEU,IAAAA,SADF;AAEEC,IAAAA,UAFF;AAGEM,IAAAA,UAHF;AAIEL,IAAAA,eAJF;AAKEO,IAAAA,SALF;AAMEhB,IAAAA,SAAS,EAAEC,aAAa,IAAID,SAN9B;AAOEE,IAAAA,SAAS,EAAEC,aAAa,IAAID,SAP9B;AAQEE,IAAAA,SAAS,EAAEC,aAAa,IAAID;AAR9B,GANoB,CAZtB;AA8BA,QAAM,GAAGwB,eAAH,IAAsBzC,eAAe,CAACQ,UAAD,EAAa,CACtD,GAAGP,YAAY,CAACyC,MADsC,EAEtD,GAAGzC,YAAY,CAAC0C,MAFsC,EAGtD,GAAG1C,YAAY,CAAC2C,OAHsC,EAItD,GAAG3C,YAAY,CAAC4C,QAJsC,EAKtD,GAAG5C,YAAY,CAAC6C,UALsC,EAMtD,GAAG7C,YAAY,CAAC8C,OANsC,EAOtD,GAAG9C,YAAY,CAAC+C,MAPsC,EAQtD,OARsD,CAAb,CAA3C,CAtCG,CAiDH;;AACA,QAAMC,SAAS,GAAG;AAAA;AAChB;AACAnE,EAAAA,KAAK,CAACoE,YAAN,CAAmB3C,IAAnB,EAAyB,EACvB,GAAG8B;AADoB,GAAzB,CAFF;;AAMA,sBACE,oBAAC,SAAD;AACE,IAAA,QAAQ,EAAEV;AADZ,KAEMH,cAFN,EAGOiB,eAHP;AAIE,IAAA,GAAG,EAAE/C,SAAS,CAAC,CAACyB,GAAD,EAAMP,UAAN,CAAD,CAJhB;AAKE,IAAA,iBAAiB,EAAC,OALpB;AAME,IAAA,SAAS,EAAEf,oBAAoB,CAACiC,SAAD,EAAYN,cAAc,CAACM,SAA3B,CANjC;AAOE,IAAA,UAAU,EAAEjC,oBAAoB,CAC9BkC,UAD8B,EAE9BP,cAAc,CAACO,UAFe,CAPlC,CAWE;AAXF;AAYE,IAAA,SAAS,EAAElC,oBAAoB,CAACmC,SAAD,EAAYT,UAAU,CAACS,SAAvB,CAZjC,CAaE;AAbF;AAcE,IAAA,UAAU,EAAEnC,oBAAoB,CAACoC,UAAD,EAAaV,UAAU,CAACU,UAAxB,CAdlC,CAeE;AAfF;AAgBE,IAAA,OAAO,EAAEpC,oBAAoB,CAC3BA,oBAAoB,CAACqC,OAAD,EAAUT,UAAU,CAACS,OAArB,CADO,CAE3B;AAF2B,KAhB/B,CAoBE;AApBF;AAqBE,IAAA,MAAM,EAAErC,oBAAoB,CAC1BA,oBAAoB,CAACsC,MAAD,EAASV,UAAU,CAACU,MAApB,CADM,CAE1B;AAF0B;AArB9B,mBA0BE,oBAAC,KAAD,EAAWG,MAAX,eACE,oBAAC,MAAD,qBAEE,oBAAC,GAAD,EAASF,eAAT,CAFF,eAIE,oBAAC,MAAD,EAAYI,aAAZ,EACGjC,IAAI,IAAI0C,SAAR,IAAqBpB,SAArB,GACCoB,SAAS,EADV,gBAGC,oBAAC,UAAD,eAAgBZ,KAAhB;AAAuB,IAAA,OAAO,EAAER,SAAS,GAAG,CAAH,GAAO;AAAhD,KAJJ,CAJF,CADF,EAcGtC,eAAe,CAACoB,QAAD,EAAW4B,KAAX,CAdlB,CA1BF,CADF;AA6CD,CAnHO,CADe,CAA3B;;AAwHA,MAAMY,KAAK,GAAG,CACZ;AACE5C,EAAAA,IADF;AAEEI,EAAAA,QAFF;AAGED,EAAAA,IAHF;AAIEE,EAAAA,UAJF;AAKEC,EAAAA,SAAS,EAAEC,aALb;AAMEC,EAAAA,SAAS,EAAEC,aANb;AAOEC,EAAAA,SAAS,EAAEC,aAPb;AAQE,KAAGkC;AARL,CADY,EAWZjC,GAXY,KAYT;AAAA;;AACH,QAAMkC,kBAAkB,GAAGhD,qBAAqB,EAAhD;AACA,QAAMiD,YAAY,GAAGxE,KAAK,CAACyE,UAAN,CAAiB9D,YAAjB,CAArB;AACA,QAAMgB,aAAa,GAAGX,sBAAsB,CAC1C,EAAE,GAAGuD,kBAAL;AAAyB,OAAGC;AAA5B,GAD0C,EAE1CF,KAF0C,CAA5C;AAIA,QAAMI,QAAQ,GAAG1E,KAAK,CAAC2E,MAAN,CAAa,IAAb,CAAjB;AACA,QAAMC,UAAU,GAAGlE,QAAQ,CACzB,EAAE,GAAGiB,aAAL;AAAoB,kBAAc2C,KAAK,CAACO,kBAAxC;AAA4DhD,IAAAA;AAA5D,GADyB,yBAEzB2C,YAAY,CAACM,KAFY,qEAEH,EAFG,EAGzBJ,QAHyB,CAA3B,CARG,CAcH;;AACA,QAAMhD,UAAU,GAAG1B,KAAK,CAAC+E,OAAN,CAAc,MAAMH,UAAU,CAAClD,UAA/B,EAA2C,CAC5DkD,UAAU,CAAClD,UAAX,CAAsBoB,OADsC,EAE5D8B,UAAU,CAAClD,UAAX,CAAsBkB,QAFsC,CAA3C,CAAnB;AAKA,QAAMoC,oBAAoB,GAAGhF,KAAK,CAAC+E,OAAN,CAAc,MAAM;AAC/C,WAAO,EAAE,GAAGpD;AAAL,KAAP,CAD+C,CAE/C;AACD,GAH4B,EAG1B,CAACxB,UAAU,CAACwB,aAAD,CAAX,CAH0B,CAA7B,CApBG,CAyBH;;AACA,MAAIb,qBAAqB,CAACwD,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,MAAIrD,UAAU,CAACuD,YAAD,CAAd,EAA8B;AAC5BS,IAAAA,OAAO,CAACC,KAAR,CAAc,mDAAd;AACA,wBAAO,yCAAP;AACD;;AAED,sBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAExD,UADd;AAEE,IAAA,aAAa,EAAEsD,oBAFjB;AAGE,IAAA,QAAQ,EAAEnD,QAHZ;AAIE,IAAA,IAAI,EAAED,IAJR;AAKE,IAAA,GAAG,EAAES,GALP;AAME,IAAA,IAAI,EAAEZ,IANR;AAOE,IAAA,UAAU,EAAEK,UAPd;AAQE,IAAA,SAAS,EAAEE,aARb;AASE,IAAA,SAAS,EAAEE,aATb;AAUE,IAAA,SAAS,EAAEE;AAVb,IADF;AAcD,CA5DD;;AA8DA,4BAAenC,IAAI,eAACC,UAAU,CAACmE,KAAD,CAAX,CAAnB",
+  "sourcesContent": [
+    "import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { Center } from '../../composites/Center';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { useRadio } from '@react-native-aria/radio';\nimport { RadioContext } from './RadioGroup';\nimport { mergeRefs } from '../../../utils';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  composeEventHandlers,\n  combineContextAndProps,\n  isEmptyObj,\n} from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        size,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { hoverProps, isHovered } = useHover();\n      const { pressableProps, isPressed } = useIsPressed();\n      const { focusProps, isFocused } = useFocus();\n\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n\n      const {\n        onPressIn,\n        onPressOut,\n        onHoverIn,\n        onHoverOut,\n        onFocus,\n        onBlur,\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution(\n        'Radio',\n        {\n          ...combinedProps,\n          size,\n        },\n        {\n          isInvalid,\n          isReadOnly,\n          isDisabled,\n          isIndeterminate,\n          isChecked,\n          isHovered: isHoveredProp || isHovered,\n          isPressed: isPressedProp || isPressed,\n          isFocused: isFocusedProp || isFocused,\n        }\n      );\n\n      const [, cleanInputProps] = extractInObject(inputProps, [\n        ...stylingProps.margin,\n        ...stylingProps.layout,\n        ...stylingProps.flexbox,\n        ...stylingProps.position,\n        ...stylingProps.background,\n        ...stylingProps.padding,\n        ...stylingProps.border,\n        '_text',\n      ]);\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      return (\n        <Pressable\n          disabled={isDisabled}\n          {...pressableProps}\n          {...(cleanInputProps as IPressableProps)}\n          ref={mergeRefs([ref, wrapperRef])}\n          accessibilityRole=\"radio\"\n          onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n          onPressOut={composeEventHandlers(\n            onPressOut,\n            pressableProps.onPressOut\n          )}\n          // @ts-ignore - web only\n          onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n          // @ts-ignore - web only\n          onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n          // @ts-ignore - web only\n          onFocus={composeEventHandlers(\n            composeEventHandlers(onFocus, focusProps.onFocus)\n            // focusRingProps.onFocu\n          )}\n          // @ts-ignore - web only\n          onBlur={composeEventHandlers(\n            composeEventHandlers(onBlur, focusProps.onBlur)\n            // focusRingProps.onBlur\n          )}\n        >\n          <Stack {..._stack}>\n            <Center>\n              {/* Interaction Wrapper */}\n              <Box {..._interactionBox} />\n              {/* radio */}\n              <Center {...resolvedProps}>\n                {icon && sizedIcon && isChecked ? (\n                  sizedIcon()\n                ) : (\n                  <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n                )}\n              </Center>\n            </Center>\n            {/* Label */}\n            {wrapStringChild(children, _text)}\n          </Stack>\n        </Pressable>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    size,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel || 'test', children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      size={size}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressedProp}\n      isFocused={isFocusedProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"
+  ]
+}
diff --git a/node_modules/native-base/lib/module/components/primitives/Radio/Radio.web.js b/node_modules/native-base/lib/module/components/primitives/Radio/Radio.web.js
index fffafda..46a2bee 100644
--- a/node_modules/native-base/lib/module/components/primitives/Radio/Radio.web.js
+++ b/node_modules/native-base/lib/module/components/primitives/Radio/Radio.web.js
@@ -1,4 +1,19 @@
-function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
+function _extends() {
+  _extends =
+    Object.assign ||
+    function (target) {
+      for (var i = 1; i < arguments.length; i++) {
+        var source = arguments[i];
+        for (var key in source) {
+          if (Object.prototype.hasOwnProperty.call(source, key)) {
+            target[key] = source[key];
+          }
+        }
+      }
+      return target;
+    };
+  return _extends.apply(this, arguments);
+}
 
 import React, { memo, forwardRef } from 'react'; //@ts-ignore
 
@@ -18,131 +33,168 @@ import { CircleIcon } from '../Icon/Icons';
 import { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';
 import { combineContextAndProps, isEmptyObj } from '../../../utils';
 import { useFormControlContext } from '../../composites/FormControl';
-const RadioComponent = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(({
-  icon,
-  inputProps,
-  combinedProps,
-  children,
-  wrapperRef,
-  isHovered: isHoveredProp,
-  isPressed: isPressedProp,
-  isFocused: isFocusedProp,
-  isFocusVisible: isFocusVisibleProp,
-  ...props
-}, ref) => {
-  const {
-    isInvalid,
-    isReadOnly,
-    isIndeterminate
-  } = combinedProps;
-  const {
-    disabled: isDisabled,
-    checked: isChecked
-  } = inputProps;
-
-  const _ref = React.useRef(null);
-
-  const {
-    isHovered
-  } = useHover({}, _ref);
-  const mergedRefs = mergeRefs([_ref, wrapperRef]);
-  const {
-    focusProps,
-    isFocusVisible
-  } = useFocusRing();
-  const [isFocused, setFocused] = React.useState(isFocusedProp);
-  const [isPressed, setPressed] = React.useState(isPressedProp);
-
-  const handleFocus = () => {
-    setFocused(true);
-  };
-
-  const handleBlur = () => {
-    isFocusedProp ? setFocused(true) : setFocused(false);
-  };
-
-  const handlePressIn = () => {
-    setPressed(true);
-  };
-
-  const handlePressOut = () => {
-    isPressedProp ? setPressed(true) : setPressed(false);
-  };
-
-  const {
-    _interactionBox,
-    _icon,
-    _stack,
-    _text,
-    ...resolvedProps
-  } = usePropsResolution('Radio', combinedProps, {
-    isInvalid,
-    isReadOnly,
-    isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,
-    isDisabled,
-    isIndeterminate,
-    isChecked,
-    isHovered: isHoveredProp || isHovered,
+const RadioComponent = /*#__PURE__*/ memo(
+  /*#__PURE__*/ forwardRef(
+    (
+      {
+        icon,
+        inputProps,
+        combinedProps,
+        children,
+        wrapperRef,
+        isHovered: isHoveredProp,
+        isPressed: isPressedProp,
+        isFocused: isFocusedProp,
+        isFocusVisible: isFocusVisibleProp,
+        ...props
+      },
+      ref
+    ) => {
+      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;
+      const { disabled: isDisabled, checked: isChecked } = inputProps;
+
+      const _ref = React.useRef(null);
+
+      const { isHovered } = useHover({}, _ref);
+      const mergedRefs = mergeRefs([_ref, wrapperRef]);
+      const { focusProps, isFocusVisible } = useFocusRing();
+      const [isFocused, setFocused] = React.useState(isFocusedProp);
+      const [isPressed, setPressed] = React.useState(isPressedProp);
+
+      const handleFocus = () => {
+        setFocused(true);
+      };
+
+      const handleBlur = () => {
+        isFocusedProp ? setFocused(true) : setFocused(false);
+      };
+
+      const handlePressIn = () => {
+        setPressed(true);
+      };
+
+      const handlePressOut = () => {
+        isPressedProp ? setPressed(true) : setPressed(false);
+      };
+
+      const { _interactionBox, _icon, _stack, _text, ...resolvedProps } =
+        usePropsResolution('Radio', combinedProps, {
+          isInvalid,
+          isReadOnly,
+          isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,
+          isDisabled,
+          isIndeterminate,
+          isChecked,
+          isHovered: isHoveredProp || isHovered,
+          isPressed,
+          isFocused,
+        }); // only calling below function when icon exist.
+
+      const sizedIcon = () =>
+        /*#__PURE__*/
+        //@ts-ignore
+        React.cloneElement(icon, { ..._icon });
+
+      const component = /*#__PURE__*/ React.createElement(
+        Stack,
+        _stack,
+        /*#__PURE__*/ React.createElement(
+          Center,
+          null,
+          /*#__PURE__*/ React.createElement(Box, _interactionBox),
+          /*#__PURE__*/ React.createElement(
+            Center,
+            resolvedProps,
+            icon && sizedIcon && isChecked
+              ? sizedIcon()
+              : /*#__PURE__*/ React.createElement(
+                  CircleIcon,
+                  _extends({}, _icon, {
+                    opacity: isChecked ? 1 : 0,
+                  })
+                )
+          )
+        ),
+        wrapStringChild(children, _text)
+      ); //TODO: refactor for responsive prop
+
+      if (useHasResponsiveProps(props)) {
+        return null;
+      }
+
+      return /*#__PURE__*/ React.createElement(
+        Box, // @ts-ignore - RN web supports accessibilityRole="label"
+        {
+          accessibilityRole: 'label',
+          ref: mergedRefs,
+        },
+        /*#__PURE__*/ React.createElement(
+          'div',
+          {
+            onMouseDown: handlePressIn,
+            onMouseUp: handlePressOut,
+          },
+          /*#__PURE__*/ React.createElement(
+            VisuallyHidden,
+            null,
+            /*#__PURE__*/ React.createElement(
+              'input',
+              _extends({}, inputProps, focusProps, {
+                ref: ref,
+                onFocus: handleFocus,
+                onBlur: handleBlur,
+              })
+            )
+          ),
+          component
+        )
+      );
+    }
+  )
+);
+
+const Radio = (
+  {
+    icon,
+    children,
+    wrapperRef,
+    isHovered: isHoveredProp,
     isPressed,
-    isFocused
-  }); // only calling below function when icon exist.
-
-  const sizedIcon = () =>
-  /*#__PURE__*/
-  //@ts-ignore
-  React.cloneElement(icon, { ..._icon
-  });
-
-  const component = /*#__PURE__*/React.createElement(Stack, _stack, /*#__PURE__*/React.createElement(Center, null, /*#__PURE__*/React.createElement(Box, _interactionBox), /*#__PURE__*/React.createElement(Center, resolvedProps, icon && sizedIcon && isChecked ? sizedIcon() : /*#__PURE__*/React.createElement(CircleIcon, _extends({}, _icon, {
-    opacity: isChecked ? 1 : 0
-  })))), wrapStringChild(children, _text)); //TODO: refactor for responsive prop
-
-  if (useHasResponsiveProps(props)) {
-    return null;
-  }
-
-  return /*#__PURE__*/React.createElement(Box // @ts-ignore - RN web supports accessibilityRole="label"
-  , {
-    accessibilityRole: "label",
-    ref: mergedRefs
-  }, /*#__PURE__*/React.createElement("div", {
-    onMouseDown: handlePressIn,
-    onMouseUp: handlePressOut
-  }, /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement("input", _extends({}, inputProps, focusProps, {
-    ref: ref,
-    onFocus: handleFocus,
-    onBlur: handleBlur
-  }))), component));
-}));
-
-const Radio = ({
-  icon,
-  children,
-  wrapperRef,
-  isHovered: isHoveredProp,
-  isPressed,
-  isFocused: isFocusedProp,
-  isFocusVisible: isFocusVisibleProp,
-  ...props
-}, ref) => {
+    isFocused: isFocusedProp,
+    isFocusVisible: isFocusVisibleProp,
+    ...props
+  },
+  ref
+) => {
   var _contextState$state;
 
   const formControlContext = useFormControlContext();
   const contextState = React.useContext(RadioContext);
-  const combinedProps = combineContextAndProps({ ...formControlContext,
-    ...contextState
-  }, props);
+  const combinedProps = combineContextAndProps(
+    { ...formControlContext, ...contextState },
+    props
+  );
   const inputRef = React.useRef(null);
-  const radioState = useRadio({ ...combinedProps,
-    'aria-label': props.accessibilityLabel,
-    children
-  }, (_contextState$state = contextState.state) !== null && _contextState$state !== void 0 ? _contextState$state : {}, inputRef); //@ts-ignore
+  const radioState = useRadio(
+    {
+      ...combinedProps,
+      'aria-label': props.accessibilityLabel || 'Radio',
+      children,
+    },
+    (_contextState$state = contextState.state) !== null &&
+      _contextState$state !== void 0
+      ? _contextState$state
+      : {},
+    inputRef
+  ); //@ts-ignore
   // eslint-disable-next-line react-hooks/exhaustive-deps
 
-  const inputProps = React.useMemo(() => radioState.inputProps, [radioState.inputProps.checked, radioState.inputProps.disabled]);
+  const inputProps = React.useMemo(
+    () => radioState.inputProps,
+    [radioState.inputProps.checked, radioState.inputProps.disabled]
+  );
   const contextCombinedProps = React.useMemo(() => {
-    return { ...combinedProps
-    }; // eslint-disable-next-line react-hooks/exhaustive-deps
+    return { ...combinedProps }; // eslint-disable-next-line react-hooks/exhaustive-deps
   }, [stableHash(combinedProps)]); //TODO: refactor for responsive prop
 
   if (useHasResponsiveProps(props)) {
@@ -151,10 +203,10 @@ const Radio = ({
 
   if (isEmptyObj(contextState)) {
     console.error('Error: Radio must be wrapped inside a Radio.Group');
-    return /*#__PURE__*/React.createElement(React.Fragment, null);
+    return /*#__PURE__*/ React.createElement(React.Fragment, null);
   }
 
-  return /*#__PURE__*/React.createElement(RadioComponent, {
+  return /*#__PURE__*/ React.createElement(RadioComponent, {
     inputProps: inputProps,
     combinedProps: contextCombinedProps,
     children: children,
@@ -164,9 +216,9 @@ const Radio = ({
     isHovered: isHoveredProp,
     isPressed: isPressed,
     isFocused: isFocusedProp,
-    isFocusVisible: isFocusVisibleProp
+    isFocusVisible: isFocusVisibleProp,
   });
 };
 
-export default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Radio));
+export default /*#__PURE__*/ memo(/*#__PURE__*/ forwardRef(Radio));
 //# sourceMappingURL=Radio.web.js.map
diff --git a/node_modules/native-base/lib/module/components/primitives/Radio/Radio.web.js.map b/node_modules/native-base/lib/module/components/primitives/Radio/Radio.web.js.map
index 3dc3f10..e8aa971 100644
--- a/node_modules/native-base/lib/module/components/primitives/Radio/Radio.web.js.map
+++ b/node_modules/native-base/lib/module/components/primitives/Radio/Radio.web.js.map
@@ -1 +1,86 @@
-{"version":3,"sources":["Radio.web.tsx"],"names":["React","memo","forwardRef","stableHash","Box","Stack","Center","usePropsResolution","wrapStringChild","mergeRefs","useHover","useRadio","VisuallyHidden","RadioContext","useFocusRing","CircleIcon","useHasResponsiveProps","combineContextAndProps","isEmptyObj","useFormControlContext","RadioComponent","icon","inputProps","combinedProps","children","wrapperRef","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","props","ref","isInvalid","isReadOnly","isIndeterminate","disabled","isDisabled","checked","isChecked","_ref","useRef","mergedRefs","focusProps","setFocused","useState","setPressed","handleFocus","handleBlur","handlePressIn","handlePressOut","_interactionBox","_icon","_stack","_text","resolvedProps","sizedIcon","cloneElement","component","Radio","formControlContext","contextState","useContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n      const [isFocused, setFocused] = React.useState(isFocusedProp);\n      const [isPressed, setPressed] = React.useState(isPressedProp);\n      const handleFocus = () => {\n        setFocused(true);\n      };\n      const handleBlur = () => {\n        isFocusedProp ? setFocused(true) : setFocused(false);\n      };\n      const handlePressIn = () => {\n        setPressed(true);\n      };\n\n      const handlePressOut = () => {\n        isPressedProp ? setPressed(true) : setPressed(false);\n      };\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n        isPressed,\n        isFocused,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <div onMouseDown={handlePressIn} onMouseUp={handlePressOut}>\n            <VisuallyHidden>\n              <input\n                {...inputProps}\n                {...focusProps}\n                ref={ref}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n              />\n            </VisuallyHidden>\n            {component}\n          </div>\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressed}\n      isFocused={isFocusedProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "Radio.web.tsx"
+  ],
+  "names": [
+    "React",
+    "memo",
+    "forwardRef",
+    "stableHash",
+    "Box",
+    "Stack",
+    "Center",
+    "usePropsResolution",
+    "wrapStringChild",
+    "mergeRefs",
+    "useHover",
+    "useRadio",
+    "VisuallyHidden",
+    "RadioContext",
+    "useFocusRing",
+    "CircleIcon",
+    "useHasResponsiveProps",
+    "combineContextAndProps",
+    "isEmptyObj",
+    "useFormControlContext",
+    "RadioComponent",
+    "icon",
+    "inputProps",
+    "combinedProps",
+    "children",
+    "wrapperRef",
+    "isHovered",
+    "isHoveredProp",
+    "isPressed",
+    "isPressedProp",
+    "isFocused",
+    "isFocusedProp",
+    "isFocusVisible",
+    "isFocusVisibleProp",
+    "props",
+    "ref",
+    "isInvalid",
+    "isReadOnly",
+    "isIndeterminate",
+    "disabled",
+    "isDisabled",
+    "checked",
+    "isChecked",
+    "_ref",
+    "useRef",
+    "mergedRefs",
+    "focusProps",
+    "setFocused",
+    "useState",
+    "setPressed",
+    "handleFocus",
+    "handleBlur",
+    "handlePressIn",
+    "handlePressOut",
+    "_interactionBox",
+    "_icon",
+    "_stack",
+    "_text",
+    "resolvedProps",
+    "sizedIcon",
+    "cloneElement",
+    "component",
+    "Radio",
+    "formControlContext",
+    "contextState",
+    "useContext",
+    "inputRef",
+    "radioState",
+    "accessibilityLabel",
+    "state",
+    "useMemo",
+    "contextCombinedProps",
+    "console",
+    "error"
+  ],
+  "mappings": "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",
+  "sourcesContent": [
+    "import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n      const [isFocused, setFocused] = React.useState(isFocusedProp);\n      const [isPressed, setPressed] = React.useState(isPressedProp);\n      const handleFocus = () => {\n        setFocused(true);\n      };\n      const handleBlur = () => {\n        isFocusedProp ? setFocused(true) : setFocused(false);\n      };\n      const handlePressIn = () => {\n        setPressed(true);\n      };\n\n      const handlePressOut = () => {\n        isPressedProp ? setPressed(true) : setPressed(false);\n      };\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n        isPressed,\n        isFocused,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <div onMouseDown={handlePressIn} onMouseUp={handlePressOut}>\n            <VisuallyHidden>\n              <input\n                {...inputProps}\n                {...focusProps}\n                ref={ref}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n              />\n            </VisuallyHidden>\n            {component}\n          </div>\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel || 'test', children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressed}\n      isFocused={isFocusedProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"
+  ]
+}
diff --git a/node_modules/native-base/lib/module/components/primitives/Radio/RadioGroup.js b/node_modules/native-base/lib/module/components/primitives/Radio/RadioGroup.js
index 873ffdd..652d795 100644
--- a/node_modules/native-base/lib/module/components/primitives/Radio/RadioGroup.js
+++ b/node_modules/native-base/lib/module/components/primitives/Radio/RadioGroup.js
@@ -1,4 +1,19 @@
-function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
+function _extends() {
+  _extends =
+    Object.assign ||
+    function (target) {
+      for (var i = 1; i < arguments.length; i++) {
+        var source = arguments[i];
+        for (var key in source) {
+          if (Object.prototype.hasOwnProperty.call(source, key)) {
+            target[key] = source[key];
+          }
+        }
+      }
+      return target;
+    };
+  return _extends.apply(this, arguments);
+}
 
 import React, { memo, forwardRef } from 'react';
 import { Stack } from '../Stack';
@@ -7,25 +22,26 @@ import { useRadioGroupState } from '@react-stately/radio';
 import { useRadioGroup } from '@react-native-aria/radio';
 import { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';
 import { usePropsResolution } from '../../../hooks/useThemeProps';
-export const RadioContext = /*#__PURE__*/React.createContext({});
-const RadioWrapper = /*#__PURE__*/memo(props => {
+export const RadioContext = /*#__PURE__*/ React.createContext({});
+const RadioWrapper = /*#__PURE__*/ memo((props) => {
   const resolvedProps = usePropsResolution('RadioGroup', props);
-  return /*#__PURE__*/React.createElement(Stack, _extends({}, resolvedProps, props.radioGroupProps, props));
+  return /*#__PURE__*/ React.createElement(
+    Stack,
+    _extends({}, resolvedProps, props.radioGroupProps, props)
+  );
 });
 
-const RadioGroup = ({
-  size,
-  colorScheme,
-  _radio,
-  children,
-  ...props
-}, ref) => {
+const RadioGroup = ({ size, colorScheme, _radio, children, ...props }, ref) => {
   const formControlContext = useFormControlContext();
   const state = useRadioGroupState(props);
-  const radioGroupState = useRadioGroup({ ...formControlContext,
-    ...props,
-    'aria-label': props.accessibilityLabel
-  }, state);
+  const radioGroupState = useRadioGroup(
+    {
+      ...formControlContext,
+      ...props,
+      'aria-label': props.accessibilityLabel || 'radio-group',
+    },
+    state
+  );
   const [propsState] = React.useState(props);
   const contextValue = React.useMemo(() => {
     return {
@@ -33,25 +49,32 @@ const RadioGroup = ({
       size,
       colorScheme,
       ..._radio,
-      state
+      state,
     };
   }, [size, colorScheme, formControlContext, state, _radio]);
-  const radioGroupProps = React.useMemo(() => radioGroupState.radioGroupProps, // eslint-disable-next-line react-hooks/exhaustive-deps
-  []); //TODO: refactor for responsive prop
+  const radioGroupProps = React.useMemo(
+    () => radioGroupState.radioGroupProps, // eslint-disable-next-line react-hooks/exhaustive-deps
+    []
+  ); //TODO: refactor for responsive prop
 
-  if (useHasResponsiveProps({ ...props,
-    size,
-    colorScheme
-  })) {
+  if (useHasResponsiveProps({ ...props, size, colorScheme })) {
     return null;
   }
 
-  return /*#__PURE__*/React.createElement(RadioContext.Provider, {
-    value: contextValue
-  }, /*#__PURE__*/React.createElement(RadioWrapper, _extends({}, radioGroupProps, propsState, {
-    ref: ref
-  }), children));
+  return /*#__PURE__*/ React.createElement(
+    RadioContext.Provider,
+    {
+      value: contextValue,
+    },
+    /*#__PURE__*/ React.createElement(
+      RadioWrapper,
+      _extends({}, radioGroupProps, propsState, {
+        ref: ref,
+      }),
+      children
+    )
+  );
 };
 
-export default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(RadioGroup));
+export default /*#__PURE__*/ memo(/*#__PURE__*/ forwardRef(RadioGroup));
 //# sourceMappingURL=RadioGroup.js.map
diff --git a/node_modules/native-base/lib/module/components/primitives/Radio/RadioGroup.js.map b/node_modules/native-base/lib/module/components/primitives/Radio/RadioGroup.js.map
index 228336f..b827058 100644
--- a/node_modules/native-base/lib/module/components/primitives/Radio/RadioGroup.js.map
+++ b/node_modules/native-base/lib/module/components/primitives/Radio/RadioGroup.js.map
@@ -1 +1,41 @@
-{"version":3,"sources":["RadioGroup.tsx"],"names":["React","memo","forwardRef","Stack","useFormControlContext","useRadioGroupState","useRadioGroup","useHasResponsiveProps","usePropsResolution","RadioContext","createContext","RadioWrapper","props","resolvedProps","radioGroupProps","RadioGroup","size","colorScheme","_radio","children","ref","formControlContext","state","radioGroupState","accessibilityLabel","propsState","useState","contextValue","useMemo"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AAEA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,OAAO,MAAMC,YAAY,gBAAGT,KAAK,CAACU,aAAN,CAC1B,EAD0B,CAArB;AAGP,MAAMC,YAAY,gBAAGV,IAAI,CAAEW,KAAD,IAAgB;AACxC,QAAMC,aAAa,GAAGL,kBAAkB,CAAC,YAAD,EAAeI,KAAf,CAAxC;AACA,sBAAO,oBAAC,KAAD,eAAWC,aAAX,EAA8BD,KAAK,CAACE,eAApC,EAAyDF,KAAzD,EAAP;AACD,CAHwB,CAAzB;;AAKA,MAAMG,UAAU,GAAG,CACjB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqBC,EAAAA,MAArB;AAA6BC,EAAAA,QAA7B;AAAuC,KAAGP;AAA1C,CADiB,EAEjBQ,GAFiB,KAGd;AACH,QAAMC,kBAAkB,GAAGjB,qBAAqB,EAAhD;AAEA,QAAMkB,KAAK,GAAGjB,kBAAkB,CAACO,KAAD,CAAhC;AACA,QAAMW,eAAe,GAAGjB,aAAa,CACnC,EAAE,GAAGe,kBAAL;AAAyB,OAAGT,KAA5B;AAAmC,kBAAcA,KAAK,CAACY;AAAvD,GADmC,EAEnCF,KAFmC,CAArC;AAIA,QAAM,CAACG,UAAD,IAAezB,KAAK,CAAC0B,QAAN,CAAed,KAAf,CAArB;AACA,QAAMe,YAAiB,GAAG3B,KAAK,CAAC4B,OAAN,CAAc,MAAM;AAC5C,WAAO;AACLP,MAAAA,kBADK;AAELL,MAAAA,IAFK;AAGLC,MAAAA,WAHK;AAIL,SAAGC,MAJE;AAKLI,MAAAA;AALK,KAAP;AAOD,GARyB,EAQvB,CAACN,IAAD,EAAOC,WAAP,EAAoBI,kBAApB,EAAwCC,KAAxC,EAA+CJ,MAA/C,CARuB,CAA1B;AAUA,QAAMJ,eAAe,GAAGd,KAAK,CAAC4B,OAAN,CACtB,MAAML,eAAe,CAACT,eADA,EAEtB;AACA,IAHsB,CAAxB,CAnBG,CAyBH;;AACA,MAAIP,qBAAqB,CAAC,EAAE,GAAGK,KAAL;AAAYI,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,GAAD,CAAzB,EAA4D;AAC1D,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEU;AAA9B,kBACE,oBAAC,YAAD,eAAkBb,eAAlB,EAAuCW,UAAvC;AAAmD,IAAA,GAAG,EAAEL;AAAxD,MACGD,QADH,CADF,CADF;AAOD,CAxCD;;AA0CA,4BAAelB,IAAI,eAACC,UAAU,CAACa,UAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Stack } from '../Stack';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { IRadioContext, IRadioGroupProps } from './types';\nimport { useRadioGroupState } from '@react-stately/radio';\nimport { useRadioGroup } from '@react-native-aria/radio';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const RadioContext = React.createContext<IRadioContext>(\n  {} as IRadioContext\n);\nconst RadioWrapper = memo((props: any) => {\n  const resolvedProps = usePropsResolution('RadioGroup', props);\n  return <Stack {...resolvedProps} {...props.radioGroupProps} {...props} />;\n});\n\nconst RadioGroup = (\n  { size, colorScheme, _radio, children, ...props }: IRadioGroupProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const state = useRadioGroupState(props);\n  const radioGroupState = useRadioGroup(\n    { ...formControlContext, ...props, 'aria-label': props.accessibilityLabel },\n    state\n  );\n  const [propsState] = React.useState(props);\n  const contextValue: any = React.useMemo(() => {\n    return {\n      formControlContext,\n      size,\n      colorScheme,\n      ..._radio,\n      state,\n    };\n  }, [size, colorScheme, formControlContext, state, _radio]);\n\n  const radioGroupProps = React.useMemo(\n    () => radioGroupState.radioGroupProps,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n\n  return (\n    <RadioContext.Provider value={contextValue}>\n      <RadioWrapper {...radioGroupProps} {...propsState} ref={ref}>\n        {children}\n      </RadioWrapper>\n    </RadioContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(RadioGroup));\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "RadioGroup.tsx"
+  ],
+  "names": [
+    "React",
+    "memo",
+    "forwardRef",
+    "Stack",
+    "useFormControlContext",
+    "useRadioGroupState",
+    "useRadioGroup",
+    "useHasResponsiveProps",
+    "usePropsResolution",
+    "RadioContext",
+    "createContext",
+    "RadioWrapper",
+    "props",
+    "resolvedProps",
+    "radioGroupProps",
+    "RadioGroup",
+    "size",
+    "colorScheme",
+    "_radio",
+    "children",
+    "ref",
+    "formControlContext",
+    "state",
+    "radioGroupState",
+    "accessibilityLabel",
+    "propsState",
+    "useState",
+    "contextValue",
+    "useMemo"
+  ],
+  "mappings": ";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AAEA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,OAAO,MAAMC,YAAY,gBAAGT,KAAK,CAACU,aAAN,CAC1B,EAD0B,CAArB;AAGP,MAAMC,YAAY,gBAAGV,IAAI,CAAEW,KAAD,IAAgB;AACxC,QAAMC,aAAa,GAAGL,kBAAkB,CAAC,YAAD,EAAeI,KAAf,CAAxC;AACA,sBAAO,oBAAC,KAAD,eAAWC,aAAX,EAA8BD,KAAK,CAACE,eAApC,EAAyDF,KAAzD,EAAP;AACD,CAHwB,CAAzB;;AAKA,MAAMG,UAAU,GAAG,CACjB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqBC,EAAAA,MAArB;AAA6BC,EAAAA,QAA7B;AAAuC,KAAGP;AAA1C,CADiB,EAEjBQ,GAFiB,KAGd;AACH,QAAMC,kBAAkB,GAAGjB,qBAAqB,EAAhD;AAEA,QAAMkB,KAAK,GAAGjB,kBAAkB,CAACO,KAAD,CAAhC;AACA,QAAMW,eAAe,GAAGjB,aAAa,CACnC,EAAE,GAAGe,kBAAL;AAAyB,OAAGT,KAA5B;AAAmC,kBAAcA,KAAK,CAACY;AAAvD,GADmC,EAEnCF,KAFmC,CAArC;AAIA,QAAM,CAACG,UAAD,IAAezB,KAAK,CAAC0B,QAAN,CAAed,KAAf,CAArB;AACA,QAAMe,YAAiB,GAAG3B,KAAK,CAAC4B,OAAN,CAAc,MAAM;AAC5C,WAAO;AACLP,MAAAA,kBADK;AAELL,MAAAA,IAFK;AAGLC,MAAAA,WAHK;AAIL,SAAGC,MAJE;AAKLI,MAAAA;AALK,KAAP;AAOD,GARyB,EAQvB,CAACN,IAAD,EAAOC,WAAP,EAAoBI,kBAApB,EAAwCC,KAAxC,EAA+CJ,MAA/C,CARuB,CAA1B;AAUA,QAAMJ,eAAe,GAAGd,KAAK,CAAC4B,OAAN,CACtB,MAAML,eAAe,CAACT,eADA,EAEtB;AACA,IAHsB,CAAxB,CAnBG,CAyBH;;AACA,MAAIP,qBAAqB,CAAC,EAAE,GAAGK,KAAL;AAAYI,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,GAAD,CAAzB,EAA4D;AAC1D,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEU;AAA9B,kBACE,oBAAC,YAAD,eAAkBb,eAAlB,EAAuCW,UAAvC;AAAmD,IAAA,GAAG,EAAEL;AAAxD,MACGD,QADH,CADF,CADF;AAOD,CAxCD;;AA0CA,4BAAelB,IAAI,eAACC,UAAU,CAACa,UAAD,CAAX,CAAnB",
+  "sourcesContent": [
+    "import React, { memo, forwardRef } from 'react';\nimport { Stack } from '../Stack';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { IRadioContext, IRadioGroupProps } from './types';\nimport { useRadioGroupState } from '@react-stately/radio';\nimport { useRadioGroup } from '@react-native-aria/radio';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const RadioContext = React.createContext<IRadioContext>(\n  {} as IRadioContext\n);\nconst RadioWrapper = memo((props: any) => {\n  const resolvedProps = usePropsResolution('RadioGroup', props);\n  return <Stack {...resolvedProps} {...props.radioGroupProps} {...props} />;\n});\n\nconst RadioGroup = (\n  { size, colorScheme, _radio, children, ...props }: IRadioGroupProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const state = useRadioGroupState(props);\n  const radioGroupState = useRadioGroup(\n    { ...formControlContext, ...props, 'aria-label': props.accessibilityLabel || 'test' },\n    state\n  );\n  const [propsState] = React.useState(props);\n  const contextValue: any = React.useMemo(() => {\n    return {\n      formControlContext,\n      size,\n      colorScheme,\n      ..._radio,\n      state,\n    };\n  }, [size, colorScheme, formControlContext, state, _radio]);\n\n  const radioGroupProps = React.useMemo(\n    () => radioGroupState.radioGroupProps,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n\n  return (\n    <RadioContext.Provider value={contextValue}>\n      <RadioWrapper {...radioGroupProps} {...propsState} ref={ref}>\n        {children}\n      </RadioWrapper>\n    </RadioContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(RadioGroup));\n"
+  ]
+}
diff --git a/node_modules/native-base/lib/module/components/primitives/Select/Select.js b/node_modules/native-base/lib/module/components/primitives/Select/Select.js
index 5ece8a7..f5f07ea 100644
--- a/node_modules/native-base/lib/module/components/primitives/Select/Select.js
+++ b/node_modules/native-base/lib/module/components/primitives/Select/Select.js
@@ -1,4 +1,19 @@
-function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
+function _extends() {
+  _extends =
+    Object.assign ||
+    function (target) {
+      for (var i = 1; i < arguments.length; i++) {
+        var source = arguments[i];
+        for (var key in source) {
+          if (Object.prototype.hasOwnProperty.call(source, key)) {
+            target[key] = source[key];
+          }
+        }
+      }
+      return target;
+    };
+  return _extends.apply(this, arguments);
+}
 
 import React, { forwardRef, memo } from 'react';
 import { Platform, Keyboard } from 'react-native';
@@ -17,23 +32,26 @@ import { extractInObject, stylingProps } from '../../../theme/tools/utils';
 import { FlatList } from '../../basic/FlatList';
 import { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';
 import { Pressable } from '../Pressable';
-export const SelectContext = /*#__PURE__*/React.createContext({
+export const SelectContext = /*#__PURE__*/ React.createContext({
   onValueChange: () => {},
   selectedValue: null,
   _selectedItem: {},
-  _item: {}
+  _item: {},
 });
 
-const Select = ({
-  isHovered: isHoveredProp,
-  isFocused: isFocusedProp,
-  isFocusVisible: isFocusVisibleProp,
-  variant,
-  ...props
-}, ref) => {
+const Select = (
+  {
+    isHovered: isHoveredProp,
+    isFocused: isFocusedProp,
+    isFocusVisible: isFocusVisibleProp,
+    variant,
+    ...props
+  },
+  ref
+) => {
   const selectProps = useFormControl({
     isDisabled: props.isDisabled,
-    nativeID: props.nativeID
+    nativeID: props.nativeID,
   });
   const flatListData = [];
   const isDisabled = selectProps.disabled;
@@ -43,16 +61,13 @@ const Select = ({
 
   const [isOpen, setIsOpen] = React.useState(false);
   const [isFocused, setIsFocused] = React.useState(false);
-  const {
-    focusProps,
-    isFocusVisible
-  } = useFocusRing();
-  const {
-    hoverProps,
-    isHovered
-  } = useHover({
-    isDisabled
-  }, _ref);
+  const { focusProps, isFocusVisible } = useFocusRing();
+  const { hoverProps, isHovered } = useHover(
+    {
+      isDisabled,
+    },
+    _ref
+  );
   const {
     onValueChange,
     selectedValue,
@@ -74,36 +89,55 @@ const Select = ({
     _actionSheetBody,
     _webSelect,
     ...resolvedProps
-  } = usePropsResolution('Select', props, {
-    isDisabled,
-    isHovered: isHoveredProp || isHovered,
-    isFocused: isFocusedProp || isFocused,
-    isFocusVisible: isFocusVisibleProp || isFocusVisible
-  }, undefined);
+  } = usePropsResolution(
+    'Select',
+    props,
+    {
+      isDisabled,
+      isHovered: isHoveredProp || isHovered,
+      isFocused: isFocusedProp || isFocused,
+      isFocusVisible: isFocusVisibleProp || isFocusVisible,
+    },
+    undefined
+  );
   const [value, setValue] = useControllableState({
     value: selectedValue,
     defaultValue,
-    onChange: newValue => {
+    onChange: (newValue) => {
       onValueChange && onValueChange(newValue);
       setIsOpen(false);
-    }
+    },
   });
-  const itemsList = React.Children.toArray(children).map(child => {
+  const itemsList = React.Children.toArray(children).map((child) => {
     var _child$props, _child$props2;
 
     return {
-      label: child === null || child === void 0 ? void 0 : (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.label,
-      value: child === null || child === void 0 ? void 0 : (_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.value
+      label:
+        child === null || child === void 0
+          ? void 0
+          : (_child$props = child.props) === null || _child$props === void 0
+          ? void 0
+          : _child$props.label,
+      value:
+        child === null || child === void 0
+          ? void 0
+          : (_child$props2 = child.props) === null || _child$props2 === void 0
+          ? void 0
+          : _child$props2.value,
     };
   });
-  const selectedItemArray = itemsList.filter(item => (item === null || item === void 0 ? void 0 : item.value) === value);
-  const selectedItem = selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;
+  const selectedItemArray = itemsList.filter(
+    (item) => (item === null || item === void 0 ? void 0 : item.value) === value
+  );
+  const selectedItem =
+    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;
   const contextValue = React.useMemo(() => {
     return {
       onValueChange: setValue,
       selectedValue: value,
-      _selectedItem: _selectedItem !== null && _selectedItem !== void 0 ? _selectedItem : {},
-      _item: _item !== null && _item !== void 0 ? _item : {}
+      _selectedItem:
+        _selectedItem !== null && _selectedItem !== void 0 ? _selectedItem : {},
+      _item: _item !== null && _item !== void 0 ? _item : {},
     };
   }, [value, setValue, _selectedItem, _item]); //TODO: refactor for responsive prop
 
@@ -111,7 +145,17 @@ const Select = ({
     return null;
   }
 
-  const rightIcon = isOpen && dropdownOpenIcon ? dropdownOpenIcon : !isOpen && dropdownCloseIcon ? dropdownCloseIcon : dropdownIcon ? dropdownIcon : /*#__PURE__*/React.createElement(ChevronDownIcon, _customDropdownIconProps);
+  const rightIcon =
+    isOpen && dropdownOpenIcon
+      ? dropdownOpenIcon
+      : !isOpen && dropdownCloseIcon
+      ? dropdownCloseIcon
+      : dropdownIcon
+      ? dropdownIcon
+      : /*#__PURE__*/ React.createElement(
+          ChevronDownIcon,
+          _customDropdownIconProps
+        );
 
   const handleClose = () => {
     setIsOpen(false);
@@ -119,88 +163,172 @@ const Select = ({
   };
 
   if (optimized) {
-    React.Children.toArray(children).map(child => {
+    React.Children.toArray(children).map((child) => {
       flatListData.push(child.props);
     });
   }
 
-  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [...stylingProps.margin, ...stylingProps.flexbox, ...stylingProps.position, 'shadow', 'opacity']);
-  const commonInput = /*#__PURE__*/React.createElement(Input, _extends({
-    placeholder: placeholder,
-    InputRightElement: rightIcon
-  }, nonLayoutProps, {
-    // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component
-    // @ts-ignore-next-line
-    isFocused: isFocused,
-    isHovered: isHovered,
-    "aria-hidden": true,
-    importantForAccessibility: "no",
-    value: selectedItem ? selectedItem.label : '',
-    editable: false,
-    focusable: false,
-    isDisabled: isDisabled,
-    pointerEvents: "none",
-    variant: variant
-  }));
-  return Platform.OS === 'android' || Platform.OS === 'ios' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Pressable, _extends({
-    onPress: () => {
-      Keyboard.dismiss();
-      setIsOpen(true);
-      onOpen && onOpen();
-    },
-    disabled: isDisabled,
-    accessibilityLabel: accessibilityLabel,
-    accessibilityRole: "button",
-    ref: mergeRefs([ref, _ref])
-  }, layoutProps), commonInput), /*#__PURE__*/React.createElement(Actionsheet, _extends({
-    isOpen: isOpen,
-    onClose: handleClose
-  }, _actionSheet), /*#__PURE__*/React.createElement(Actionsheet.Content, _actionSheetContent, optimized ? /*#__PURE__*/React.createElement(FlatList, _extends({}, _actionSheetBody, {
-    data: flatListData // eslint-disable-next-line no-shadow
-    ,
-    keyExtractor: (_item, index) => index.toString(),
-    renderItem: ({
-      item
-    }) => {
-      const isSelected = selectedValue === (item === null || item === void 0 ? void 0 : item.value);
-      return /*#__PURE__*/React.createElement(Actionsheet.Item, _extends({
-        onPress: () => {
-          if (!isDisabled) {
-            setValue(item === null || item === void 0 ? void 0 : item.value);
-          }
-        },
-        accessibilityState: {
-          selected: isSelected
-        }
-      }, item, _item, isSelected && _selectedItem), item === null || item === void 0 ? void 0 : item.label);
-    }
-  })) : /*#__PURE__*/React.createElement(ScrollView, _actionSheetBody, /*#__PURE__*/React.createElement(SelectContext.Provider, {
-    value: contextValue
-  }, children))))) : /*#__PURE__*/React.createElement(Box, layoutProps, /*#__PURE__*/React.createElement("select", _extends({
-    "aria-readonly": selectProps.readOnly,
-    required: selectProps.required,
-    disabled: isDisabled
-  }, focusProps, hoverProps, {
-    ref: mergeRefs([ref, _ref]) //@ts-ignore
-    ,
-    onChange: e => {
-      setValue(e.target.value);
-    },
-    value: selectedItem === null ? tempFix : value,
-    "aria-label": placeholder,
-    onFocus: () => {
-      setIsFocused(true);
-      onOpen && onOpen();
-    },
-    onBlur: () => {
-      setIsFocused(false);
-      onClose && onClose();
-    }
-  }, _webSelect), /*#__PURE__*/React.createElement("option", {
-    disabled: true,
-    value: tempFix
-  }, placeholder), children), commonInput);
+  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [
+    ...stylingProps.margin,
+    ...stylingProps.flexbox,
+    ...stylingProps.position,
+    'shadow',
+    'opacity',
+  ]);
+  const commonInput = /*#__PURE__*/ React.createElement(
+    Input,
+    _extends(
+      {
+        placeholder: placeholder,
+        InputRightElement: rightIcon,
+      },
+      nonLayoutProps,
+      {
+        // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component
+        // @ts-ignore-next-line
+        'isFocused': isFocused,
+        'isHovered': isHovered,
+        'aria-hidden': true,
+        'importantForAccessibility': 'no',
+        'value': selectedItem ? selectedItem.label : '',
+        'editable': false,
+        'focusable': false,
+        'isDisabled': isDisabled,
+        'pointerEvents': 'none',
+        'variant': variant,
+      }
+    )
+  );
+  return Platform.OS === 'android' || Platform.OS === 'ios'
+    ? /*#__PURE__*/ React.createElement(
+        React.Fragment,
+        null,
+        /*#__PURE__*/ React.createElement(
+          Pressable,
+          _extends(
+            {
+              onPress: () => {
+                Keyboard.dismiss();
+                setIsOpen(true);
+                onOpen && onOpen();
+              },
+              disabled: isDisabled,
+              accessibilityLabel: accessibilityLabel,
+              accessibilityRole: 'button',
+              ref: mergeRefs([ref, _ref]),
+            },
+            layoutProps
+          ),
+          commonInput
+        ),
+        /*#__PURE__*/ React.createElement(
+          Actionsheet,
+          _extends(
+            {
+              isOpen: isOpen,
+              onClose: handleClose,
+            },
+            _actionSheet
+          ),
+          /*#__PURE__*/ React.createElement(
+            Actionsheet.Content,
+            _actionSheetContent,
+            optimized
+              ? /*#__PURE__*/ React.createElement(
+                  FlatList,
+                  _extends({}, _actionSheetBody, {
+                    data: flatListData, // eslint-disable-next-line no-shadow
+                    keyExtractor: (_item, index) => index.toString(),
+                    renderItem: ({ item }) => {
+                      const isSelected =
+                        selectedValue ===
+                        (item === null || item === void 0
+                          ? void 0
+                          : item.value);
+                      return /*#__PURE__*/ React.createElement(
+                        Actionsheet.Item,
+                        _extends(
+                          {
+                            onPress: () => {
+                              if (!isDisabled) {
+                                setValue(
+                                  item === null || item === void 0
+                                    ? void 0
+                                    : item.value
+                                );
+                              }
+                            },
+                            accessibilityState: {
+                              selected: isSelected,
+                            },
+                          },
+                          item,
+                          _item,
+                          isSelected && _selectedItem
+                        ),
+                        item === null || item === void 0 ? void 0 : item.label
+                      );
+                    },
+                  })
+                )
+              : /*#__PURE__*/ React.createElement(
+                  ScrollView,
+                  _actionSheetBody,
+                  /*#__PURE__*/ React.createElement(
+                    SelectContext.Provider,
+                    {
+                      value: contextValue,
+                    },
+                    children
+                  )
+                )
+          )
+        )
+      )
+    : /*#__PURE__*/ React.createElement(
+        Box,
+        layoutProps,
+        /*#__PURE__*/ React.createElement(
+          'select',
+          _extends(
+            {
+              'aria-readonly': selectProps.readOnly,
+              'required': selectProps.required,
+              'disabled': isDisabled,
+            },
+            focusProps,
+            hoverProps,
+            {
+              'ref': mergeRefs([ref, _ref]), //@ts-ignore
+              'onChange': (e) => {
+                setValue(e.target.value);
+              },
+              'value': selectedItem === null ? tempFix : value,
+              'aria-label': placeholder || 'Select an option',
+              'onFocus': () => {
+                setIsFocused(true);
+                onOpen && onOpen();
+              },
+              'onBlur': () => {
+                setIsFocused(false);
+                onClose && onClose();
+              },
+            },
+            _webSelect
+          ),
+          /*#__PURE__*/ React.createElement(
+            'option',
+            {
+              disabled: true,
+              value: tempFix,
+            },
+            placeholder
+          ),
+          children
+        ),
+        commonInput
+      );
 };
 
-export default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Select));
+export default /*#__PURE__*/ memo(/*#__PURE__*/ forwardRef(Select));
 //# sourceMappingURL=Select.js.map
diff --git a/node_modules/native-base/lib/module/components/primitives/Select/Select.js.map b/node_modules/native-base/lib/module/components/primitives/Select/Select.js.map
index 8a48e61..322b3c1 100644
--- a/node_modules/native-base/lib/module/components/primitives/Select/Select.js.map
+++ b/node_modules/native-base/lib/module/components/primitives/Select/Select.js.map
@@ -1 +1,116 @@
-{"version":3,"sources":["Select.tsx"],"names":["React","forwardRef","memo","Platform","Keyboard","Actionsheet","Box","Input","useFocusRing","useControllableState","usePropsResolution","useHover","mergeRefs","useFormControl","ChevronDownIcon","ScrollView","extractInObject","stylingProps","FlatList","useHasResponsiveProps","Pressable","SelectContext","createContext","onValueChange","selectedValue","_selectedItem","_item","Select","isHovered","isHoveredProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","variant","props","ref","selectProps","isDisabled","nativeID","flatListData","disabled","tempFix","_ref","useRef","isOpen","setIsOpen","useState","setIsFocused","focusProps","hoverProps","children","dropdownIcon","dropdownCloseIcon","dropdownOpenIcon","placeholder","accessibilityLabel","defaultValue","onOpen","onClose","optimized","_customDropdownIconProps","_actionSheet","_actionSheetContent","_actionSheetBody","_webSelect","resolvedProps","undefined","value","setValue","onChange","newValue","itemsList","Children","toArray","map","child","label","selectedItemArray","filter","item","selectedItem","length","contextValue","useMemo","rightIcon","handleClose","push","layoutProps","nonLayoutProps","margin","flexbox","position","commonInput","OS","dismiss","index","toString","isSelected","selected","readOnly","required","e","target"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISelectItemProps } from './types';\nimport { Pressable } from '../Pressable';\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    variant,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n  const flatListData: ISelectItemProps[] = [];\n\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [isFocused, setIsFocused] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    _customDropdownIconProps,\n    _actionSheet,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Select',\n    props,\n    {\n      isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    },\n    undefined\n  );\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n\n  const itemsList: Array<{\n    label: string;\n    value: string;\n  }> = React.Children.toArray(children).map((child: any) => {\n    return {\n      label: child?.props?.label,\n      value: child?.props?.value,\n    };\n  });\n\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item?.value === value\n  );\n\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem ?? {},\n      _item: _item ?? {},\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {..._customDropdownIconProps} />\n    );\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.toArray(children).map((child: any) => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    'shadow',\n    'opacity',\n  ]);\n\n  const commonInput = (\n    <Input\n      placeholder={placeholder}\n      InputRightElement={rightIcon}\n      {...nonLayoutProps}\n      // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n      // @ts-ignore-next-line\n      isFocused={isFocused}\n      isHovered={isHovered}\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem ? selectedItem.label : ''}\n      editable={false}\n      focusable={false}\n      isDisabled={isDisabled}\n      pointerEvents=\"none\"\n      variant={variant}\n    />\n  );\n\n  return Platform.OS === 'android' || Platform.OS === 'ios' ? (\n    <>\n      <Pressable\n        onPress={() => {\n          Keyboard.dismiss();\n          setIsOpen(true);\n          onOpen && onOpen();\n        }}\n        disabled={isDisabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        ref={mergeRefs([ref, _ref])}\n        {...layoutProps}\n      >\n        {commonInput}\n      </Pressable>\n      <Actionsheet isOpen={isOpen} onClose={handleClose} {..._actionSheet}>\n        <Actionsheet.Content {..._actionSheetContent}>\n          {/* TODO: Replace ScrollVeiw with FlatList */}\n          {optimized ? (\n            <FlatList\n              {..._actionSheetBody}\n              data={flatListData}\n              // eslint-disable-next-line no-shadow\n              keyExtractor={(_item, index) => index.toString()}\n              renderItem={({ item }: any) => {\n                const isSelected = selectedValue === item?.value;\n                return (\n                  <Actionsheet.Item\n                    onPress={() => {\n                      if (!isDisabled) {\n                        setValue(item?.value);\n                      }\n                    }}\n                    accessibilityState={{ selected: isSelected }}\n                    {...item}\n                    {..._item}\n                    {...(isSelected && _selectedItem)}\n                  >\n                    {item?.label}\n                  </Actionsheet.Item>\n                );\n              }}\n            />\n          ) : (\n            <ScrollView {..._actionSheetBody}>\n              <SelectContext.Provider value={contextValue}>\n                {children}\n              </SelectContext.Provider>\n            </ScrollView>\n          )}\n        </Actionsheet.Content>\n      </Actionsheet>\n    </>\n  ) : (\n    <Box {...layoutProps}>\n      {/* <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}> */}\n      <select\n        aria-readonly={selectProps.readOnly}\n        required={selectProps.required}\n        disabled={isDisabled}\n        {...focusProps}\n        {...hoverProps}\n        ref={mergeRefs([ref, _ref])}\n        //@ts-ignore\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        value={selectedItem === null ? tempFix : value}\n        aria-label={placeholder}\n        onFocus={() => {\n          setIsFocused(true);\n          onOpen && onOpen();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          onClose && onClose();\n        }}\n        {..._webSelect}\n      >\n        <option disabled value={tempFix}>\n          {placeholder}\n        </option>\n        {children}\n      </select>\n      {/* </Box> */}\n      {commonInput}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"]}
\ No newline at end of file
+{
+  "version": 3,
+  "sources": [
+    "Select.tsx"
+  ],
+  "names": [
+    "React",
+    "forwardRef",
+    "memo",
+    "Platform",
+    "Keyboard",
+    "Actionsheet",
+    "Box",
+    "Input",
+    "useFocusRing",
+    "useControllableState",
+    "usePropsResolution",
+    "useHover",
+    "mergeRefs",
+    "useFormControl",
+    "ChevronDownIcon",
+    "ScrollView",
+    "extractInObject",
+    "stylingProps",
+    "FlatList",
+    "useHasResponsiveProps",
+    "Pressable",
+    "SelectContext",
+    "createContext",
+    "onValueChange",
+    "selectedValue",
+    "_selectedItem",
+    "_item",
+    "Select",
+    "isHovered",
+    "isHoveredProp",
+    "isFocused",
+    "isFocusedProp",
+    "isFocusVisible",
+    "isFocusVisibleProp",
+    "variant",
+    "props",
+    "ref",
+    "selectProps",
+    "isDisabled",
+    "nativeID",
+    "flatListData",
+    "disabled",
+    "tempFix",
+    "_ref",
+    "useRef",
+    "isOpen",
+    "setIsOpen",
+    "useState",
+    "setIsFocused",
+    "focusProps",
+    "hoverProps",
+    "children",
+    "dropdownIcon",
+    "dropdownCloseIcon",
+    "dropdownOpenIcon",
+    "placeholder",
+    "accessibilityLabel",
+    "defaultValue",
+    "onOpen",
+    "onClose",
+    "optimized",
+    "_customDropdownIconProps",
+    "_actionSheet",
+    "_actionSheetContent",
+    "_actionSheetBody",
+    "_webSelect",
+    "resolvedProps",
+    "undefined",
+    "value",
+    "setValue",
+    "onChange",
+    "newValue",
+    "itemsList",
+    "Children",
+    "toArray",
+    "map",
+    "child",
+    "label",
+    "selectedItemArray",
+    "filter",
+    "item",
+    "selectedItem",
+    "length",
+    "contextValue",
+    "useMemo",
+    "rightIcon",
+    "handleClose",
+    "push",
+    "layoutProps",
+    "nonLayoutProps",
+    "margin",
+    "flexbox",
+    "position",
+    "commonInput",
+    "OS",
+    "dismiss",
+    "index",
+    "toString",
+    "isSelected",
+    "selected",
+    "readOnly",
+    "required",
+    "e",
+    "target"
+  ],
+  "mappings": "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",
+  "sourcesContent": [
+    "import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISelectItemProps } from './types';\nimport { Pressable } from '../Pressable';\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    variant,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n  const flatListData: ISelectItemProps[] = [];\n\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [isFocused, setIsFocused] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    _customDropdownIconProps,\n    _actionSheet,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Select',\n    props,\n    {\n      isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    },\n    undefined\n  );\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n\n  const itemsList: Array<{\n    label: string;\n    value: string;\n  }> = React.Children.toArray(children).map((child: any) => {\n    return {\n      label: child?.props?.label,\n      value: child?.props?.value,\n    };\n  });\n\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item?.value === value\n  );\n\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem ?? {},\n      _item: _item ?? {},\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {..._customDropdownIconProps} />\n    );\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.toArray(children).map((child: any) => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    'shadow',\n    'opacity',\n  ]);\n\n  const commonInput = (\n    <Input\n      placeholder={placeholder}\n      InputRightElement={rightIcon}\n      {...nonLayoutProps}\n      // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n      // @ts-ignore-next-line\n      isFocused={isFocused}\n      isHovered={isHovered}\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem ? selectedItem.label : ''}\n      editable={false}\n      focusable={false}\n      isDisabled={isDisabled}\n      pointerEvents=\"none\"\n      variant={variant}\n    />\n  );\n\n  return Platform.OS === 'android' || Platform.OS === 'ios' ? (\n    <>\n      <Pressable\n        onPress={() => {\n          Keyboard.dismiss();\n          setIsOpen(true);\n          onOpen && onOpen();\n        }}\n        disabled={isDisabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        ref={mergeRefs([ref, _ref])}\n        {...layoutProps}\n      >\n        {commonInput}\n      </Pressable>\n      <Actionsheet isOpen={isOpen} onClose={handleClose} {..._actionSheet}>\n        <Actionsheet.Content {..._actionSheetContent}>\n          {/* TODO: Replace ScrollVeiw with FlatList */}\n          {optimized ? (\n            <FlatList\n              {..._actionSheetBody}\n              data={flatListData}\n              // eslint-disable-next-line no-shadow\n              keyExtractor={(_item, index) => index.toString()}\n              renderItem={({ item }: any) => {\n                const isSelected = selectedValue === item?.value;\n                return (\n                  <Actionsheet.Item\n                    onPress={() => {\n                      if (!isDisabled) {\n                        setValue(item?.value);\n                      }\n                    }}\n                    accessibilityState={{ selected: isSelected }}\n                    {...item}\n                    {..._item}\n                    {...(isSelected && _selectedItem)}\n                  >\n                    {item?.label}\n                  </Actionsheet.Item>\n                );\n              }}\n            />\n          ) : (\n            <ScrollView {..._actionSheetBody}>\n              <SelectContext.Provider value={contextValue}>\n                {children}\n              </SelectContext.Provider>\n            </ScrollView>\n          )}\n        </Actionsheet.Content>\n      </Actionsheet>\n    </>\n  ) : (\n    <Box {...layoutProps}>\n      {/* <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}> */}\n      <select\n        aria-readonly={selectProps.readOnly}\n        required={selectProps.required}\n        disabled={isDisabled}\n        {...focusProps}\n        {...hoverProps}\n        ref={mergeRefs([ref, _ref])}\n        //@ts-ignore\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        value={selectedItem === null ? tempFix : value}\n        aria-label={placeholder || 'test'}\n        onFocus={() => {\n          setIsFocused(true);\n          onOpen && onOpen();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          onClose && onClose();\n        }}\n        {..._webSelect}\n      >\n        <option disabled value={tempFix}>\n          {placeholder}\n        </option>\n        {children}\n      </select>\n      {/* </Box> */}\n      {commonInput}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"
+  ]
+}
diff --git a/node_modules/native-base/src/components/composites/Popover/PopoverContent.tsx b/node_modules/native-base/src/components/composites/Popover/PopoverContent.tsx
index 71fd222..0228375 100644
--- a/node_modules/native-base/src/components/composites/Popover/PopoverContent.tsx
+++ b/node_modules/native-base/src/components/composites/Popover/PopoverContent.tsx
@@ -66,8 +66,8 @@ export const PopoverContent = React.forwardRef(
       Platform.OS === 'web'
         ? ({
             'accessibilityRole': 'dialog',
-            'aria-labelledby': headerMounted ? headerId : undefined,
-            'aria-describedby': bodyMounted ? bodyId : undefined,
+            'aria-labelledby': headerMounted ? headerId : 'test',
+            'aria-describedby': bodyMounted ? bodyId : 'test',
           } as any)
         : {};
 
diff --git a/node_modules/native-base/src/components/primitives/Checkbox/Checkbox.web.tsx b/node_modules/native-base/src/components/primitives/Checkbox/Checkbox.web.tsx
index e536ba2..0a76350 100644
--- a/node_modules/native-base/src/components/primitives/Checkbox/Checkbox.web.tsx
+++ b/node_modules/native-base/src/components/primitives/Checkbox/Checkbox.web.tsx
@@ -31,12 +31,8 @@ const Checkbox = (
 ) => {
   const formControlContext = useFormControlContext();
 
-  const {
-    isInvalid,
-    isReadOnly,
-    isIndeterminate,
-    ...combinedProps
-  } = combineContextAndProps(formControlContext, props);
+  const { isInvalid, isReadOnly, isIndeterminate, ...combinedProps } =
+    combineContextAndProps(formControlContext, props);
 
   const checkboxGroupContext = React.useContext(CheckboxGroupContext);
   const state = useToggleState({
@@ -56,7 +52,7 @@ const Checkbox = (
       useCheckboxGroupItem(
         {
           ...combinedProps,
-          'aria-label': combinedProps.accessibilityLabel,
+          'aria-label': combinedProps.accessibilityLabel || 'Checkbox',
           'value': combinedProps.value,
         },
         checkboxGroupContext.state,
@@ -67,7 +63,7 @@ const Checkbox = (
       useCheckbox(
         {
           ...combinedProps,
-          'aria-label': combinedProps.accessibilityLabel,
+          'aria-label': combinedProps.accessibilityLabel || 'Checkbox',
         },
         state,
         //@ts-ignore
@@ -75,11 +71,14 @@ const Checkbox = (
       );
 
   // eslint-disable-next-line react-hooks/exhaustive-deps
-  const inputProps = React.useMemo(() => groupItemInputProps, [
-    groupItemInputProps.checked,
-    groupItemInputProps.disabled,
-    groupItemInputProps,
-  ]);
+  const inputProps = React.useMemo(
+    () => groupItemInputProps,
+    [
+      groupItemInputProps.checked,
+      groupItemInputProps.disabled,
+      groupItemInputProps,
+    ]
+  );
 
   const contextCombinedProps = React.useMemo(() => {
     return { ...checkboxGroupContext, ...combinedProps };
@@ -120,22 +119,16 @@ const CheckboxComponent = React.memo(
 
     const { focusProps, isFocusVisible } = useFocusRing();
 
-    const {
-      icon,
-      _interactionBox,
-      _icon,
-      _stack,
-      _text,
-      ...resolvedProps
-    } = usePropsResolution('Checkbox', combinedProps, {
-      isInvalid,
-      isReadOnly,
-      isFocusVisible: isFocusVisibleProp || isFocusVisible,
-      isDisabled,
-      isIndeterminate,
-      isChecked,
-      isHovered: isHovered || isHoveredProp,
-    });
+    const { icon, _interactionBox, _icon, _stack, _text, ...resolvedProps } =
+      usePropsResolution('Checkbox', combinedProps, {
+        isInvalid,
+        isReadOnly,
+        isFocusVisible: isFocusVisibleProp || isFocusVisible,
+        isDisabled,
+        isIndeterminate,
+        isChecked,
+        isHovered: isHovered || isHoveredProp,
+      });
 
     const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [
       ...stylingProps.margin,
diff --git a/node_modules/native-base/src/components/primitives/Checkbox/CheckboxGroup.tsx b/node_modules/native-base/src/components/primitives/Checkbox/CheckboxGroup.tsx
index 9491c3b..6e1c77d 100644
--- a/node_modules/native-base/src/components/primitives/Checkbox/CheckboxGroup.tsx
+++ b/node_modules/native-base/src/components/primitives/Checkbox/CheckboxGroup.tsx
@@ -19,7 +19,7 @@ function CheckboxGroup(
   const { children } = props;
   const state = useCheckboxGroupState(props);
   const { groupProps } = useCheckboxGroup(
-    { 'aria-label': props.accessibilityLabel, ...props },
+    { 'aria-label': props.accessibilityLabel || 'test', ...props },
     state
   );
   const formControlContext = useFormControlContext();
diff --git a/node_modules/native-base/src/components/primitives/Radio/Radio.tsx b/node_modules/native-base/src/components/primitives/Radio/Radio.tsx
index d0fec39..8fbcced 100644
--- a/node_modules/native-base/src/components/primitives/Radio/Radio.tsx
+++ b/node_modules/native-base/src/components/primitives/Radio/Radio.tsx
@@ -167,16 +167,20 @@ const Radio = (
   );
   const inputRef = React.useRef(null);
   const radioState = useRadio(
-    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },
+    {
+      ...combinedProps,
+      'aria-label': props.accessibilityLabel || 'test',
+      children,
+    },
     contextState.state ?? {},
     inputRef
   );
 
   // eslint-disable-next-line react-hooks/exhaustive-deps
-  const inputProps = React.useMemo(() => radioState.inputProps, [
-    radioState.inputProps.checked,
-    radioState.inputProps.disabled,
-  ]);
+  const inputProps = React.useMemo(
+    () => radioState.inputProps,
+    [radioState.inputProps.checked, radioState.inputProps.disabled]
+  );
 
   const contextCombinedProps = React.useMemo(() => {
     return { ...combinedProps };
diff --git a/node_modules/native-base/src/components/primitives/Radio/Radio.web.tsx b/node_modules/native-base/src/components/primitives/Radio/Radio.web.tsx
index 25c8dba..6085614 100644
--- a/node_modules/native-base/src/components/primitives/Radio/Radio.web.tsx
+++ b/node_modules/native-base/src/components/primitives/Radio/Radio.web.tsx
@@ -55,23 +55,18 @@ const RadioComponent = memo(
       const handlePressOut = () => {
         isPressedProp ? setPressed(true) : setPressed(false);
       };
-      const {
-        _interactionBox,
-        _icon,
-        _stack,
-        _text,
-        ...resolvedProps
-      } = usePropsResolution('Radio', combinedProps, {
-        isInvalid,
-        isReadOnly,
-        isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,
-        isDisabled,
-        isIndeterminate,
-        isChecked,
-        isHovered: isHoveredProp || isHovered,
-        isPressed,
-        isFocused,
-      });
+      const { _interactionBox, _icon, _stack, _text, ...resolvedProps } =
+        usePropsResolution('Radio', combinedProps, {
+          isInvalid,
+          isReadOnly,
+          isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,
+          isDisabled,
+          isIndeterminate,
+          isChecked,
+          isHovered: isHoveredProp || isHovered,
+          isPressed,
+          isFocused,
+        });
 
       // only calling below function when icon exist.
       const sizedIcon = () =>
@@ -149,17 +144,21 @@ const Radio = (
 
   const inputRef = React.useRef(null);
   const radioState = useRadio(
-    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },
+    {
+      ...combinedProps,
+      'aria-label': props.accessibilityLabel || 'test',
+      children,
+    },
     contextState.state ?? {},
     inputRef
   );
 
   //@ts-ignore
   // eslint-disable-next-line react-hooks/exhaustive-deps
-  const inputProps = React.useMemo(() => radioState.inputProps, [
-    radioState.inputProps.checked,
-    radioState.inputProps.disabled,
-  ]);
+  const inputProps = React.useMemo(
+    () => radioState.inputProps,
+    [radioState.inputProps.checked, radioState.inputProps.disabled]
+  );
 
   const contextCombinedProps = React.useMemo(() => {
     return { ...combinedProps };
diff --git a/node_modules/native-base/src/components/primitives/Radio/RadioGroup.tsx b/node_modules/native-base/src/components/primitives/Radio/RadioGroup.tsx
index 74b73a9..ae2b433 100644
--- a/node_modules/native-base/src/components/primitives/Radio/RadioGroup.tsx
+++ b/node_modules/native-base/src/components/primitives/Radio/RadioGroup.tsx
@@ -23,7 +23,11 @@ const RadioGroup = (
 
   const state = useRadioGroupState(props);
   const radioGroupState = useRadioGroup(
-    { ...formControlContext, ...props, 'aria-label': props.accessibilityLabel },
+    {
+      ...formControlContext,
+      ...props,
+      'aria-label': props.accessibilityLabel || 'test',
+    },
     state
   );
   const [propsState] = React.useState(props);
diff --git a/node_modules/native-base/src/components/primitives/Select/Select.tsx b/node_modules/native-base/src/components/primitives/Select/Select.tsx
index ee8df1e..fe0495a 100644
--- a/node_modules/native-base/src/components/primitives/Select/Select.tsx
+++ b/node_modules/native-base/src/components/primitives/Select/Select.tsx
@@ -244,7 +244,7 @@ const Select = (
           setValue(e.target.value);
         }}
         value={selectedItem === null ? tempFix : value}
-        aria-label={placeholder}
+        aria-label={placeholder || 'Select an option'}
         onFocus={() => {
           setIsFocused(true);
           onOpen && onOpen();
diff --git a/node_modules/native-base/src/components/primitives/Slider/Slider.tsx b/node_modules/native-base/src/components/primitives/Slider/Slider.tsx
index 5747bb8..ee4e531 100644
--- a/node_modules/native-base/src/components/primitives/Slider/Slider.tsx
+++ b/node_modules/native-base/src/components/primitives/Slider/Slider.tsx
@@ -52,11 +52,7 @@ function Slider({ isDisabled, isReadOnly, ...props }: ISliderProps, ref?: any) {
     isReadOnly,
   });
 
-  const { trackProps } = useSlider(
-    (props as unknown) as any,
-    state,
-    trackLayout
-  );
+  const { trackProps } = useSlider(props as unknown as any, state, trackLayout);
 
   const contextValue = React.useMemo(() => {
     return {
